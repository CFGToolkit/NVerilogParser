using CFGToolkit.AST;
using CFGToolkit.ParserCombinator;
using CFGToolkit.ParserCombinator.Values;
using System;
using System.Collections.Generic;
using NVerilogParser.Lexer;

namespace CFGToolkit.Parsers.VerilogAMS
{
    public class TokenParsers
    {
        public static Lazy<IParser<VerilogToken, SyntaxNode>> source_text =
  new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("source_text#0", (args) => CreateSyntaxNode(nameof(source_text), args), new Lazy<IParser<VerilogToken>>(() => description.Value.Many(greedy: true))).Named("source_text"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> description =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("description#0", (args) => CreateSyntaxNode(nameof(description), args), new Lazy<IParser<VerilogToken>>(() => module_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("description#1", (args) => CreateSyntaxNode(nameof(description), args), new Lazy<IParser<VerilogToken>>(() => udp_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("description#2", (args) => CreateSyntaxNode(nameof(description), args), new Lazy<IParser<VerilogToken>>(() => config_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("description#3", (args) => CreateSyntaxNode(nameof(description), args), new Lazy<IParser<VerilogToken>>(() => paramset_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("description#4", (args) => CreateSyntaxNode(nameof(description), args), new Lazy<IParser<VerilogToken>>(() => nature_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("description#5", (args) => CreateSyntaxNode(nameof(description), args), new Lazy<IParser<VerilogToken>>(() => discipline_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("description#6", (args) => CreateSyntaxNode(nameof(description), args), new Lazy<IParser<VerilogToken>>(() => connectrules_declaration.Value)))))))).Named("description"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> module_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("module_declaration#0", (args) => CreateSyntaxNode(nameof(module_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => module_keyword.Value), new Lazy<IParser<VerilogToken>>(() => module_identifier.Value), new Lazy<IParser<VerilogToken>>(() => module_parameter_port_list.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_ports.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)), new Lazy<IParser<VerilogToken>>(() => module_item.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "endmodule")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("module_declaration#1", (args) => CreateSyntaxNode(nameof(module_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => module_keyword.Value), new Lazy<IParser<VerilogToken>>(() => module_identifier.Value), new Lazy<IParser<VerilogToken>>(() => module_parameter_port_list.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_port_declarations.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)), new Lazy<IParser<VerilogToken>>(() => non_port_module_item.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "endmodule")))).Named("module_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> module_keyword =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("module_keyword#0", (args) => CreateSyntaxNode(nameof(module_keyword), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "module")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("module_keyword#1", (args) => CreateSyntaxNode(nameof(module_keyword), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "macromodule")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("module_keyword#2", (args) => CreateSyntaxNode(nameof(module_keyword), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "connectmodule"))))).Named("module_keyword"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> module_parameter_port_list =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("module_parameter_port_list#0", (args) => CreateSyntaxNode(nameof(module_parameter_port_list), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.HASH)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => parameter_declaration.Value), new Lazy<IParser<VerilogToken>>(() => module_parameter_port_list_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("module_parameter_port_list"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> module_parameter_port_list_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("module_parameter_port_list_many#0", (args) => CreateSyntaxNode(nameof(module_parameter_port_list_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => parameter_declaration.Value)).Named("module_parameter_port_list_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_ports =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_ports#0", (args) => CreateSyntaxNode(nameof(list_of_ports), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => port.Value), new Lazy<IParser<VerilogToken>>(() => list_of_ports_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("list_of_ports"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_ports_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_ports_many#0", (args) => CreateSyntaxNode(nameof(list_of_ports_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => port.Value)).Named("list_of_ports_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_port_declarations =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_port_declarations#0", (args) => CreateSyntaxNode(nameof(list_of_port_declarations), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => port_declaration.Value), new Lazy<IParser<VerilogToken>>(() => list_of_port_declarations_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("list_of_port_declarations#1", (args) => CreateSyntaxNode(nameof(list_of_port_declarations), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))).Named("list_of_port_declarations"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_port_declarations_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_port_declarations_many#0", (args) => CreateSyntaxNode(nameof(list_of_port_declarations_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => port_declaration.Value)).Named("list_of_port_declarations_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> port =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("port#0", (args) => CreateSyntaxNode(nameof(port), args), new Lazy<IParser<VerilogToken>>(() => port_expression.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("port#1", (args) => CreateSyntaxNode(nameof(port), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.DOT)), new Lazy<IParser<VerilogToken>>(() => port_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => port_expression.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))).Named("port"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> port_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("port_expression#0", (args) => CreateSyntaxNode(nameof(port_expression), args), new Lazy<IParser<VerilogToken>>(() => port_reference.Value), new Lazy<IParser<VerilogToken>>(() => port_expression_many.Value.Many(greedy: true))).Named("port_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> port_expression_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("port_expression_many#0", (args) => CreateSyntaxNode(nameof(port_expression_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => port_reference.Value)).Named("port_expression_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> port_reference =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("port_reference#0", (args) => CreateSyntaxNode(nameof(port_reference), args), new Lazy<IParser<VerilogToken>>(() => port_identifier.Value), new Lazy<IParser<VerilogToken>>(() => port_reference_optional.Value.Optional(greedy: false))).Named("port_reference"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> port_reference_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("port_reference_optional#0", (args) => CreateSyntaxNode(nameof(port_reference_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => constant_range_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE))).Named("port_reference_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> port_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("port_declaration#0", (args) => CreateSyntaxNode(nameof(port_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => inout_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("port_declaration#1", (args) => CreateSyntaxNode(nameof(port_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => input_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("port_declaration#2", (args) => CreateSyntaxNode(nameof(port_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => output_declaration.Value)))).Named("port_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> module_item =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("module_item#0", (args) => CreateSyntaxNode(nameof(module_item), args), new Lazy<IParser<VerilogToken>>(() => port_declaration.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("module_item#1", (args) => CreateSyntaxNode(nameof(module_item), args), new Lazy<IParser<VerilogToken>>(() => non_port_module_item.Value))).Named("module_item"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> module_or_generate_item =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("module_or_generate_item#0", (args) => CreateSyntaxNode(nameof(module_or_generate_item), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => module_or_generate_item_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("module_or_generate_item#1", (args) => CreateSyntaxNode(nameof(module_or_generate_item), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => local_parameter_declaration.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("module_or_generate_item#2", (args) => CreateSyntaxNode(nameof(module_or_generate_item), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => parameter_override.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("module_or_generate_item#3", (args) => CreateSyntaxNode(nameof(module_or_generate_item), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => continuous_assign.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("module_or_generate_item#4", (args) => CreateSyntaxNode(nameof(module_or_generate_item), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => gate_instantiation.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("module_or_generate_item#5", (args) => CreateSyntaxNode(nameof(module_or_generate_item), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => udp_instantiation.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("module_or_generate_item#6", (args) => CreateSyntaxNode(nameof(module_or_generate_item), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => module_instantiation.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("module_or_generate_item#7", (args) => CreateSyntaxNode(nameof(module_or_generate_item), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => initial_construct.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("module_or_generate_item#8", (args) => CreateSyntaxNode(nameof(module_or_generate_item), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => always_construct.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("module_or_generate_item#9", (args) => CreateSyntaxNode(nameof(module_or_generate_item), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => loop_generate_construct.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("module_or_generate_item#10", (args) => CreateSyntaxNode(nameof(module_or_generate_item), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => conditional_generate_construct.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("module_or_generate_item#11", (args) => CreateSyntaxNode(nameof(module_or_generate_item), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_construct.Value))))))))))))).Named("module_or_generate_item"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> module_or_generate_item_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("module_or_generate_item_declaration#0", (args) => CreateSyntaxNode(nameof(module_or_generate_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => net_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("module_or_generate_item_declaration#1", (args) => CreateSyntaxNode(nameof(module_or_generate_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => reg_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("module_or_generate_item_declaration#2", (args) => CreateSyntaxNode(nameof(module_or_generate_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => integer_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("module_or_generate_item_declaration#3", (args) => CreateSyntaxNode(nameof(module_or_generate_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => real_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("module_or_generate_item_declaration#4", (args) => CreateSyntaxNode(nameof(module_or_generate_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => time_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("module_or_generate_item_declaration#5", (args) => CreateSyntaxNode(nameof(module_or_generate_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => realtime_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("module_or_generate_item_declaration#6", (args) => CreateSyntaxNode(nameof(module_or_generate_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => event_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("module_or_generate_item_declaration#7", (args) => CreateSyntaxNode(nameof(module_or_generate_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => genvar_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("module_or_generate_item_declaration#8", (args) => CreateSyntaxNode(nameof(module_or_generate_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => task_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("module_or_generate_item_declaration#9", (args) => CreateSyntaxNode(nameof(module_or_generate_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => function_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("module_or_generate_item_declaration#10", (args) => CreateSyntaxNode(nameof(module_or_generate_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => branch_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("module_or_generate_item_declaration#11", (args) => CreateSyntaxNode(nameof(module_or_generate_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => analog_function_declaration.Value))))))))))))).Named("module_or_generate_item_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> non_port_module_item =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("non_port_module_item#0", (args) => CreateSyntaxNode(nameof(non_port_module_item), args), new Lazy<IParser<VerilogToken>>(() => module_or_generate_item.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("non_port_module_item#1", (args) => CreateSyntaxNode(nameof(non_port_module_item), args), new Lazy<IParser<VerilogToken>>(() => generate_region.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("non_port_module_item#2", (args) => CreateSyntaxNode(nameof(non_port_module_item), args), new Lazy<IParser<VerilogToken>>(() => specify_block.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("non_port_module_item#3", (args) => CreateSyntaxNode(nameof(non_port_module_item), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => parameter_declaration.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("non_port_module_item#4", (args) => CreateSyntaxNode(nameof(non_port_module_item), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => specparam_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("non_port_module_item#5", (args) => CreateSyntaxNode(nameof(non_port_module_item), args), new Lazy<IParser<VerilogToken>>(() => aliasparam_declaration.Value))))))).Named("non_port_module_item"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> parameter_override =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("parameter_override#0", (args) => CreateSyntaxNode(nameof(parameter_override), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "defparam")), new Lazy<IParser<VerilogToken>>(() => list_of_defparam_assignments.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("parameter_override"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> config_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("config_declaration#0", (args) => CreateSyntaxNode(nameof(config_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "config")), new Lazy<IParser<VerilogToken>>(() => config_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)), new Lazy<IParser<VerilogToken>>(() => design_statement.Value), new Lazy<IParser<VerilogToken>>(() => config_rule_statement.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "endconfig"))).Named("config_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> design_statement =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("design_statement#0", (args) => CreateSyntaxNode(nameof(design_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "design")), new Lazy<IParser<VerilogToken>>(() => design_statement_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("design_statement"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> design_statement_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("design_statement_many#0", (args) => CreateSyntaxNode(nameof(design_statement_many), args), new Lazy<IParser<VerilogToken>>(() => design_statement_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => cell_identifier.Value)).Named("design_statement_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> design_statement_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("design_statement_optional#0", (args) => CreateSyntaxNode(nameof(design_statement_optional), args), new Lazy<IParser<VerilogToken>>(() => library_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.DOT))).Named("design_statement_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> config_rule_statement =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("config_rule_statement#0", (args) => CreateSyntaxNode(nameof(config_rule_statement), args), new Lazy<IParser<VerilogToken>>(() => default_clause.Value), new Lazy<IParser<VerilogToken>>(() => liblist_clause.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("config_rule_statement#1", (args) => CreateSyntaxNode(nameof(config_rule_statement), args), new Lazy<IParser<VerilogToken>>(() => inst_clause.Value), new Lazy<IParser<VerilogToken>>(() => liblist_clause.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("config_rule_statement#2", (args) => CreateSyntaxNode(nameof(config_rule_statement), args), new Lazy<IParser<VerilogToken>>(() => inst_clause.Value), new Lazy<IParser<VerilogToken>>(() => use_clause.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("config_rule_statement#3", (args) => CreateSyntaxNode(nameof(config_rule_statement), args), new Lazy<IParser<VerilogToken>>(() => cell_clause.Value), new Lazy<IParser<VerilogToken>>(() => liblist_clause.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("config_rule_statement#4", (args) => CreateSyntaxNode(nameof(config_rule_statement), args), new Lazy<IParser<VerilogToken>>(() => cell_clause.Value), new Lazy<IParser<VerilogToken>>(() => use_clause.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))))))).Named("config_rule_statement"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> default_clause =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("default_clause#0", (args) => CreateSyntaxNode(nameof(default_clause), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "default"))).Named("default_clause"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> inst_clause =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("inst_clause#0", (args) => CreateSyntaxNode(nameof(inst_clause), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "instance")), new Lazy<IParser<VerilogToken>>(() => inst_name.Value)).Named("inst_clause"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> inst_name =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("inst_name#0", (args) => CreateSyntaxNode(nameof(inst_name), args), new Lazy<IParser<VerilogToken>>(() => topmodule_identifier.Value), new Lazy<IParser<VerilogToken>>(() => inst_name_many.Value.Many(greedy: true))).Named("inst_name"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> inst_name_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("inst_name_many#0", (args) => CreateSyntaxNode(nameof(inst_name_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, ".instance_identifier"))).Named("inst_name_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> cell_clause =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("cell_clause#0", (args) => CreateSyntaxNode(nameof(cell_clause), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "cell")), new Lazy<IParser<VerilogToken>>(() => cell_clause_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => cell_identifier.Value)).Named("cell_clause"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> cell_clause_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("cell_clause_optional#0", (args) => CreateSyntaxNode(nameof(cell_clause_optional), args), new Lazy<IParser<VerilogToken>>(() => library_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.DOT))).Named("cell_clause_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> liblist_clause =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("liblist_clause#0", (args) => CreateSyntaxNode(nameof(liblist_clause), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "liblist")), new Lazy<IParser<VerilogToken>>(() => library_identifier.Value.Many(greedy: true))).Named("liblist_clause"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> use_clause =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("use_clause#0", (args) => CreateSyntaxNode(nameof(use_clause), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "use")), new Lazy<IParser<VerilogToken>>(() => use_clause_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => cell_identifier.Value), new Lazy<IParser<VerilogToken>>(() => use_config.Value.Optional(greedy: false))).Named("use_clause"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> use_clause_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("use_clause_optional#0", (args) => CreateSyntaxNode(nameof(use_clause_optional), args), new Lazy<IParser<VerilogToken>>(() => library_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.DOT))).Named("use_clause_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> use_config =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("use_config#0", (args) => CreateSyntaxNode(nameof(use_config), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "config"))).Named("use_config"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> nature_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("nature_declaration#0", (args) => CreateSyntaxNode(nameof(nature_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "nature")), new Lazy<IParser<VerilogToken>>(() => nature_identifier.Value), new Lazy<IParser<VerilogToken>>(() => nature_declaration_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => nature_declaration_optional_2.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => nature_item.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "endnature"))).Named("nature_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> nature_declaration_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("nature_declaration_optional#0", (args) => CreateSyntaxNode(nameof(nature_declaration_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => parent_nature.Value)).Named("nature_declaration_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> nature_declaration_optional_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("nature_declaration_optional_2#0", (args) => CreateSyntaxNode(nameof(nature_declaration_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("nature_declaration_optional_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> parent_nature =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("parent_nature#0", (args) => CreateSyntaxNode(nameof(parent_nature), args), new Lazy<IParser<VerilogToken>>(() => nature_identifier.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("parent_nature#1", (args) => CreateSyntaxNode(nameof(parent_nature), args), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.DOT)), new Lazy<IParser<VerilogToken>>(() => potential_or_flow.Value))).Named("parent_nature"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> nature_item =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("nature_item#0", (args) => CreateSyntaxNode(nameof(nature_item), args), new Lazy<IParser<VerilogToken>>(() => nature_attribute.Value)).Named("nature_item"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> nature_attribute =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("nature_attribute#0", (args) => CreateSyntaxNode(nameof(nature_attribute), args), new Lazy<IParser<VerilogToken>>(() => nature_attribute_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => nature_attribute_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("nature_attribute"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> discipline_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("discipline_declaration#0", (args) => CreateSyntaxNode(nameof(discipline_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "discipline")), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value), new Lazy<IParser<VerilogToken>>(() => discipline_declaration_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => discipline_item.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "enddiscipline"))).Named("discipline_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> discipline_declaration_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("discipline_declaration_optional#0", (args) => CreateSyntaxNode(nameof(discipline_declaration_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("discipline_declaration_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> discipline_item =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("discipline_item#0", (args) => CreateSyntaxNode(nameof(discipline_item), args), new Lazy<IParser<VerilogToken>>(() => nature_binding.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("discipline_item#1", (args) => CreateSyntaxNode(nameof(discipline_item), args), new Lazy<IParser<VerilogToken>>(() => discipline_domain_binding.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("discipline_item#2", (args) => CreateSyntaxNode(nameof(discipline_item), args), new Lazy<IParser<VerilogToken>>(() => nature_attribute_override.Value)))).Named("discipline_item"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> nature_binding =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("nature_binding#0", (args) => CreateSyntaxNode(nameof(nature_binding), args), new Lazy<IParser<VerilogToken>>(() => potential_or_flow.Value), new Lazy<IParser<VerilogToken>>(() => nature_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("nature_binding"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> potential_or_flow =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("potential_or_flow#0", (args) => CreateSyntaxNode(nameof(potential_or_flow), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "potential")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("potential_or_flow#1", (args) => CreateSyntaxNode(nameof(potential_or_flow), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "flow")))).Named("potential_or_flow"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> discipline_domain_binding =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("discipline_domain_binding#0", (args) => CreateSyntaxNode(nameof(discipline_domain_binding), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "domain")), new Lazy<IParser<VerilogToken>>(() => discrete_or_continuous.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("discipline_domain_binding"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> discrete_or_continuous =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("discrete_or_continuous#0", (args) => CreateSyntaxNode(nameof(discrete_or_continuous), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "discrete")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("discrete_or_continuous#1", (args) => CreateSyntaxNode(nameof(discrete_or_continuous), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "continuous")))).Named("discrete_or_continuous"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> nature_attribute_override =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("nature_attribute_override#0", (args) => CreateSyntaxNode(nameof(nature_attribute_override), args), new Lazy<IParser<VerilogToken>>(() => potential_or_flow.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.DOT)), new Lazy<IParser<VerilogToken>>(() => nature_attribute.Value)).Named("nature_attribute_override"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> connectrules_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("connectrules_declaration#0", (args) => CreateSyntaxNode(nameof(connectrules_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "connectrules")), new Lazy<IParser<VerilogToken>>(() => connectrules_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)), new Lazy<IParser<VerilogToken>>(() => connectrules_item.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "endconnectrules"))).Named("connectrules_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> connectrules_item =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("connectrules_item#0", (args) => CreateSyntaxNode(nameof(connectrules_item), args), new Lazy<IParser<VerilogToken>>(() => connect_insertion.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("connectrules_item#1", (args) => CreateSyntaxNode(nameof(connectrules_item), args), new Lazy<IParser<VerilogToken>>(() => connect_resolution.Value))).Named("connectrules_item"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> connect_insertion =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("connect_insertion#0", (args) => CreateSyntaxNode(nameof(connect_insertion), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "connect")), new Lazy<IParser<VerilogToken>>(() => connectmodule_identifier.Value), new Lazy<IParser<VerilogToken>>(() => connect_mode.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => parameter_value_assignment.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => connect_port_overrides.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("connect_insertion"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> connect_mode =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("connect_mode#0", (args) => CreateSyntaxNode(nameof(connect_mode), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "merged")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("connect_mode#1", (args) => CreateSyntaxNode(nameof(connect_mode), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "split")))).Named("connect_mode"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> connect_port_overrides =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("connect_port_overrides#0", (args) => CreateSyntaxNode(nameof(connect_port_overrides), args), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("connect_port_overrides#1", (args) => CreateSyntaxNode(nameof(connect_port_overrides), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "input")), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "output")), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("connect_port_overrides#2", (args) => CreateSyntaxNode(nameof(connect_port_overrides), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "output")), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "input")), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("connect_port_overrides#3", (args) => CreateSyntaxNode(nameof(connect_port_overrides), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "inout")), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "inout")), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value))))).Named("connect_port_overrides"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> connect_resolution =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("connect_resolution#0", (args) => CreateSyntaxNode(nameof(connect_resolution), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "connect")), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value), new Lazy<IParser<VerilogToken>>(() => connect_resolution_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "resolveto")), new Lazy<IParser<VerilogToken>>(() => discipline_identifier_or_exclude.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("connect_resolution"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> connect_resolution_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("connect_resolution_many#0", (args) => CreateSyntaxNode(nameof(connect_resolution_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value)).Named("connect_resolution_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> discipline_identifier_or_exclude =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("discipline_identifier_or_exclude#0", (args) => CreateSyntaxNode(nameof(discipline_identifier_or_exclude), args), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("discipline_identifier_or_exclude#1", (args) => CreateSyntaxNode(nameof(discipline_identifier_or_exclude), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "exclude")))).Named("discipline_identifier_or_exclude"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> paramset_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("paramset_declaration#0", (args) => CreateSyntaxNode(nameof(paramset_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "paramset")), new Lazy<IParser<VerilogToken>>(() => paramset_identifier.Value), new Lazy<IParser<VerilogToken>>(() => module_or_paramset_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)), new Lazy<IParser<VerilogToken>>(() => paramset_item_declaration.Value), new Lazy<IParser<VerilogToken>>(() => paramset_item_declaration.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => paramset_statement.Value), new Lazy<IParser<VerilogToken>>(() => paramset_statement.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "endparamset"))).Named("paramset_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> paramset_item_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("paramset_item_declaration#0", (args) => CreateSyntaxNode(nameof(paramset_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => parameter_declaration.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("paramset_item_declaration#1", (args) => CreateSyntaxNode(nameof(paramset_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => local_parameter_declaration.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("paramset_item_declaration#2", (args) => CreateSyntaxNode(nameof(paramset_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => aliasparam_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("paramset_item_declaration#3", (args) => CreateSyntaxNode(nameof(paramset_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => integer_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("paramset_item_declaration#4", (args) => CreateSyntaxNode(nameof(paramset_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => real_declaration.Value)))))).Named("paramset_item_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> paramset_statement =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("paramset_statement#0", (args) => CreateSyntaxNode(nameof(paramset_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.DOT)), new Lazy<IParser<VerilogToken>>(() => module_parameter_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => paramset_constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("paramset_statement"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> paramset_constant_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("paramset_constant_expression#0", (args) => CreateSyntaxNode(nameof(paramset_constant_expression), args), new Lazy<IParser<VerilogToken>>(() => constant_primary.Value), new Lazy<IParser<VerilogToken>>(() => paramset_constant_expression_prim.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("paramset_constant_expression#1", (args) => CreateSyntaxNode(nameof(paramset_constant_expression), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_parameter_identifier.Value), new Lazy<IParser<VerilogToken>>(() => paramset_constant_expression_prim.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("paramset_constant_expression#2", (args) => CreateSyntaxNode(nameof(paramset_constant_expression), args), new Lazy<IParser<VerilogToken>>(() => unary_operator.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => constant_primary.Value), new Lazy<IParser<VerilogToken>>(() => paramset_constant_expression_prim.Value)))).Named("paramset_constant_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> local_parameter_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("local_parameter_declaration#0", (args) => CreateSyntaxNode(nameof(local_parameter_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "localparam")), new Lazy<IParser<VerilogToken>>(() => local_parameter_declaration_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => range.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_param_assignments.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("local_parameter_declaration#1", (args) => CreateSyntaxNode(nameof(local_parameter_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "localparam")), new Lazy<IParser<VerilogToken>>(() => parameter_type.Value), new Lazy<IParser<VerilogToken>>(() => list_of_param_assignments.Value))).Named("local_parameter_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> local_parameter_declaration_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("local_parameter_declaration_optional#0", (args) => CreateSyntaxNode(nameof(local_parameter_declaration_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "signed"))).Named("local_parameter_declaration_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> parameter_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("parameter_declaration#0", (args) => CreateSyntaxNode(nameof(parameter_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "parameter")), new Lazy<IParser<VerilogToken>>(() => parameter_declaration_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => range.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_param_assignments.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("parameter_declaration#1", (args) => CreateSyntaxNode(nameof(parameter_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "parameter")), new Lazy<IParser<VerilogToken>>(() => parameter_type.Value), new Lazy<IParser<VerilogToken>>(() => list_of_param_assignments.Value))).Named("parameter_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> parameter_declaration_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("parameter_declaration_optional#0", (args) => CreateSyntaxNode(nameof(parameter_declaration_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "signed"))).Named("parameter_declaration_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> specparam_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("specparam_declaration#0", (args) => CreateSyntaxNode(nameof(specparam_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "specparam")), new Lazy<IParser<VerilogToken>>(() => range.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_specparam_assignments.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("specparam_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> parameter_type =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("parameter_type#0", (args) => CreateSyntaxNode(nameof(parameter_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "integer")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("parameter_type#1", (args) => CreateSyntaxNode(nameof(parameter_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "realtime")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("parameter_type#2", (args) => CreateSyntaxNode(nameof(parameter_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "real")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("parameter_type#3", (args) => CreateSyntaxNode(nameof(parameter_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "time")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("parameter_type#4", (args) => CreateSyntaxNode(nameof(parameter_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "string"))))))).Named("parameter_type"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> aliasparam_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("aliasparam_declaration#0", (args) => CreateSyntaxNode(nameof(aliasparam_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "aliasparam")), new Lazy<IParser<VerilogToken>>(() => parameter_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => parameter_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("aliasparam_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> inout_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("inout_declaration#0", (args) => CreateSyntaxNode(nameof(inout_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "inout")), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => inout_declaration_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => inout_declaration_optional_2.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => range.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_port_identifiers.Value)).Named("inout_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> inout_declaration_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("inout_declaration_optional#0", (args) => CreateSyntaxNode(nameof(inout_declaration_optional), args), new Lazy<IParser<VerilogToken>>(() => net_type.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("inout_declaration_optional#1", (args) => CreateSyntaxNode(nameof(inout_declaration_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "wreal")))).Named("inout_declaration_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> inout_declaration_optional_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("inout_declaration_optional_2#0", (args) => CreateSyntaxNode(nameof(inout_declaration_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "signed"))).Named("inout_declaration_optional_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> input_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("input_declaration#0", (args) => CreateSyntaxNode(nameof(input_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "input")), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => input_declaration_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => input_declaration_optional_2.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => range.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_port_identifiers.Value)).Named("input_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> input_declaration_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("input_declaration_optional#0", (args) => CreateSyntaxNode(nameof(input_declaration_optional), args), new Lazy<IParser<VerilogToken>>(() => net_type.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("input_declaration_optional#1", (args) => CreateSyntaxNode(nameof(input_declaration_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "wreal")))).Named("input_declaration_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> input_declaration_optional_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("input_declaration_optional_2#0", (args) => CreateSyntaxNode(nameof(input_declaration_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "signed"))).Named("input_declaration_optional_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> output_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("output_declaration#0", (args) => CreateSyntaxNode(nameof(output_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "output")), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => output_declaration_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => output_declaration_optional_2.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => range.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_port_identifiers.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("output_declaration#1", (args) => CreateSyntaxNode(nameof(output_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "output")), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "reg")), new Lazy<IParser<VerilogToken>>(() => output_declaration_optional_3.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => range.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_variable_port_identifiers.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("output_declaration#2", (args) => CreateSyntaxNode(nameof(output_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "output")), new Lazy<IParser<VerilogToken>>(() => output_variable_type.Value), new Lazy<IParser<VerilogToken>>(() => list_of_variable_port_identifiers.Value)))).Named("output_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> output_declaration_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("output_declaration_optional#0", (args) => CreateSyntaxNode(nameof(output_declaration_optional), args), new Lazy<IParser<VerilogToken>>(() => net_type.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("output_declaration_optional#1", (args) => CreateSyntaxNode(nameof(output_declaration_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "wreal")))).Named("output_declaration_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> output_declaration_optional_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("output_declaration_optional_2#0", (args) => CreateSyntaxNode(nameof(output_declaration_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "signed"))).Named("output_declaration_optional_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> output_declaration_optional_3 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("output_declaration_optional_3#0", (args) => CreateSyntaxNode(nameof(output_declaration_optional_3), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "signed"))).Named("output_declaration_optional_3"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> branch_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("branch_declaration#0", (args) => CreateSyntaxNode(nameof(branch_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "branch")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => branch_terminal.Value), new Lazy<IParser<VerilogToken>>(() => branch_declaration_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => list_of_branch_identifiers.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("branch_declaration#1", (args) => CreateSyntaxNode(nameof(branch_declaration), args), new Lazy<IParser<VerilogToken>>(() => port_branch_declaration.Value))).Named("branch_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> branch_declaration_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("branch_declaration_optional#0", (args) => CreateSyntaxNode(nameof(branch_declaration_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => branch_terminal.Value)).Named("branch_declaration_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> port_branch_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("port_branch_declaration#0", (args) => CreateSyntaxNode(nameof(port_branch_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "branch")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('<')), new Lazy<IParser<VerilogToken>>(() => port_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('>')), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => list_of_branch_identifiers.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("port_branch_declaration#1", (args) => CreateSyntaxNode(nameof(port_branch_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "branch")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('<')), new Lazy<IParser<VerilogToken>>(() => hierarchical_port_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('>')), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => list_of_branch_identifiers.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))).Named("port_branch_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> branch_terminal =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("branch_terminal#0", (args) => CreateSyntaxNode(nameof(branch_terminal), args), new Lazy<IParser<VerilogToken>>(() => net_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("branch_terminal#1", (args) => CreateSyntaxNode(nameof(branch_terminal), args), new Lazy<IParser<VerilogToken>>(() => net_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => constant_range_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("branch_terminal#2", (args) => CreateSyntaxNode(nameof(branch_terminal), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_net_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("branch_terminal#3", (args) => CreateSyntaxNode(nameof(branch_terminal), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_net_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => constant_range_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("branch_terminal#4", (args) => CreateSyntaxNode(nameof(branch_terminal), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_net_identifier.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("branch_terminal#5", (args) => CreateSyntaxNode(nameof(branch_terminal), args), new Lazy<IParser<VerilogToken>>(() => net_identifier.Value))))))).Named("branch_terminal"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> event_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("event_declaration#0", (args) => CreateSyntaxNode(nameof(event_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "event")), new Lazy<IParser<VerilogToken>>(() => list_of_event_identifiers.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("event_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> integer_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("integer_declaration#0", (args) => CreateSyntaxNode(nameof(integer_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "integer")), new Lazy<IParser<VerilogToken>>(() => list_of_variable_identifiers.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("integer_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> net_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("net_declaration#0", (args) => CreateSyntaxNode(nameof(net_declaration), args), new Lazy<IParser<VerilogToken>>(() => net_type.Value), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => net_declaration_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => delay3.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_net_identifiers.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("net_declaration#1", (args) => CreateSyntaxNode(nameof(net_declaration), args), new Lazy<IParser<VerilogToken>>(() => net_type.Value), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => drive_strength.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => net_declaration_optional_2.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => delay3.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_net_decl_assignments.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("net_declaration#2", (args) => CreateSyntaxNode(nameof(net_declaration), args), new Lazy<IParser<VerilogToken>>(() => net_type.Value), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => net_declaration_optional_3.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => net_declaration_optional_4.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => range.Value), new Lazy<IParser<VerilogToken>>(() => delay3.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_net_identifiers.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("net_declaration#3", (args) => CreateSyntaxNode(nameof(net_declaration), args), new Lazy<IParser<VerilogToken>>(() => net_type.Value), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => drive_strength.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => net_declaration_optional_5.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => net_declaration_optional_6.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => range.Value), new Lazy<IParser<VerilogToken>>(() => delay3.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_net_decl_assignments.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("net_declaration#4", (args) => CreateSyntaxNode(nameof(net_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "trireg")), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => charge_strength.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => net_declaration_optional_7.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => delay3.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_net_identifiers.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("net_declaration#5", (args) => CreateSyntaxNode(nameof(net_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "trireg")), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => drive_strength.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => net_declaration_optional_8.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => delay3.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_net_decl_assignments.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("net_declaration#6", (args) => CreateSyntaxNode(nameof(net_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "trireg")), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => charge_strength.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => net_declaration_optional_9.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => net_declaration_optional_10.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => range.Value), new Lazy<IParser<VerilogToken>>(() => delay3.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_net_identifiers.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("net_declaration#7", (args) => CreateSyntaxNode(nameof(net_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "trireg")), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => drive_strength.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => net_declaration_optional_11.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => net_declaration_optional_12.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => range.Value), new Lazy<IParser<VerilogToken>>(() => delay3.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_net_decl_assignments.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("net_declaration#8", (args) => CreateSyntaxNode(nameof(net_declaration), args), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value), new Lazy<IParser<VerilogToken>>(() => range.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_net_identifiers.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("net_declaration#9", (args) => CreateSyntaxNode(nameof(net_declaration), args), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value), new Lazy<IParser<VerilogToken>>(() => range.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_net_decl_assignments.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("net_declaration#10", (args) => CreateSyntaxNode(nameof(net_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "wreal")), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => range.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_net_identifiers.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("net_declaration#11", (args) => CreateSyntaxNode(nameof(net_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "wreal")), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => range.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_net_decl_assignments.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("net_declaration#12", (args) => CreateSyntaxNode(nameof(net_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "ground")), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => range.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_net_identifiers.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))))))))))))))).Named("net_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> net_declaration_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("net_declaration_optional#0", (args) => CreateSyntaxNode(nameof(net_declaration_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "signed"))).Named("net_declaration_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> net_declaration_optional_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("net_declaration_optional_2#0", (args) => CreateSyntaxNode(nameof(net_declaration_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "signed"))).Named("net_declaration_optional_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> net_declaration_optional_3 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("net_declaration_optional_3#0", (args) => CreateSyntaxNode(nameof(net_declaration_optional_3), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "vectored")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("net_declaration_optional_3#1", (args) => CreateSyntaxNode(nameof(net_declaration_optional_3), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "scalared")))).Named("net_declaration_optional_3"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> net_declaration_optional_4 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("net_declaration_optional_4#0", (args) => CreateSyntaxNode(nameof(net_declaration_optional_4), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "signed"))).Named("net_declaration_optional_4"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> net_declaration_optional_5 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("net_declaration_optional_5#0", (args) => CreateSyntaxNode(nameof(net_declaration_optional_5), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "vectored")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("net_declaration_optional_5#1", (args) => CreateSyntaxNode(nameof(net_declaration_optional_5), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "scalared")))).Named("net_declaration_optional_5"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> net_declaration_optional_6 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("net_declaration_optional_6#0", (args) => CreateSyntaxNode(nameof(net_declaration_optional_6), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "signed"))).Named("net_declaration_optional_6"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> net_declaration_optional_7 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("net_declaration_optional_7#0", (args) => CreateSyntaxNode(nameof(net_declaration_optional_7), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "signed"))).Named("net_declaration_optional_7"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> net_declaration_optional_8 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("net_declaration_optional_8#0", (args) => CreateSyntaxNode(nameof(net_declaration_optional_8), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "signed"))).Named("net_declaration_optional_8"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> net_declaration_optional_9 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("net_declaration_optional_9#0", (args) => CreateSyntaxNode(nameof(net_declaration_optional_9), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "vectored")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("net_declaration_optional_9#1", (args) => CreateSyntaxNode(nameof(net_declaration_optional_9), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "scalared")))).Named("net_declaration_optional_9"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> net_declaration_optional_10 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("net_declaration_optional_10#0", (args) => CreateSyntaxNode(nameof(net_declaration_optional_10), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "signed"))).Named("net_declaration_optional_10"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> net_declaration_optional_11 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("net_declaration_optional_11#0", (args) => CreateSyntaxNode(nameof(net_declaration_optional_11), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "vectored")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("net_declaration_optional_11#1", (args) => CreateSyntaxNode(nameof(net_declaration_optional_11), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "scalared")))).Named("net_declaration_optional_11"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> net_declaration_optional_12 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("net_declaration_optional_12#0", (args) => CreateSyntaxNode(nameof(net_declaration_optional_12), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "signed"))).Named("net_declaration_optional_12"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> real_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("real_declaration#0", (args) => CreateSyntaxNode(nameof(real_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "real")), new Lazy<IParser<VerilogToken>>(() => list_of_real_identifiers.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("real_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> realtime_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("realtime_declaration#0", (args) => CreateSyntaxNode(nameof(realtime_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "realtime")), new Lazy<IParser<VerilogToken>>(() => list_of_real_identifiers.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("realtime_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> reg_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("reg_declaration#0", (args) => CreateSyntaxNode(nameof(reg_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "reg")), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => reg_declaration_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => range.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_variable_identifiers.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("reg_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> reg_declaration_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("reg_declaration_optional#0", (args) => CreateSyntaxNode(nameof(reg_declaration_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "signed"))).Named("reg_declaration_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> time_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("time_declaration#0", (args) => CreateSyntaxNode(nameof(time_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "time")), new Lazy<IParser<VerilogToken>>(() => list_of_variable_identifiers.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("time_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> net_type =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("net_type#0", (args) => CreateSyntaxNode(nameof(net_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "supply0")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("net_type#1", (args) => CreateSyntaxNode(nameof(net_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "supply1")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("net_type#2", (args) => CreateSyntaxNode(nameof(net_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "triand")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("net_type#3", (args) => CreateSyntaxNode(nameof(net_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "trior")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("net_type#4", (args) => CreateSyntaxNode(nameof(net_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "tri0")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("net_type#5", (args) => CreateSyntaxNode(nameof(net_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "tri1")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("net_type#6", (args) => CreateSyntaxNode(nameof(net_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "tri")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("net_type#7", (args) => CreateSyntaxNode(nameof(net_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "uwire")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("net_type#8", (args) => CreateSyntaxNode(nameof(net_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "wire")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("net_type#9", (args) => CreateSyntaxNode(nameof(net_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "wand")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("net_type#10", (args) => CreateSyntaxNode(nameof(net_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "wor"))))))))))))).Named("net_type"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> output_variable_type =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("output_variable_type#0", (args) => CreateSyntaxNode(nameof(output_variable_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "integer")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("output_variable_type#1", (args) => CreateSyntaxNode(nameof(output_variable_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "time")))).Named("output_variable_type"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> real_type =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("real_type#0", (args) => CreateSyntaxNode(nameof(real_type), args), new Lazy<IParser<VerilogToken>>(() => real_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("real_type#1", (args) => CreateSyntaxNode(nameof(real_type), args), new Lazy<IParser<VerilogToken>>(() => real_identifier.Value), new Lazy<IParser<VerilogToken>>(() => dimension.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => real_type_optional.Value.Optional(greedy: false)))).Named("real_type"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> real_type_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("real_type_optional#0", (args) => CreateSyntaxNode(nameof(real_type_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => constant_arrayinit.Value)).Named("real_type_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> variable_type =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("variable_type#0", (args) => CreateSyntaxNode(nameof(variable_type), args), new Lazy<IParser<VerilogToken>>(() => variable_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("variable_type#1", (args) => CreateSyntaxNode(nameof(variable_type), args), new Lazy<IParser<VerilogToken>>(() => variable_identifier.Value), new Lazy<IParser<VerilogToken>>(() => dimension.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => variable_type_optional.Value.Optional(greedy: false)))).Named("variable_type"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> variable_type_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("variable_type_optional#0", (args) => CreateSyntaxNode(nameof(variable_type_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => constant_arrayinit.Value)).Named("variable_type_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> drive_strength =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("drive_strength#0", (args) => CreateSyntaxNode(nameof(drive_strength), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => strength0.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => strength1.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("drive_strength#1", (args) => CreateSyntaxNode(nameof(drive_strength), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => strength1.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => strength0.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("drive_strength#2", (args) => CreateSyntaxNode(nameof(drive_strength), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => strength0.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "highz1")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("drive_strength#3", (args) => CreateSyntaxNode(nameof(drive_strength), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => strength1.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "highz0")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("drive_strength#4", (args) => CreateSyntaxNode(nameof(drive_strength), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "highz0")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => strength1.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("drive_strength#5", (args) => CreateSyntaxNode(nameof(drive_strength), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "highz1")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => strength0.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))))))).Named("drive_strength"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> strength0 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("strength0#0", (args) => CreateSyntaxNode(nameof(strength0), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "supply0")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("strength0#1", (args) => CreateSyntaxNode(nameof(strength0), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "strong0")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("strength0#2", (args) => CreateSyntaxNode(nameof(strength0), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "pull0")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("strength0#3", (args) => CreateSyntaxNode(nameof(strength0), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "weak0")))))).Named("strength0"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> strength1 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("strength1#0", (args) => CreateSyntaxNode(nameof(strength1), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "supply1")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("strength1#1", (args) => CreateSyntaxNode(nameof(strength1), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "strong1")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("strength1#2", (args) => CreateSyntaxNode(nameof(strength1), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "pull1")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("strength1#3", (args) => CreateSyntaxNode(nameof(strength1), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "weak1")))))).Named("strength1"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> charge_strength =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("charge_strength#0", (args) => CreateSyntaxNode(nameof(charge_strength), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "small")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("charge_strength#1", (args) => CreateSyntaxNode(nameof(charge_strength), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "medium")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("charge_strength#2", (args) => CreateSyntaxNode(nameof(charge_strength), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "large")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))))).Named("charge_strength"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> delay3 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("delay3#0", (args) => CreateSyntaxNode(nameof(delay3), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.HASH)), new Lazy<IParser<VerilogToken>>(() => delay_value.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("delay3#1", (args) => CreateSyntaxNode(nameof(delay3), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.HASH)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => mintypmax_expression.Value), new Lazy<IParser<VerilogToken>>(() => delay3_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))).Named("delay3"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> delay3_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("delay3_optional#0", (args) => CreateSyntaxNode(nameof(delay3_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => mintypmax_expression.Value), new Lazy<IParser<VerilogToken>>(() => delay3_optional_2.Value.Optional(greedy: false))).Named("delay3_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> delay3_optional_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("delay3_optional_2#0", (args) => CreateSyntaxNode(nameof(delay3_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => mintypmax_expression.Value)).Named("delay3_optional_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> delay2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("delay2#0", (args) => CreateSyntaxNode(nameof(delay2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.HASH)), new Lazy<IParser<VerilogToken>>(() => delay_value.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("delay2#1", (args) => CreateSyntaxNode(nameof(delay2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.HASH)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => mintypmax_expression.Value), new Lazy<IParser<VerilogToken>>(() => delay2_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))).Named("delay2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> delay2_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("delay2_optional#0", (args) => CreateSyntaxNode(nameof(delay2_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => mintypmax_expression.Value)).Named("delay2_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> delay_value =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("delay_value#0", (args) => CreateSyntaxNode(nameof(delay_value), args), new Lazy<IParser<VerilogToken>>(() => unsigned_number.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("delay_value#1", (args) => CreateSyntaxNode(nameof(delay_value), args), new Lazy<IParser<VerilogToken>>(() => real_number.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("delay_value#2", (args) => CreateSyntaxNode(nameof(delay_value), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)))).Named("delay_value"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_branch_identifiers =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_branch_identifiers#0", (args) => CreateSyntaxNode(nameof(list_of_branch_identifiers), args), new Lazy<IParser<VerilogToken>>(() => branch_identifier.Value), new Lazy<IParser<VerilogToken>>(() => range.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_branch_identifiers_many.Value.Many(greedy: true))).Named("list_of_branch_identifiers"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_branch_identifiers_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_branch_identifiers_many#0", (args) => CreateSyntaxNode(nameof(list_of_branch_identifiers_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => branch_identifier.Value), new Lazy<IParser<VerilogToken>>(() => range.Value.Optional(greedy: false))).Named("list_of_branch_identifiers_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_defparam_assignments =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_defparam_assignments#0", (args) => CreateSyntaxNode(nameof(list_of_defparam_assignments), args), new Lazy<IParser<VerilogToken>>(() => defparam_assignment.Value), new Lazy<IParser<VerilogToken>>(() => list_of_defparam_assignments_many.Value.Many(greedy: true))).Named("list_of_defparam_assignments"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_defparam_assignments_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_defparam_assignments_many#0", (args) => CreateSyntaxNode(nameof(list_of_defparam_assignments_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => defparam_assignment.Value)).Named("list_of_defparam_assignments_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_event_identifiers =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_event_identifiers#0", (args) => CreateSyntaxNode(nameof(list_of_event_identifiers), args), new Lazy<IParser<VerilogToken>>(() => event_identifier.Value), new Lazy<IParser<VerilogToken>>(() => dimension.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => list_of_event_identifiers_many.Value.Many(greedy: true))).Named("list_of_event_identifiers"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_event_identifiers_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_event_identifiers_many#0", (args) => CreateSyntaxNode(nameof(list_of_event_identifiers_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => event_identifier.Value), new Lazy<IParser<VerilogToken>>(() => dimension.Value.Many(greedy: true))).Named("list_of_event_identifiers_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_net_decl_assignments =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_net_decl_assignments#0", (args) => CreateSyntaxNode(nameof(list_of_net_decl_assignments), args), new Lazy<IParser<VerilogToken>>(() => net_decl_assignment.Value), new Lazy<IParser<VerilogToken>>(() => list_of_net_decl_assignments_many.Value.Many(greedy: true))).Named("list_of_net_decl_assignments"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_net_decl_assignments_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_net_decl_assignments_many#0", (args) => CreateSyntaxNode(nameof(list_of_net_decl_assignments_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => net_decl_assignment.Value)).Named("list_of_net_decl_assignments_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_net_identifiers =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_net_identifiers#0", (args) => CreateSyntaxNode(nameof(list_of_net_identifiers), args), new Lazy<IParser<VerilogToken>>(() => ams_net_identifier.Value), new Lazy<IParser<VerilogToken>>(() => list_of_net_identifiers_many.Value.Many(greedy: true))).Named("list_of_net_identifiers"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_net_identifiers_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_net_identifiers_many#0", (args) => CreateSyntaxNode(nameof(list_of_net_identifiers_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => ams_net_identifier.Value)).Named("list_of_net_identifiers_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_param_assignments =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_param_assignments#0", (args) => CreateSyntaxNode(nameof(list_of_param_assignments), args), new Lazy<IParser<VerilogToken>>(() => param_assignment.Value), new Lazy<IParser<VerilogToken>>(() => list_of_param_assignments_many.Value.Many(greedy: true))).Named("list_of_param_assignments"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_param_assignments_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_param_assignments_many#0", (args) => CreateSyntaxNode(nameof(list_of_param_assignments_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => param_assignment.Value)).Named("list_of_param_assignments_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_port_identifiers =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_port_identifiers#0", (args) => CreateSyntaxNode(nameof(list_of_port_identifiers), args), new Lazy<IParser<VerilogToken>>(() => port_identifier.Value), new Lazy<IParser<VerilogToken>>(() => list_of_port_identifiers_many.Value.Many(greedy: true))).Named("list_of_port_identifiers"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_port_identifiers_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_port_identifiers_many#0", (args) => CreateSyntaxNode(nameof(list_of_port_identifiers_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => port_identifier.Value)).Named("list_of_port_identifiers_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_real_identifiers =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_real_identifiers#0", (args) => CreateSyntaxNode(nameof(list_of_real_identifiers), args), new Lazy<IParser<VerilogToken>>(() => real_type.Value), new Lazy<IParser<VerilogToken>>(() => list_of_real_identifiers_many.Value.Many(greedy: true))).Named("list_of_real_identifiers"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_real_identifiers_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_real_identifiers_many#0", (args) => CreateSyntaxNode(nameof(list_of_real_identifiers_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => real_type.Value)).Named("list_of_real_identifiers_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_specparam_assignments =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_specparam_assignments#0", (args) => CreateSyntaxNode(nameof(list_of_specparam_assignments), args), new Lazy<IParser<VerilogToken>>(() => specparam_assignment.Value), new Lazy<IParser<VerilogToken>>(() => list_of_specparam_assignments_many.Value.Many(greedy: true))).Named("list_of_specparam_assignments"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_specparam_assignments_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_specparam_assignments_many#0", (args) => CreateSyntaxNode(nameof(list_of_specparam_assignments_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => specparam_assignment.Value)).Named("list_of_specparam_assignments_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_variable_identifiers =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_variable_identifiers#0", (args) => CreateSyntaxNode(nameof(list_of_variable_identifiers), args), new Lazy<IParser<VerilogToken>>(() => variable_type.Value), new Lazy<IParser<VerilogToken>>(() => list_of_variable_identifiers_many.Value.Many(greedy: true))).Named("list_of_variable_identifiers"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_variable_identifiers_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_variable_identifiers_many#0", (args) => CreateSyntaxNode(nameof(list_of_variable_identifiers_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => variable_type.Value)).Named("list_of_variable_identifiers_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_variable_port_identifiers =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_variable_port_identifiers#0", (args) => CreateSyntaxNode(nameof(list_of_variable_port_identifiers), args), new Lazy<IParser<VerilogToken>>(() => port_identifier.Value), new Lazy<IParser<VerilogToken>>(() => list_of_variable_port_identifiers_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_variable_port_identifiers_many.Value.Many(greedy: true))).Named("list_of_variable_port_identifiers"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_variable_port_identifiers_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_variable_port_identifiers_many#0", (args) => CreateSyntaxNode(nameof(list_of_variable_port_identifiers_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => port_identifier.Value), new Lazy<IParser<VerilogToken>>(() => list_of_variable_port_identifiers_optional_2.Value.Optional(greedy: false))).Named("list_of_variable_port_identifiers_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_variable_port_identifiers_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_variable_port_identifiers_optional#0", (args) => CreateSyntaxNode(nameof(list_of_variable_port_identifiers_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value)).Named("list_of_variable_port_identifiers_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_variable_port_identifiers_optional_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_variable_port_identifiers_optional_2#0", (args) => CreateSyntaxNode(nameof(list_of_variable_port_identifiers_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value)).Named("list_of_variable_port_identifiers_optional_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> defparam_assignment =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("defparam_assignment#0", (args) => CreateSyntaxNode(nameof(defparam_assignment), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_parameter_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => constant_mintypmax_expression.Value)).Named("defparam_assignment"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> net_decl_assignment =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("net_decl_assignment#0", (args) => CreateSyntaxNode(nameof(net_decl_assignment), args), new Lazy<IParser<VerilogToken>>(() => ams_net_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => expression.Value)).Named("net_decl_assignment"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> param_assignment =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("param_assignment#0", (args) => CreateSyntaxNode(nameof(param_assignment), args), new Lazy<IParser<VerilogToken>>(() => parameter_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => constant_mintypmax_expression.Value), new Lazy<IParser<VerilogToken>>(() => value_range.Value.Many(greedy: true)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("param_assignment#1", (args) => CreateSyntaxNode(nameof(param_assignment), args), new Lazy<IParser<VerilogToken>>(() => parameter_identifier.Value), new Lazy<IParser<VerilogToken>>(() => range.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => constant_arrayinit.Value), new Lazy<IParser<VerilogToken>>(() => value_range.Value.Many(greedy: true)))).Named("param_assignment"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> specparam_assignment =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("specparam_assignment#0", (args) => CreateSyntaxNode(nameof(specparam_assignment), args), new Lazy<IParser<VerilogToken>>(() => specparam_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => constant_mintypmax_expression.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("specparam_assignment#1", (args) => CreateSyntaxNode(nameof(specparam_assignment), args), new Lazy<IParser<VerilogToken>>(() => pulse_control_specparam.Value))).Named("specparam_assignment"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> pulse_control_specparam =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("pulse_control_specparam#0", (args) => CreateSyntaxNode(nameof(pulse_control_specparam), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "PATHPULSE$")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => reject_limit_value.Value), new Lazy<IParser<VerilogToken>>(() => pulse_control_specparam_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("pulse_control_specparam#1", (args) => CreateSyntaxNode(nameof(pulse_control_specparam), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "PATHPULSE$")), new Lazy<IParser<VerilogToken>>(() => specify_input_terminal_descriptor.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "$specify_output_terminal_descriptor")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => reject_limit_value.Value), new Lazy<IParser<VerilogToken>>(() => pulse_control_specparam_optional_2.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))).Named("pulse_control_specparam"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> pulse_control_specparam_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("pulse_control_specparam_optional#0", (args) => CreateSyntaxNode(nameof(pulse_control_specparam_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => error_limit_value.Value)).Named("pulse_control_specparam_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> pulse_control_specparam_optional_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("pulse_control_specparam_optional_2#0", (args) => CreateSyntaxNode(nameof(pulse_control_specparam_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => error_limit_value.Value)).Named("pulse_control_specparam_optional_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> error_limit_value =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("error_limit_value#0", (args) => CreateSyntaxNode(nameof(error_limit_value), args), new Lazy<IParser<VerilogToken>>(() => limit_value.Value)).Named("error_limit_value"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> reject_limit_value =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("reject_limit_value#0", (args) => CreateSyntaxNode(nameof(reject_limit_value), args), new Lazy<IParser<VerilogToken>>(() => limit_value.Value)).Named("reject_limit_value"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> limit_value =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("limit_value#0", (args) => CreateSyntaxNode(nameof(limit_value), args), new Lazy<IParser<VerilogToken>>(() => constant_mintypmax_expression.Value)).Named("limit_value"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> dimension =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("dimension#0", (args) => CreateSyntaxNode(nameof(dimension), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => dimension_constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => dimension_constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE))).Named("dimension"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> range =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("range#0", (args) => CreateSyntaxNode(nameof(range), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => msb_constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => lsb_constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE))).Named("range"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> value_range =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("value_range#0", (args) => CreateSyntaxNode(nameof(value_range), args), new Lazy<IParser<VerilogToken>>(() => value_range_type.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => value_range_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => value_range_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("value_range#1", (args) => CreateSyntaxNode(nameof(value_range), args), new Lazy<IParser<VerilogToken>>(() => value_range_type.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => value_range_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => value_range_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("value_range#2", (args) => CreateSyntaxNode(nameof(value_range), args), new Lazy<IParser<VerilogToken>>(() => value_range_type.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => value_range_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => value_range_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("value_range#3", (args) => CreateSyntaxNode(nameof(value_range), args), new Lazy<IParser<VerilogToken>>(() => value_range_type.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => value_range_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => value_range_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("value_range#4", (args) => CreateSyntaxNode(nameof(value_range), args), new Lazy<IParser<VerilogToken>>(() => value_range_type.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "'{")), new Lazy<IParser<VerilogToken>>(() => @string.Value), new Lazy<IParser<VerilogToken>>(() => value_range_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SHARP2)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("value_range#5", (args) => CreateSyntaxNode(nameof(value_range), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "exclude")), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value))))))).Named("value_range"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> value_range_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("value_range_many#0", (args) => CreateSyntaxNode(nameof(value_range_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => @string.Value)).Named("value_range_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> value_range_type =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("value_range_type#0", (args) => CreateSyntaxNode(nameof(value_range_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "from")))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("value_range_type#1", (args) => CreateSyntaxNode(nameof(value_range_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "exclude")))).Named("value_range_type"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> value_range_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("value_range_expression#0", (args) => CreateSyntaxNode(nameof(value_range_expression), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.MINUS)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "inf")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("value_range_expression#1", (args) => CreateSyntaxNode(nameof(value_range_expression), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "inf")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("value_range_expression#2", (args) => CreateSyntaxNode(nameof(value_range_expression), args), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value)))).Named("value_range_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_function_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_declaration#0", (args) => CreateSyntaxNode(nameof(analog_function_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "analog")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "function")), new Lazy<IParser<VerilogToken>>(() => analog_function_type.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => analog_function_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)), new Lazy<IParser<VerilogToken>>(() => analog_function_item_declaration.Value), new Lazy<IParser<VerilogToken>>(() => analog_function_item_declaration.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_function_statement.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "endfunction"))).Named("analog_function_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_function_type =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_type#0", (args) => CreateSyntaxNode(nameof(analog_function_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "integer")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_type#1", (args) => CreateSyntaxNode(nameof(analog_function_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "real")))).Named("analog_function_type"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_function_item_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_item_declaration#0", (args) => CreateSyntaxNode(nameof(analog_function_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => analog_block_item_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_item_declaration#1", (args) => CreateSyntaxNode(nameof(analog_function_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => input_declaration.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_item_declaration#2", (args) => CreateSyntaxNode(nameof(analog_function_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => output_declaration.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_item_declaration#3", (args) => CreateSyntaxNode(nameof(analog_function_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => inout_declaration.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))))).Named("analog_function_item_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> function_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("function_declaration#0", (args) => CreateSyntaxNode(nameof(function_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "function")), new Lazy<IParser<VerilogToken>>(() => function_declaration_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => function_range_or_type.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => function_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)), new Lazy<IParser<VerilogToken>>(() => function_item_declaration.Value), new Lazy<IParser<VerilogToken>>(() => function_item_declaration.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => function_statement.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "endfunction")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("function_declaration#1", (args) => CreateSyntaxNode(nameof(function_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "function")), new Lazy<IParser<VerilogToken>>(() => function_declaration_optional_2.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => function_range_or_type.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => function_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => function_port_list.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)), new Lazy<IParser<VerilogToken>>(() => block_item_declaration.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => function_statement.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "endfunction")))).Named("function_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> function_declaration_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("function_declaration_optional#0", (args) => CreateSyntaxNode(nameof(function_declaration_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "automatic"))).Named("function_declaration_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> function_declaration_optional_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("function_declaration_optional_2#0", (args) => CreateSyntaxNode(nameof(function_declaration_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "automatic"))).Named("function_declaration_optional_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> function_item_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("function_item_declaration#0", (args) => CreateSyntaxNode(nameof(function_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => block_item_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("function_item_declaration#1", (args) => CreateSyntaxNode(nameof(function_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => tf_input_declaration.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))).Named("function_item_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> function_port_list =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("function_port_list#0", (args) => CreateSyntaxNode(nameof(function_port_list), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => tf_input_declaration.Value), new Lazy<IParser<VerilogToken>>(() => function_port_list_many.Value.Many(greedy: true))).Named("function_port_list"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> function_port_list_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("function_port_list_many#0", (args) => CreateSyntaxNode(nameof(function_port_list_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => tf_input_declaration.Value)).Named("function_port_list_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> function_range_or_type =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("function_range_or_type#0", (args) => CreateSyntaxNode(nameof(function_range_or_type), args), new Lazy<IParser<VerilogToken>>(() => function_range_or_type_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => range.Value.Optional(greedy: false)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("function_range_or_type#1", (args) => CreateSyntaxNode(nameof(function_range_or_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "integer")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("function_range_or_type#2", (args) => CreateSyntaxNode(nameof(function_range_or_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "real")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("function_range_or_type#3", (args) => CreateSyntaxNode(nameof(function_range_or_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "realtime")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("function_range_or_type#4", (args) => CreateSyntaxNode(nameof(function_range_or_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "time"))))))).Named("function_range_or_type"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> function_range_or_type_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("function_range_or_type_optional#0", (args) => CreateSyntaxNode(nameof(function_range_or_type_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "signed"))).Named("function_range_or_type_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> task_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("task_declaration#0", (args) => CreateSyntaxNode(nameof(task_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "task")), new Lazy<IParser<VerilogToken>>(() => task_declaration_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => task_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)), new Lazy<IParser<VerilogToken>>(() => task_item_declaration.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => statement_or_null.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "endtask")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("task_declaration#1", (args) => CreateSyntaxNode(nameof(task_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "task")), new Lazy<IParser<VerilogToken>>(() => task_declaration_optional_2.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => task_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => task_port_list.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)), new Lazy<IParser<VerilogToken>>(() => block_item_declaration.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => statement_or_null.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "endtask")))).Named("task_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> task_declaration_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("task_declaration_optional#0", (args) => CreateSyntaxNode(nameof(task_declaration_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "automatic"))).Named("task_declaration_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> task_declaration_optional_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("task_declaration_optional_2#0", (args) => CreateSyntaxNode(nameof(task_declaration_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "automatic"))).Named("task_declaration_optional_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> task_item_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("task_item_declaration#0", (args) => CreateSyntaxNode(nameof(task_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => block_item_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("task_item_declaration#1", (args) => CreateSyntaxNode(nameof(task_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => tf_input_declaration.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("task_item_declaration#2", (args) => CreateSyntaxNode(nameof(task_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => tf_output_declaration.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("task_item_declaration#3", (args) => CreateSyntaxNode(nameof(task_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => tf_inout_declaration.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))))).Named("task_item_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> task_port_list =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("task_port_list#0", (args) => CreateSyntaxNode(nameof(task_port_list), args), new Lazy<IParser<VerilogToken>>(() => task_port_item.Value), new Lazy<IParser<VerilogToken>>(() => task_port_list_many.Value.Many(greedy: true))).Named("task_port_list"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> task_port_list_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("task_port_list_many#0", (args) => CreateSyntaxNode(nameof(task_port_list_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => task_port_item.Value)).Named("task_port_list_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> task_port_item =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("task_port_item#0", (args) => CreateSyntaxNode(nameof(task_port_item), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => tf_input_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("task_port_item#1", (args) => CreateSyntaxNode(nameof(task_port_item), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => tf_output_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("task_port_item#2", (args) => CreateSyntaxNode(nameof(task_port_item), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => tf_inout_declaration.Value)))).Named("task_port_item"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> tf_input_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("tf_input_declaration#0", (args) => CreateSyntaxNode(nameof(tf_input_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "input")), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => tf_input_declaration_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => tf_input_declaration_optional_2.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => range.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_port_identifiers.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("tf_input_declaration#1", (args) => CreateSyntaxNode(nameof(tf_input_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "input")), new Lazy<IParser<VerilogToken>>(() => task_port_type.Value), new Lazy<IParser<VerilogToken>>(() => list_of_port_identifiers.Value))).Named("tf_input_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> tf_input_declaration_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("tf_input_declaration_optional#0", (args) => CreateSyntaxNode(nameof(tf_input_declaration_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "reg"))).Named("tf_input_declaration_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> tf_input_declaration_optional_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("tf_input_declaration_optional_2#0", (args) => CreateSyntaxNode(nameof(tf_input_declaration_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "signed"))).Named("tf_input_declaration_optional_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> tf_output_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("tf_output_declaration#0", (args) => CreateSyntaxNode(nameof(tf_output_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "output")), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => tf_output_declaration_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => tf_output_declaration_optional_2.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => range.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_port_identifiers.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("tf_output_declaration#1", (args) => CreateSyntaxNode(nameof(tf_output_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "output")), new Lazy<IParser<VerilogToken>>(() => task_port_type.Value), new Lazy<IParser<VerilogToken>>(() => list_of_port_identifiers.Value))).Named("tf_output_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> tf_output_declaration_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("tf_output_declaration_optional#0", (args) => CreateSyntaxNode(nameof(tf_output_declaration_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "reg"))).Named("tf_output_declaration_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> tf_output_declaration_optional_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("tf_output_declaration_optional_2#0", (args) => CreateSyntaxNode(nameof(tf_output_declaration_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "signed"))).Named("tf_output_declaration_optional_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> tf_inout_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("tf_inout_declaration#0", (args) => CreateSyntaxNode(nameof(tf_inout_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "inout")), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => tf_inout_declaration_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => tf_inout_declaration_optional_2.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => range.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_port_identifiers.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("tf_inout_declaration#1", (args) => CreateSyntaxNode(nameof(tf_inout_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "inout")), new Lazy<IParser<VerilogToken>>(() => task_port_type.Value), new Lazy<IParser<VerilogToken>>(() => list_of_port_identifiers.Value))).Named("tf_inout_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> tf_inout_declaration_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("tf_inout_declaration_optional#0", (args) => CreateSyntaxNode(nameof(tf_inout_declaration_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "reg"))).Named("tf_inout_declaration_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> tf_inout_declaration_optional_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("tf_inout_declaration_optional_2#0", (args) => CreateSyntaxNode(nameof(tf_inout_declaration_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "signed"))).Named("tf_inout_declaration_optional_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> task_port_type =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("task_port_type#0", (args) => CreateSyntaxNode(nameof(task_port_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "integer")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("task_port_type#1", (args) => CreateSyntaxNode(nameof(task_port_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "realtime")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("task_port_type#2", (args) => CreateSyntaxNode(nameof(task_port_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "real")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("task_port_type#3", (args) => CreateSyntaxNode(nameof(task_port_type), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "time")))))).Named("task_port_type"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_block_item_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_block_item_declaration#0", (args) => CreateSyntaxNode(nameof(analog_block_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => parameter_declaration.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_block_item_declaration#1", (args) => CreateSyntaxNode(nameof(analog_block_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => integer_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_block_item_declaration#2", (args) => CreateSyntaxNode(nameof(analog_block_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => real_declaration.Value)))).Named("analog_block_item_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> block_item_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("block_item_declaration#0", (args) => CreateSyntaxNode(nameof(block_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "reg")), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => block_item_declaration_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => range.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_block_variable_identifiers.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("block_item_declaration#1", (args) => CreateSyntaxNode(nameof(block_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "integer")), new Lazy<IParser<VerilogToken>>(() => list_of_block_variable_identifiers.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("block_item_declaration#2", (args) => CreateSyntaxNode(nameof(block_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "time")), new Lazy<IParser<VerilogToken>>(() => list_of_block_variable_identifiers.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("block_item_declaration#3", (args) => CreateSyntaxNode(nameof(block_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "real")), new Lazy<IParser<VerilogToken>>(() => list_of_block_real_identifiers.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("block_item_declaration#4", (args) => CreateSyntaxNode(nameof(block_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "realtime")), new Lazy<IParser<VerilogToken>>(() => list_of_block_real_identifiers.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("block_item_declaration#5", (args) => CreateSyntaxNode(nameof(block_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => event_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("block_item_declaration#6", (args) => CreateSyntaxNode(nameof(block_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => local_parameter_declaration.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("block_item_declaration#7", (args) => CreateSyntaxNode(nameof(block_item_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => parameter_declaration.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))))))))).Named("block_item_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> block_item_declaration_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("block_item_declaration_optional#0", (args) => CreateSyntaxNode(nameof(block_item_declaration_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "signed"))).Named("block_item_declaration_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_block_variable_identifiers =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_block_variable_identifiers#0", (args) => CreateSyntaxNode(nameof(list_of_block_variable_identifiers), args), new Lazy<IParser<VerilogToken>>(() => block_variable_type.Value), new Lazy<IParser<VerilogToken>>(() => list_of_block_variable_identifiers_many.Value.Many(greedy: true))).Named("list_of_block_variable_identifiers"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_block_variable_identifiers_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_block_variable_identifiers_many#0", (args) => CreateSyntaxNode(nameof(list_of_block_variable_identifiers_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => block_variable_type.Value)).Named("list_of_block_variable_identifiers_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_block_real_identifiers =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_block_real_identifiers#0", (args) => CreateSyntaxNode(nameof(list_of_block_real_identifiers), args), new Lazy<IParser<VerilogToken>>(() => block_real_type.Value), new Lazy<IParser<VerilogToken>>(() => list_of_block_real_identifiers_many.Value.Many(greedy: true))).Named("list_of_block_real_identifiers"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_block_real_identifiers_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_block_real_identifiers_many#0", (args) => CreateSyntaxNode(nameof(list_of_block_real_identifiers_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => block_real_type.Value)).Named("list_of_block_real_identifiers_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> block_variable_type =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("block_variable_type#0", (args) => CreateSyntaxNode(nameof(block_variable_type), args), new Lazy<IParser<VerilogToken>>(() => variable_identifier.Value), new Lazy<IParser<VerilogToken>>(() => dimension.Value.Many(greedy: true))).Named("block_variable_type"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> block_real_type =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("block_real_type#0", (args) => CreateSyntaxNode(nameof(block_real_type), args), new Lazy<IParser<VerilogToken>>(() => real_identifier.Value), new Lazy<IParser<VerilogToken>>(() => dimension.Value.Many(greedy: true))).Named("block_real_type"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> gate_instantiation =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("gate_instantiation#0", (args) => CreateSyntaxNode(nameof(gate_instantiation), args), new Lazy<IParser<VerilogToken>>(() => cmos_switchtype.Value), new Lazy<IParser<VerilogToken>>(() => delay3.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => cmos_switch_instance.Value), new Lazy<IParser<VerilogToken>>(() => gate_instantiation_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("gate_instantiation#1", (args) => CreateSyntaxNode(nameof(gate_instantiation), args), new Lazy<IParser<VerilogToken>>(() => enable_gatetype.Value), new Lazy<IParser<VerilogToken>>(() => drive_strength.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => delay3.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => enable_gate_instance.Value), new Lazy<IParser<VerilogToken>>(() => gate_instantiation_many_2.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("gate_instantiation#2", (args) => CreateSyntaxNode(nameof(gate_instantiation), args), new Lazy<IParser<VerilogToken>>(() => mos_switchtype.Value), new Lazy<IParser<VerilogToken>>(() => delay3.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => mos_switch_instance.Value), new Lazy<IParser<VerilogToken>>(() => gate_instantiation_many_3.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("gate_instantiation#3", (args) => CreateSyntaxNode(nameof(gate_instantiation), args), new Lazy<IParser<VerilogToken>>(() => n_input_gatetype.Value), new Lazy<IParser<VerilogToken>>(() => drive_strength.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => delay2.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => n_input_gate_instance.Value), new Lazy<IParser<VerilogToken>>(() => gate_instantiation_many_4.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("gate_instantiation#4", (args) => CreateSyntaxNode(nameof(gate_instantiation), args), new Lazy<IParser<VerilogToken>>(() => n_output_gatetype.Value), new Lazy<IParser<VerilogToken>>(() => drive_strength.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => delay2.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => n_output_gate_instance.Value), new Lazy<IParser<VerilogToken>>(() => gate_instantiation_many_5.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("gate_instantiation#5", (args) => CreateSyntaxNode(nameof(gate_instantiation), args), new Lazy<IParser<VerilogToken>>(() => pass_en_switchtype.Value), new Lazy<IParser<VerilogToken>>(() => delay2.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => pass_enable_switch_instance.Value), new Lazy<IParser<VerilogToken>>(() => gate_instantiation_many_6.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("gate_instantiation#6", (args) => CreateSyntaxNode(nameof(gate_instantiation), args), new Lazy<IParser<VerilogToken>>(() => pass_switchtype.Value), new Lazy<IParser<VerilogToken>>(() => pass_switch_instance.Value), new Lazy<IParser<VerilogToken>>(() => gate_instantiation_many_7.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("gate_instantiation#7", (args) => CreateSyntaxNode(nameof(gate_instantiation), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "pulldown")), new Lazy<IParser<VerilogToken>>(() => pulldown_strength.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => pull_gate_instance.Value), new Lazy<IParser<VerilogToken>>(() => gate_instantiation_many_8.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("gate_instantiation#8", (args) => CreateSyntaxNode(nameof(gate_instantiation), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "pullup")), new Lazy<IParser<VerilogToken>>(() => pullup_strength.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => pull_gate_instance.Value), new Lazy<IParser<VerilogToken>>(() => gate_instantiation_many_9.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))))))))))).Named("gate_instantiation"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> gate_instantiation_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("gate_instantiation_many#0", (args) => CreateSyntaxNode(nameof(gate_instantiation_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => cmos_switch_instance.Value)).Named("gate_instantiation_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> gate_instantiation_many_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("gate_instantiation_many_2#0", (args) => CreateSyntaxNode(nameof(gate_instantiation_many_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => enable_gate_instance.Value)).Named("gate_instantiation_many_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> gate_instantiation_many_3 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("gate_instantiation_many_3#0", (args) => CreateSyntaxNode(nameof(gate_instantiation_many_3), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => mos_switch_instance.Value)).Named("gate_instantiation_many_3"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> gate_instantiation_many_4 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("gate_instantiation_many_4#0", (args) => CreateSyntaxNode(nameof(gate_instantiation_many_4), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => n_input_gate_instance.Value)).Named("gate_instantiation_many_4"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> gate_instantiation_many_5 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("gate_instantiation_many_5#0", (args) => CreateSyntaxNode(nameof(gate_instantiation_many_5), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => n_output_gate_instance.Value)).Named("gate_instantiation_many_5"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> gate_instantiation_many_6 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("gate_instantiation_many_6#0", (args) => CreateSyntaxNode(nameof(gate_instantiation_many_6), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => pass_enable_switch_instance.Value)).Named("gate_instantiation_many_6"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> gate_instantiation_many_7 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("gate_instantiation_many_7#0", (args) => CreateSyntaxNode(nameof(gate_instantiation_many_7), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => pass_switch_instance.Value)).Named("gate_instantiation_many_7"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> gate_instantiation_many_8 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("gate_instantiation_many_8#0", (args) => CreateSyntaxNode(nameof(gate_instantiation_many_8), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => pull_gate_instance.Value)).Named("gate_instantiation_many_8"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> gate_instantiation_many_9 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("gate_instantiation_many_9#0", (args) => CreateSyntaxNode(nameof(gate_instantiation_many_9), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => pull_gate_instance.Value)).Named("gate_instantiation_many_9"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> cmos_switch_instance =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("cmos_switch_instance#0", (args) => CreateSyntaxNode(nameof(cmos_switch_instance), args), new Lazy<IParser<VerilogToken>>(() => name_of_gate_instance.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => output_terminal.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => input_terminal.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => ncontrol_terminal.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => pcontrol_terminal.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("cmos_switch_instance"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> enable_gate_instance =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("enable_gate_instance#0", (args) => CreateSyntaxNode(nameof(enable_gate_instance), args), new Lazy<IParser<VerilogToken>>(() => name_of_gate_instance.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => output_terminal.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => input_terminal.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => enable_terminal.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("enable_gate_instance"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> mos_switch_instance =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("mos_switch_instance#0", (args) => CreateSyntaxNode(nameof(mos_switch_instance), args), new Lazy<IParser<VerilogToken>>(() => name_of_gate_instance.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => output_terminal.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => input_terminal.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => enable_terminal.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("mos_switch_instance"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> n_input_gate_instance =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("n_input_gate_instance#0", (args) => CreateSyntaxNode(nameof(n_input_gate_instance), args), new Lazy<IParser<VerilogToken>>(() => name_of_gate_instance.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => output_terminal.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => input_terminal.Value), new Lazy<IParser<VerilogToken>>(() => n_input_gate_instance_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("n_input_gate_instance"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> n_input_gate_instance_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("n_input_gate_instance_many#0", (args) => CreateSyntaxNode(nameof(n_input_gate_instance_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => input_terminal.Value)).Named("n_input_gate_instance_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> n_output_gate_instance =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("n_output_gate_instance#0", (args) => CreateSyntaxNode(nameof(n_output_gate_instance), args), new Lazy<IParser<VerilogToken>>(() => name_of_gate_instance.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => output_terminal.Value), new Lazy<IParser<VerilogToken>>(() => n_output_gate_instance_many.Value.Many(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => input_terminal.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("n_output_gate_instance"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> n_output_gate_instance_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("n_output_gate_instance_many#0", (args) => CreateSyntaxNode(nameof(n_output_gate_instance_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => output_terminal.Value)).Named("n_output_gate_instance_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> pass_switch_instance =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("pass_switch_instance#0", (args) => CreateSyntaxNode(nameof(pass_switch_instance), args), new Lazy<IParser<VerilogToken>>(() => name_of_gate_instance.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => inout_terminal.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => inout_terminal.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("pass_switch_instance"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> pass_enable_switch_instance =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("pass_enable_switch_instance#0", (args) => CreateSyntaxNode(nameof(pass_enable_switch_instance), args), new Lazy<IParser<VerilogToken>>(() => name_of_gate_instance.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => inout_terminal.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => inout_terminal.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => enable_terminal.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("pass_enable_switch_instance"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> pull_gate_instance =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("pull_gate_instance#0", (args) => CreateSyntaxNode(nameof(pull_gate_instance), args), new Lazy<IParser<VerilogToken>>(() => name_of_gate_instance.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => output_terminal.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("pull_gate_instance"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> name_of_gate_instance =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("name_of_gate_instance#0", (args) => CreateSyntaxNode(nameof(name_of_gate_instance), args), new Lazy<IParser<VerilogToken>>(() => gate_instance_identifier.Value), new Lazy<IParser<VerilogToken>>(() => range.Value.Optional(greedy: false))).Named("name_of_gate_instance"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> pulldown_strength =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("pulldown_strength#0", (args) => CreateSyntaxNode(nameof(pulldown_strength), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => strength0.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => strength1.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("pulldown_strength#1", (args) => CreateSyntaxNode(nameof(pulldown_strength), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => strength1.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => strength0.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("pulldown_strength#2", (args) => CreateSyntaxNode(nameof(pulldown_strength), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => strength0.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))))).Named("pulldown_strength"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> pullup_strength =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("pullup_strength#0", (args) => CreateSyntaxNode(nameof(pullup_strength), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => strength0.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => strength1.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("pullup_strength#1", (args) => CreateSyntaxNode(nameof(pullup_strength), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => strength1.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => strength0.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("pullup_strength#2", (args) => CreateSyntaxNode(nameof(pullup_strength), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => strength1.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))))).Named("pullup_strength"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> enable_terminal =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("enable_terminal#0", (args) => CreateSyntaxNode(nameof(enable_terminal), args), new Lazy<IParser<VerilogToken>>(() => expression.Value)).Named("enable_terminal"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> inout_terminal =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("inout_terminal#0", (args) => CreateSyntaxNode(nameof(inout_terminal), args), new Lazy<IParser<VerilogToken>>(() => net_lvalue.Value)).Named("inout_terminal"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> input_terminal =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("input_terminal#0", (args) => CreateSyntaxNode(nameof(input_terminal), args), new Lazy<IParser<VerilogToken>>(() => expression.Value)).Named("input_terminal"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> ncontrol_terminal =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("ncontrol_terminal#0", (args) => CreateSyntaxNode(nameof(ncontrol_terminal), args), new Lazy<IParser<VerilogToken>>(() => expression.Value)).Named("ncontrol_terminal"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> output_terminal =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("output_terminal#0", (args) => CreateSyntaxNode(nameof(output_terminal), args), new Lazy<IParser<VerilogToken>>(() => net_lvalue.Value)).Named("output_terminal"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> pcontrol_terminal =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("pcontrol_terminal#0", (args) => CreateSyntaxNode(nameof(pcontrol_terminal), args), new Lazy<IParser<VerilogToken>>(() => expression.Value)).Named("pcontrol_terminal"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> cmos_switchtype =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("cmos_switchtype#0", (args) => CreateSyntaxNode(nameof(cmos_switchtype), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "cmos")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("cmos_switchtype#1", (args) => CreateSyntaxNode(nameof(cmos_switchtype), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "rcmos")))).Named("cmos_switchtype"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> enable_gatetype =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("enable_gatetype#0", (args) => CreateSyntaxNode(nameof(enable_gatetype), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "bufif0")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("enable_gatetype#1", (args) => CreateSyntaxNode(nameof(enable_gatetype), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "bufif1")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("enable_gatetype#2", (args) => CreateSyntaxNode(nameof(enable_gatetype), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "notif0")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("enable_gatetype#3", (args) => CreateSyntaxNode(nameof(enable_gatetype), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "notif1")))))).Named("enable_gatetype"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> mos_switchtype =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("mos_switchtype#0", (args) => CreateSyntaxNode(nameof(mos_switchtype), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "nmos")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("mos_switchtype#1", (args) => CreateSyntaxNode(nameof(mos_switchtype), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "pmos")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("mos_switchtype#2", (args) => CreateSyntaxNode(nameof(mos_switchtype), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "rnmos")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("mos_switchtype#3", (args) => CreateSyntaxNode(nameof(mos_switchtype), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "rpmos")))))).Named("mos_switchtype"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> n_input_gatetype =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("n_input_gatetype#0", (args) => CreateSyntaxNode(nameof(n_input_gatetype), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "and")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("n_input_gatetype#1", (args) => CreateSyntaxNode(nameof(n_input_gatetype), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "nand")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("n_input_gatetype#2", (args) => CreateSyntaxNode(nameof(n_input_gatetype), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "or")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("n_input_gatetype#3", (args) => CreateSyntaxNode(nameof(n_input_gatetype), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "nor")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("n_input_gatetype#4", (args) => CreateSyntaxNode(nameof(n_input_gatetype), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "xor")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("n_input_gatetype#5", (args) => CreateSyntaxNode(nameof(n_input_gatetype), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "xnor")))))))).Named("n_input_gatetype"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> n_output_gatetype =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("n_output_gatetype#0", (args) => CreateSyntaxNode(nameof(n_output_gatetype), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "buf")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("n_output_gatetype#1", (args) => CreateSyntaxNode(nameof(n_output_gatetype), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "not")))).Named("n_output_gatetype"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> pass_en_switchtype =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("pass_en_switchtype#0", (args) => CreateSyntaxNode(nameof(pass_en_switchtype), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "tranif0")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("pass_en_switchtype#1", (args) => CreateSyntaxNode(nameof(pass_en_switchtype), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "tranif1")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("pass_en_switchtype#2", (args) => CreateSyntaxNode(nameof(pass_en_switchtype), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "rtranif1")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("pass_en_switchtype#3", (args) => CreateSyntaxNode(nameof(pass_en_switchtype), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "rtranif0")))))).Named("pass_en_switchtype"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> pass_switchtype =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("pass_switchtype#0", (args) => CreateSyntaxNode(nameof(pass_switchtype), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "tran")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("pass_switchtype#1", (args) => CreateSyntaxNode(nameof(pass_switchtype), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "rtran")))).Named("pass_switchtype"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> module_instantiation =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("module_instantiation#0", (args) => CreateSyntaxNode(nameof(module_instantiation), args), new Lazy<IParser<VerilogToken>>(() => module_or_paramset_identifier.Value), new Lazy<IParser<VerilogToken>>(() => parameter_value_assignment.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => module_instance.Value), new Lazy<IParser<VerilogToken>>(() => module_instantiation_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("module_instantiation"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> module_instantiation_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("module_instantiation_many#0", (args) => CreateSyntaxNode(nameof(module_instantiation_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => module_instance.Value)).Named("module_instantiation_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> parameter_value_assignment =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("parameter_value_assignment#0", (args) => CreateSyntaxNode(nameof(parameter_value_assignment), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.HASH)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => list_of_parameter_assignments.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("parameter_value_assignment#1", (args) => CreateSyntaxNode(nameof(parameter_value_assignment), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.HASH)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))).Named("parameter_value_assignment"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_parameter_assignments =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_parameter_assignments#0", (args) => CreateSyntaxNode(nameof(list_of_parameter_assignments), args), new Lazy<IParser<VerilogToken>>(() => ordered_parameter_assignment.Value), new Lazy<IParser<VerilogToken>>(() => list_of_parameter_assignments_many.Value.Many(greedy: true)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("list_of_parameter_assignments#1", (args) => CreateSyntaxNode(nameof(list_of_parameter_assignments), args), new Lazy<IParser<VerilogToken>>(() => named_parameter_assignment.Value), new Lazy<IParser<VerilogToken>>(() => list_of_parameter_assignments_many_2.Value.Many(greedy: true)))).Named("list_of_parameter_assignments"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_parameter_assignments_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_parameter_assignments_many#0", (args) => CreateSyntaxNode(nameof(list_of_parameter_assignments_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => ordered_parameter_assignment.Value)).Named("list_of_parameter_assignments_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_parameter_assignments_many_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_parameter_assignments_many_2#0", (args) => CreateSyntaxNode(nameof(list_of_parameter_assignments_many_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => named_parameter_assignment.Value)).Named("list_of_parameter_assignments_many_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> ordered_parameter_assignment =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("ordered_parameter_assignment#0", (args) => CreateSyntaxNode(nameof(ordered_parameter_assignment), args), new Lazy<IParser<VerilogToken>>(() => expression.Value)).Named("ordered_parameter_assignment"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> named_parameter_assignment =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("named_parameter_assignment#0", (args) => CreateSyntaxNode(nameof(named_parameter_assignment), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.DOT)), new Lazy<IParser<VerilogToken>>(() => parameter_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => mintypmax_expression.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("named_parameter_assignment#1", (args) => CreateSyntaxNode(nameof(named_parameter_assignment), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.DOT)), new Lazy<IParser<VerilogToken>>(() => system_parameter_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))).Named("named_parameter_assignment"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> module_instance =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("module_instance#0", (args) => CreateSyntaxNode(nameof(module_instance), args), new Lazy<IParser<VerilogToken>>(() => name_of_module_instance.Value), new Lazy<IParser<VerilogToken>>(() => module_instance_optional.Value.Optional(greedy: false))).Named("module_instance"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> module_instance_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("module_instance_optional#0", (args) => CreateSyntaxNode(nameof(module_instance_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => list_of_port_connections.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("module_instance_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> name_of_module_instance =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("name_of_module_instance#0", (args) => CreateSyntaxNode(nameof(name_of_module_instance), args), new Lazy<IParser<VerilogToken>>(() => module_instance_identifier.Value), new Lazy<IParser<VerilogToken>>(() => range.Value.Optional(greedy: false))).Named("name_of_module_instance"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_port_connections =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_port_connections#0", (args) => CreateSyntaxNode(nameof(list_of_port_connections), args), new Lazy<IParser<VerilogToken>>(() => ordered_port_connection.Value), new Lazy<IParser<VerilogToken>>(() => list_of_port_connections_many.Value.Many(greedy: true)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("list_of_port_connections#1", (args) => CreateSyntaxNode(nameof(list_of_port_connections), args), new Lazy<IParser<VerilogToken>>(() => named_port_connection.Value), new Lazy<IParser<VerilogToken>>(() => list_of_port_connections_many_2.Value.Many(greedy: true)))).Named("list_of_port_connections"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_port_connections_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_port_connections_many#0", (args) => CreateSyntaxNode(nameof(list_of_port_connections_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => ordered_port_connection.Value)).Named("list_of_port_connections_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_port_connections_many_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_port_connections_many_2#0", (args) => CreateSyntaxNode(nameof(list_of_port_connections_many_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => named_port_connection.Value)).Named("list_of_port_connections_many_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> ordered_port_connection =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("ordered_port_connection#0", (args) => CreateSyntaxNode(nameof(ordered_port_connection), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => expression.Value)).Named("ordered_port_connection"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> named_port_connection =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("named_port_connection#0", (args) => CreateSyntaxNode(nameof(named_port_connection), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.DOT)), new Lazy<IParser<VerilogToken>>(() => port_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => expression.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("named_port_connection"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> generate_region =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("generate_region#0", (args) => CreateSyntaxNode(nameof(generate_region), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "generate")), new Lazy<IParser<VerilogToken>>(() => module_or_generate_item.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "endgenerate"))).Named("generate_region"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> genvar_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("genvar_declaration#0", (args) => CreateSyntaxNode(nameof(genvar_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "genvar")), new Lazy<IParser<VerilogToken>>(() => list_of_genvar_identifiers.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("genvar_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_genvar_identifiers =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_genvar_identifiers#0", (args) => CreateSyntaxNode(nameof(list_of_genvar_identifiers), args), new Lazy<IParser<VerilogToken>>(() => genvar_identifier.Value), new Lazy<IParser<VerilogToken>>(() => list_of_genvar_identifiers_many.Value.Many(greedy: true))).Named("list_of_genvar_identifiers"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_genvar_identifiers_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_genvar_identifiers_many#0", (args) => CreateSyntaxNode(nameof(list_of_genvar_identifiers_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => genvar_identifier.Value)).Named("list_of_genvar_identifiers_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_loop_generate_statement =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_loop_generate_statement#0", (args) => CreateSyntaxNode(nameof(analog_loop_generate_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "for")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => genvar_initialization.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)), new Lazy<IParser<VerilogToken>>(() => genvar_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)), new Lazy<IParser<VerilogToken>>(() => genvar_iteration.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_statement.Value)).Named("analog_loop_generate_statement"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> loop_generate_construct =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("loop_generate_construct#0", (args) => CreateSyntaxNode(nameof(loop_generate_construct), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "for")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => genvar_initialization.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)), new Lazy<IParser<VerilogToken>>(() => genvar_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)), new Lazy<IParser<VerilogToken>>(() => genvar_iteration.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => generate_block.Value)).Named("loop_generate_construct"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> genvar_initialization =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("genvar_initialization#0", (args) => CreateSyntaxNode(nameof(genvar_initialization), args), new Lazy<IParser<VerilogToken>>(() => genvar_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value)).Named("genvar_initialization"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> genvar_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("genvar_expression#0", (args) => CreateSyntaxNode(nameof(genvar_expression), args), new Lazy<IParser<VerilogToken>>(() => genvar_primary.Value), new Lazy<IParser<VerilogToken>>(() => genvar_expression_prim.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("genvar_expression#1", (args) => CreateSyntaxNode(nameof(genvar_expression), args), new Lazy<IParser<VerilogToken>>(() => unary_operator.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => genvar_primary.Value), new Lazy<IParser<VerilogToken>>(() => genvar_expression_prim.Value))).Named("genvar_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> genvar_iteration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("genvar_iteration#0", (args) => CreateSyntaxNode(nameof(genvar_iteration), args), new Lazy<IParser<VerilogToken>>(() => genvar_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => genvar_expression.Value)).Named("genvar_iteration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> genvar_primary =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("genvar_primary#0", (args) => CreateSyntaxNode(nameof(genvar_primary), args), new Lazy<IParser<VerilogToken>>(() => constant_primary.Value)).Named("genvar_primary"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> conditional_generate_construct =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("conditional_generate_construct#0", (args) => CreateSyntaxNode(nameof(conditional_generate_construct), args), new Lazy<IParser<VerilogToken>>(() => if_generate_construct.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("conditional_generate_construct#1", (args) => CreateSyntaxNode(nameof(conditional_generate_construct), args), new Lazy<IParser<VerilogToken>>(() => case_generate_construct.Value))).Named("conditional_generate_construct"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> if_generate_construct =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("if_generate_construct#0", (args) => CreateSyntaxNode(nameof(if_generate_construct), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "if")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => generate_block_or_null.Value), new Lazy<IParser<VerilogToken>>(() => if_generate_construct_else.Value.Optional(greedy: true))).Named("if_generate_construct"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> if_generate_construct_else =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("if_generate_construct_else#0", (args) => CreateSyntaxNode(nameof(if_generate_construct_else), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "else")), new Lazy<IParser<VerilogToken>>(() => generate_block_or_null.Value)).Named("if_generate_construct_else"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> case_generate_construct =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("case_generate_construct#0", (args) => CreateSyntaxNode(nameof(case_generate_construct), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "case")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => case_generate_item.Value), new Lazy<IParser<VerilogToken>>(() => case_generate_item.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "endcase"))).Named("case_generate_construct"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> case_generate_item =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("case_generate_item#0", (args) => CreateSyntaxNode(nameof(case_generate_item), args), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => case_generate_item_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => generate_block_or_null.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("case_generate_item#1", (args) => CreateSyntaxNode(nameof(case_generate_item), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "default")), new Lazy<IParser<VerilogToken>>(() => case_generate_item_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => generate_block_or_null.Value))).Named("case_generate_item"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> case_generate_item_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("case_generate_item_many#0", (args) => CreateSyntaxNode(nameof(case_generate_item_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value)).Named("case_generate_item_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> case_generate_item_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("case_generate_item_optional#0", (args) => CreateSyntaxNode(nameof(case_generate_item_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON))).Named("case_generate_item_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> generate_block =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("generate_block#0", (args) => CreateSyntaxNode(nameof(generate_block), args), new Lazy<IParser<VerilogToken>>(() => module_or_generate_item.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("generate_block#1", (args) => CreateSyntaxNode(nameof(generate_block), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "begin")), new Lazy<IParser<VerilogToken>>(() => generate_block_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => module_or_generate_item.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "end")))).Named("generate_block"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> generate_block_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("generate_block_optional#0", (args) => CreateSyntaxNode(nameof(generate_block_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => generate_block_identifier.Value)).Named("generate_block_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> generate_block_or_null =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("generate_block_or_null#0", (args) => CreateSyntaxNode(nameof(generate_block_or_null), args), new Lazy<IParser<VerilogToken>>(() => generate_block.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("generate_block_or_null#1", (args) => CreateSyntaxNode(nameof(generate_block_or_null), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))).Named("generate_block_or_null"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> udp_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("udp_declaration#0", (args) => CreateSyntaxNode(nameof(udp_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "primitive")), new Lazy<IParser<VerilogToken>>(() => udp_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => udp_port_list.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)), new Lazy<IParser<VerilogToken>>(() => udp_port_declaration.Value), new Lazy<IParser<VerilogToken>>(() => udp_port_declaration.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => udp_body.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "endprimitive")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("udp_declaration#1", (args) => CreateSyntaxNode(nameof(udp_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "primitive")), new Lazy<IParser<VerilogToken>>(() => udp_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => udp_declaration_port_list.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)), new Lazy<IParser<VerilogToken>>(() => udp_body.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "endprimitive")))).Named("udp_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> udp_port_list =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("udp_port_list#0", (args) => CreateSyntaxNode(nameof(udp_port_list), args), new Lazy<IParser<VerilogToken>>(() => output_port_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => input_port_identifier.Value), new Lazy<IParser<VerilogToken>>(() => udp_port_list_many.Value.Many(greedy: true))).Named("udp_port_list"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> udp_port_list_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("udp_port_list_many#0", (args) => CreateSyntaxNode(nameof(udp_port_list_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => input_port_identifier.Value)).Named("udp_port_list_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> udp_declaration_port_list =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("udp_declaration_port_list#0", (args) => CreateSyntaxNode(nameof(udp_declaration_port_list), args), new Lazy<IParser<VerilogToken>>(() => udp_output_declaration.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => udp_input_declaration.Value), new Lazy<IParser<VerilogToken>>(() => udp_declaration_port_list_many.Value.Many(greedy: true))).Named("udp_declaration_port_list"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> udp_declaration_port_list_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("udp_declaration_port_list_many#0", (args) => CreateSyntaxNode(nameof(udp_declaration_port_list_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => udp_input_declaration.Value)).Named("udp_declaration_port_list_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> udp_port_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("udp_port_declaration#0", (args) => CreateSyntaxNode(nameof(udp_port_declaration), args), new Lazy<IParser<VerilogToken>>(() => udp_output_declaration.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("udp_port_declaration#1", (args) => CreateSyntaxNode(nameof(udp_port_declaration), args), new Lazy<IParser<VerilogToken>>(() => udp_input_declaration.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("udp_port_declaration#2", (args) => CreateSyntaxNode(nameof(udp_port_declaration), args), new Lazy<IParser<VerilogToken>>(() => udp_reg_declaration.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))))).Named("udp_port_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> udp_output_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("udp_output_declaration#0", (args) => CreateSyntaxNode(nameof(udp_output_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "output")), new Lazy<IParser<VerilogToken>>(() => port_identifier.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("udp_output_declaration#1", (args) => CreateSyntaxNode(nameof(udp_output_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "output")), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "reg")), new Lazy<IParser<VerilogToken>>(() => port_identifier.Value), new Lazy<IParser<VerilogToken>>(() => udp_output_declaration_optional.Value.Optional(greedy: false)))).Named("udp_output_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> udp_output_declaration_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("udp_output_declaration_optional#0", (args) => CreateSyntaxNode(nameof(udp_output_declaration_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value)).Named("udp_output_declaration_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> udp_input_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("udp_input_declaration#0", (args) => CreateSyntaxNode(nameof(udp_input_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "input")), new Lazy<IParser<VerilogToken>>(() => list_of_port_identifiers.Value)).Named("udp_input_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> udp_reg_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("udp_reg_declaration#0", (args) => CreateSyntaxNode(nameof(udp_reg_declaration), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "reg")), new Lazy<IParser<VerilogToken>>(() => discipline_identifier.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => variable_identifier.Value)).Named("udp_reg_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> udp_body =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("udp_body#0", (args) => CreateSyntaxNode(nameof(udp_body), args), new Lazy<IParser<VerilogToken>>(() => combinational_body.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("udp_body#1", (args) => CreateSyntaxNode(nameof(udp_body), args), new Lazy<IParser<VerilogToken>>(() => sequential_body.Value))).Named("udp_body"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> combinational_body =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("combinational_body#0", (args) => CreateSyntaxNode(nameof(combinational_body), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "table")), new Lazy<IParser<VerilogToken>>(() => combinational_entry.Value), new Lazy<IParser<VerilogToken>>(() => combinational_entry.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "endtable"))).Named("combinational_body"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> combinational_entry =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("combinational_entry#0", (args) => CreateSyntaxNode(nameof(combinational_entry), args), new Lazy<IParser<VerilogToken>>(() => level_input_list.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => output_symbol.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("combinational_entry"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> sequential_body =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("sequential_body#0", (args) => CreateSyntaxNode(nameof(sequential_body), args), new Lazy<IParser<VerilogToken>>(() => udp_initial_statement.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "table")), new Lazy<IParser<VerilogToken>>(() => sequential_entry.Value), new Lazy<IParser<VerilogToken>>(() => sequential_entry.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "endtable"))).Named("sequential_body"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> udp_initial_statement =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("udp_initial_statement#0", (args) => CreateSyntaxNode(nameof(udp_initial_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "initial")), new Lazy<IParser<VerilogToken>>(() => output_port_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => init_val.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("udp_initial_statement"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> init_val =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("init_val#0", (args) => CreateSyntaxNode(nameof(init_val), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "1'b0")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("init_val#1", (args) => CreateSyntaxNode(nameof(init_val), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "1'b1")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("init_val#2", (args) => CreateSyntaxNode(nameof(init_val), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "1'bx")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("init_val#3", (args) => CreateSyntaxNode(nameof(init_val), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "1'bX")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("init_val#4", (args) => CreateSyntaxNode(nameof(init_val), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "1'B0")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("init_val#5", (args) => CreateSyntaxNode(nameof(init_val), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "1'B1")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("init_val#6", (args) => CreateSyntaxNode(nameof(init_val), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "1'Bx")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("init_val#7", (args) => CreateSyntaxNode(nameof(init_val), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "1'BX")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("init_val#8", (args) => CreateSyntaxNode(nameof(init_val), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('1')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("init_val#9", (args) => CreateSyntaxNode(nameof(init_val), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('0')))))))))))).Named("init_val"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> sequential_entry =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("sequential_entry#0", (args) => CreateSyntaxNode(nameof(sequential_entry), args), new Lazy<IParser<VerilogToken>>(() => seq_input_list.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => current_state.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => next_state.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("sequential_entry"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> seq_input_list =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("seq_input_list#0", (args) => CreateSyntaxNode(nameof(seq_input_list), args), new Lazy<IParser<VerilogToken>>(() => level_input_list.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("seq_input_list#1", (args) => CreateSyntaxNode(nameof(seq_input_list), args), new Lazy<IParser<VerilogToken>>(() => edge_input_list.Value))).Named("seq_input_list"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> level_input_list =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("level_input_list#0", (args) => CreateSyntaxNode(nameof(level_input_list), args), new Lazy<IParser<VerilogToken>>(() => level_symbol.Value), new Lazy<IParser<VerilogToken>>(() => level_symbol.Value.Many(greedy: true))).Named("level_input_list"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> edge_input_list =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("edge_input_list#0", (args) => CreateSyntaxNode(nameof(edge_input_list), args), new Lazy<IParser<VerilogToken>>(() => level_symbol.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => edge_indicator.Value), new Lazy<IParser<VerilogToken>>(() => level_symbol.Value.Many(greedy: true))).Named("edge_input_list"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> edge_indicator =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("edge_indicator#0", (args) => CreateSyntaxNode(nameof(edge_indicator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => level_symbol.Value), new Lazy<IParser<VerilogToken>>(() => level_symbol.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("edge_indicator#1", (args) => CreateSyntaxNode(nameof(edge_indicator), args), new Lazy<IParser<VerilogToken>>(() => edge_symbol.Value))).Named("edge_indicator"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> current_state =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("current_state#0", (args) => CreateSyntaxNode(nameof(current_state), args), new Lazy<IParser<VerilogToken>>(() => level_symbol.Value)).Named("current_state"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> next_state =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("next_state#0", (args) => CreateSyntaxNode(nameof(next_state), args), new Lazy<IParser<VerilogToken>>(() => output_symbol.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("next_state#1", (args) => CreateSyntaxNode(nameof(next_state), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.MINUS)))).Named("next_state"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> output_symbol =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("output_symbol#0", (args) => CreateSyntaxNode(nameof(output_symbol), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('0')))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("output_symbol#1", (args) => CreateSyntaxNode(nameof(output_symbol), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('1')))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("output_symbol#2", (args) => CreateSyntaxNode(nameof(output_symbol), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('x')))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("output_symbol#3", (args) => CreateSyntaxNode(nameof(output_symbol), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('X')))))).Named("output_symbol"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> level_symbol =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("level_symbol#0", (args) => CreateSyntaxNode(nameof(level_symbol), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('0')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("level_symbol#1", (args) => CreateSyntaxNode(nameof(level_symbol), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('1')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("level_symbol#2", (args) => CreateSyntaxNode(nameof(level_symbol), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('x')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("level_symbol#3", (args) => CreateSyntaxNode(nameof(level_symbol), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('X')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("level_symbol#4", (args) => CreateSyntaxNode(nameof(level_symbol), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.QUESTION)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("level_symbol#5", (args) => CreateSyntaxNode(nameof(level_symbol), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('b')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("level_symbol#6", (args) => CreateSyntaxNode(nameof(level_symbol), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('B'))))))))).Named("level_symbol"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> edge_symbol =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("edge_symbol#0", (args) => CreateSyntaxNode(nameof(edge_symbol), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('r')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("edge_symbol#1", (args) => CreateSyntaxNode(nameof(edge_symbol), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('R')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("edge_symbol#2", (args) => CreateSyntaxNode(nameof(edge_symbol), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('f')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("edge_symbol#3", (args) => CreateSyntaxNode(nameof(edge_symbol), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('F')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("edge_symbol#4", (args) => CreateSyntaxNode(nameof(edge_symbol), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('p')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("edge_symbol#5", (args) => CreateSyntaxNode(nameof(edge_symbol), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('P')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("edge_symbol#6", (args) => CreateSyntaxNode(nameof(edge_symbol), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('n')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("edge_symbol#7", (args) => CreateSyntaxNode(nameof(edge_symbol), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('N')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("edge_symbol#8", (args) => CreateSyntaxNode(nameof(edge_symbol), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.STAR))))))))))).Named("edge_symbol"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> udp_instantiation =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("udp_instantiation#0", (args) => CreateSyntaxNode(nameof(udp_instantiation), args), new Lazy<IParser<VerilogToken>>(() => udp_identifier.Value), new Lazy<IParser<VerilogToken>>(() => drive_strength.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => delay2.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => udp_instance.Value), new Lazy<IParser<VerilogToken>>(() => udp_instantiation_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("udp_instantiation"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> udp_instantiation_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("udp_instantiation_many#0", (args) => CreateSyntaxNode(nameof(udp_instantiation_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => udp_instance.Value)).Named("udp_instantiation_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> udp_instance =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("udp_instance#0", (args) => CreateSyntaxNode(nameof(udp_instance), args), new Lazy<IParser<VerilogToken>>(() => name_of_udp_instance.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => output_terminal.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => input_terminal.Value), new Lazy<IParser<VerilogToken>>(() => udp_instance_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("udp_instance"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> udp_instance_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("udp_instance_many#0", (args) => CreateSyntaxNode(nameof(udp_instance_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => input_terminal.Value)).Named("udp_instance_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> name_of_udp_instance =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("name_of_udp_instance#0", (args) => CreateSyntaxNode(nameof(name_of_udp_instance), args), new Lazy<IParser<VerilogToken>>(() => udp_instance_identifier.Value), new Lazy<IParser<VerilogToken>>(() => range.Value.Optional(greedy: false))).Named("name_of_udp_instance"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> continuous_assign =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("continuous_assign#0", (args) => CreateSyntaxNode(nameof(continuous_assign), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "assign")), new Lazy<IParser<VerilogToken>>(() => drive_strength.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => delay3.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_net_assignments.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("continuous_assign"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_net_assignments =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_net_assignments#0", (args) => CreateSyntaxNode(nameof(list_of_net_assignments), args), new Lazy<IParser<VerilogToken>>(() => net_assignment.Value), new Lazy<IParser<VerilogToken>>(() => list_of_net_assignments_many.Value.Many(greedy: true))).Named("list_of_net_assignments"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_net_assignments_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_net_assignments_many#0", (args) => CreateSyntaxNode(nameof(list_of_net_assignments_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => net_assignment.Value)).Named("list_of_net_assignments_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> net_assignment =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("net_assignment#0", (args) => CreateSyntaxNode(nameof(net_assignment), args), new Lazy<IParser<VerilogToken>>(() => net_lvalue.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => expression.Value)).Named("net_assignment"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_construct =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_construct#0", (args) => CreateSyntaxNode(nameof(analog_construct), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "analog")), new Lazy<IParser<VerilogToken>>(() => analog_statement.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("analog_construct#1", (args) => CreateSyntaxNode(nameof(analog_construct), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "analog")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "initial")), new Lazy<IParser<VerilogToken>>(() => analog_function_statement.Value))).Named("analog_construct"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_procedural_assignment =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_procedural_assignment#0", (args) => CreateSyntaxNode(nameof(analog_procedural_assignment), args), new Lazy<IParser<VerilogToken>>(() => analog_variable_assignment.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("analog_procedural_assignment"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_variable_assignment =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_variable_assignment#0", (args) => CreateSyntaxNode(nameof(analog_variable_assignment), args), new Lazy<IParser<VerilogToken>>(() => scalar_analog_variable_assignment.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_variable_assignment#1", (args) => CreateSyntaxNode(nameof(analog_variable_assignment), args), new Lazy<IParser<VerilogToken>>(() => array_analog_variable_assignment.Value))).Named("analog_variable_assignment"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> scalar_analog_variable_assignment =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("scalar_analog_variable_assignment#0", (args) => CreateSyntaxNode(nameof(scalar_analog_variable_assignment), args), new Lazy<IParser<VerilogToken>>(() => scalar_analog_variable_lvalue.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value)).Named("scalar_analog_variable_assignment"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> scalar_analog_variable_lvalue =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("scalar_analog_variable_lvalue#0", (args) => CreateSyntaxNode(nameof(scalar_analog_variable_lvalue), args), new Lazy<IParser<VerilogToken>>(() => variable_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => scalar_analog_variable_lvalue_many.Value.Many(greedy: true)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("scalar_analog_variable_lvalue#1", (args) => CreateSyntaxNode(nameof(scalar_analog_variable_lvalue), args), new Lazy<IParser<VerilogToken>>(() => variable_identifier.Value))).Named("scalar_analog_variable_lvalue"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> scalar_analog_variable_lvalue_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("scalar_analog_variable_lvalue_many#0", (args) => CreateSyntaxNode(nameof(scalar_analog_variable_lvalue_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE))).Named("scalar_analog_variable_lvalue_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> initial_construct =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("initial_construct#0", (args) => CreateSyntaxNode(nameof(initial_construct), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "initial")), new Lazy<IParser<VerilogToken>>(() => statement.Value)).Named("initial_construct"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> always_construct =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("always_construct#0", (args) => CreateSyntaxNode(nameof(always_construct), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "always")), new Lazy<IParser<VerilogToken>>(() => statement.Value)).Named("always_construct"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> blocking_assignment =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("blocking_assignment#0", (args) => CreateSyntaxNode(nameof(blocking_assignment), args), new Lazy<IParser<VerilogToken>>(() => variable_lvalue.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => delay_or_event_control.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => expression.Value)).Named("blocking_assignment"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> nonblocking_assignment =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("nonblocking_assignment#0", (args) => CreateSyntaxNode(nameof(nonblocking_assignment), args), new Lazy<IParser<VerilogToken>>(() => variable_lvalue.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LESS_OR_EQUAL)), new Lazy<IParser<VerilogToken>>(() => delay_or_event_control.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => expression.Value)).Named("nonblocking_assignment"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> procedural_continuous_assignments =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("procedural_continuous_assignments#0", (args) => CreateSyntaxNode(nameof(procedural_continuous_assignments), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "assign")), new Lazy<IParser<VerilogToken>>(() => variable_assignment.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("procedural_continuous_assignments#1", (args) => CreateSyntaxNode(nameof(procedural_continuous_assignments), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "deassign")), new Lazy<IParser<VerilogToken>>(() => variable_lvalue.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("procedural_continuous_assignments#2", (args) => CreateSyntaxNode(nameof(procedural_continuous_assignments), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "force")), new Lazy<IParser<VerilogToken>>(() => variable_assignment.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("procedural_continuous_assignments#3", (args) => CreateSyntaxNode(nameof(procedural_continuous_assignments), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "force")), new Lazy<IParser<VerilogToken>>(() => net_assignment.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("procedural_continuous_assignments#4", (args) => CreateSyntaxNode(nameof(procedural_continuous_assignments), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "release")), new Lazy<IParser<VerilogToken>>(() => variable_lvalue.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("procedural_continuous_assignments#5", (args) => CreateSyntaxNode(nameof(procedural_continuous_assignments), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "release")), new Lazy<IParser<VerilogToken>>(() => net_lvalue.Value))))))).Named("procedural_continuous_assignments"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> variable_assignment =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("variable_assignment#0", (args) => CreateSyntaxNode(nameof(variable_assignment), args), new Lazy<IParser<VerilogToken>>(() => variable_lvalue.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => expression.Value)).Named("variable_assignment"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_seq_block =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_seq_block#0", (args) => CreateSyntaxNode(nameof(analog_seq_block), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "begin")), new Lazy<IParser<VerilogToken>>(() => analog_seq_block_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => analog_statement.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "end"))).Named("analog_seq_block"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_seq_block_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_seq_block_optional#0", (args) => CreateSyntaxNode(nameof(analog_seq_block_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => analog_block_identifier.Value), new Lazy<IParser<VerilogToken>>(() => analog_block_item_declaration.Value.Many(greedy: true))).Named("analog_seq_block_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_event_seq_block =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_seq_block#0", (args) => CreateSyntaxNode(nameof(analog_event_seq_block), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "begin")), new Lazy<IParser<VerilogToken>>(() => analog_event_seq_block_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => analog_event_statement.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "end"))).Named("analog_event_seq_block"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_event_seq_block_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_seq_block_optional#0", (args) => CreateSyntaxNode(nameof(analog_event_seq_block_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => analog_block_identifier.Value), new Lazy<IParser<VerilogToken>>(() => analog_block_item_declaration.Value.Many(greedy: true))).Named("analog_event_seq_block_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_function_seq_block =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_seq_block#0", (args) => CreateSyntaxNode(nameof(analog_function_seq_block), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "begin")), new Lazy<IParser<VerilogToken>>(() => analog_function_seq_block_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => analog_function_statement.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "end"))).Named("analog_function_seq_block"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_function_seq_block_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_seq_block_optional#0", (args) => CreateSyntaxNode(nameof(analog_function_seq_block_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => analog_block_identifier.Value), new Lazy<IParser<VerilogToken>>(() => analog_block_item_declaration.Value.Many(greedy: true))).Named("analog_function_seq_block_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> par_block =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("par_block#0", (args) => CreateSyntaxNode(nameof(par_block), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "fork")), new Lazy<IParser<VerilogToken>>(() => par_block_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => statement.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "join"))).Named("par_block"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> par_block_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("par_block_optional#0", (args) => CreateSyntaxNode(nameof(par_block_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => block_identifier.Value), new Lazy<IParser<VerilogToken>>(() => block_item_declaration.Value.Many(greedy: true))).Named("par_block_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> seq_block =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("seq_block#0", (args) => CreateSyntaxNode(nameof(seq_block), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "begin")), new Lazy<IParser<VerilogToken>>(() => seq_block_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => statement.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "end"))).Named("seq_block"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> seq_block_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("seq_block_optional#0", (args) => CreateSyntaxNode(nameof(seq_block_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => block_identifier.Value), new Lazy<IParser<VerilogToken>>(() => block_item_declaration.Value.Many(greedy: true))).Named("seq_block_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_statement =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_statement#0", (args) => CreateSyntaxNode(nameof(analog_statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_loop_generate_statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_statement#1", (args) => CreateSyntaxNode(nameof(analog_statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_loop_statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_statement#2", (args) => CreateSyntaxNode(nameof(analog_statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_case_statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_statement#3", (args) => CreateSyntaxNode(nameof(analog_statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_conditional_statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_statement#4", (args) => CreateSyntaxNode(nameof(analog_statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_procedural_assignment.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_statement#5", (args) => CreateSyntaxNode(nameof(analog_statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_seq_block.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_statement#6", (args) => CreateSyntaxNode(nameof(analog_statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_system_task_enable.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_statement#7", (args) => CreateSyntaxNode(nameof(analog_statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => contribution_statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_statement#8", (args) => CreateSyntaxNode(nameof(analog_statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => indirect_contribution_statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_statement#9", (args) => CreateSyntaxNode(nameof(analog_statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_event_control_statement.Value))))))))))).Named("analog_statement"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_statement_or_null =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_statement_or_null#0", (args) => CreateSyntaxNode(nameof(analog_statement_or_null), args), new Lazy<IParser<VerilogToken>>(() => analog_statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_statement_or_null#1", (args) => CreateSyntaxNode(nameof(analog_statement_or_null), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))).Named("analog_statement_or_null"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_event_statement =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_statement#0", (args) => CreateSyntaxNode(nameof(analog_event_statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_loop_statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_statement#1", (args) => CreateSyntaxNode(nameof(analog_event_statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_case_statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_statement#2", (args) => CreateSyntaxNode(nameof(analog_event_statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_conditional_statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_statement#3", (args) => CreateSyntaxNode(nameof(analog_event_statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_procedural_assignment.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_statement#4", (args) => CreateSyntaxNode(nameof(analog_event_statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_event_seq_block.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_statement#5", (args) => CreateSyntaxNode(nameof(analog_event_statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_system_task_enable.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_statement#6", (args) => CreateSyntaxNode(nameof(analog_event_statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => disable_statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_statement#7", (args) => CreateSyntaxNode(nameof(analog_event_statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => event_trigger.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_statement#8", (args) => CreateSyntaxNode(nameof(analog_event_statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))))))))))).Named("analog_event_statement"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_function_statement =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_statement#0", (args) => CreateSyntaxNode(nameof(analog_function_statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_function_case_statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_statement#1", (args) => CreateSyntaxNode(nameof(analog_function_statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_function_conditional_statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_statement#2", (args) => CreateSyntaxNode(nameof(analog_function_statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_function_loop_statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_statement#3", (args) => CreateSyntaxNode(nameof(analog_function_statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_function_seq_block.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_statement#4", (args) => CreateSyntaxNode(nameof(analog_function_statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_procedural_assignment.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_statement#5", (args) => CreateSyntaxNode(nameof(analog_function_statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_system_task_enable.Value))))))).Named("analog_function_statement"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_function_statement_or_null =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_statement_or_null#0", (args) => CreateSyntaxNode(nameof(analog_function_statement_or_null), args), new Lazy<IParser<VerilogToken>>(() => analog_function_statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_statement_or_null#1", (args) => CreateSyntaxNode(nameof(analog_function_statement_or_null), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))).Named("analog_function_statement_or_null"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> statement =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("statement#0", (args) => CreateSyntaxNode(nameof(statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => blocking_assignment.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("statement#1", (args) => CreateSyntaxNode(nameof(statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => case_statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("statement#2", (args) => CreateSyntaxNode(nameof(statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => conditional_statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("statement#3", (args) => CreateSyntaxNode(nameof(statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => disable_statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("statement#4", (args) => CreateSyntaxNode(nameof(statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => event_trigger.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("statement#5", (args) => CreateSyntaxNode(nameof(statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => loop_statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("statement#6", (args) => CreateSyntaxNode(nameof(statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => nonblocking_assignment.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("statement#7", (args) => CreateSyntaxNode(nameof(statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => par_block.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("statement#8", (args) => CreateSyntaxNode(nameof(statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => procedural_continuous_assignments.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("statement#9", (args) => CreateSyntaxNode(nameof(statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => procedural_timing_control_statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("statement#10", (args) => CreateSyntaxNode(nameof(statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => seq_block.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("statement#11", (args) => CreateSyntaxNode(nameof(statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => system_task_enable.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("statement#12", (args) => CreateSyntaxNode(nameof(statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => task_enable.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("statement#13", (args) => CreateSyntaxNode(nameof(statement), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => wait_statement.Value))))))))))))))).Named("statement"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> statement_or_null =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("statement_or_null#0", (args) => CreateSyntaxNode(nameof(statement_or_null), args), new Lazy<IParser<VerilogToken>>(() => statement.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("statement_or_null#1", (args) => CreateSyntaxNode(nameof(statement_or_null), args), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))).Named("statement_or_null"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> function_statement =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("function_statement#0", (args) => CreateSyntaxNode(nameof(function_statement), args), new Lazy<IParser<VerilogToken>>(() => statement.Value)).Named("function_statement"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_event_control_statement =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_control_statement#0", (args) => CreateSyntaxNode(nameof(analog_event_control_statement), args), new Lazy<IParser<VerilogToken>>(() => analog_event_control.Value), new Lazy<IParser<VerilogToken>>(() => analog_event_statement.Value)).Named("analog_event_control_statement"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_event_control =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_control#0", (args) => CreateSyntaxNode(nameof(analog_event_control), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.AT)), new Lazy<IParser<VerilogToken>>(() => hierarchical_event_identifier.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_control#1", (args) => CreateSyntaxNode(nameof(analog_event_control), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.AT)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_event_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))).Named("analog_event_control"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_event_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_expression#0", (args) => CreateSyntaxNode(nameof(analog_event_expression), args), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_event_expression_prim.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_expression#1", (args) => CreateSyntaxNode(nameof(analog_event_expression), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "posedge")), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_event_expression_prim.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_expression#2", (args) => CreateSyntaxNode(nameof(analog_event_expression), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "negedge")), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_event_expression_prim.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_expression#3", (args) => CreateSyntaxNode(nameof(analog_event_expression), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_event_identifier.Value), new Lazy<IParser<VerilogToken>>(() => analog_event_expression_prim.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_expression#4", (args) => CreateSyntaxNode(nameof(analog_event_expression), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "initial_step")), new Lazy<IParser<VerilogToken>>(() => analog_event_expression_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => analog_event_expression_prim.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_expression#5", (args) => CreateSyntaxNode(nameof(analog_event_expression), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "final_step")), new Lazy<IParser<VerilogToken>>(() => analog_event_expression_optional_2.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => analog_event_expression_prim.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_expression#6", (args) => CreateSyntaxNode(nameof(analog_event_expression), args), new Lazy<IParser<VerilogToken>>(() => analog_event_functions.Value), new Lazy<IParser<VerilogToken>>(() => analog_event_expression_prim.Value)))))))).Named("analog_event_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_event_expression_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_expression_optional#0", (args) => CreateSyntaxNode(nameof(analog_event_expression_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "\"")), new Lazy<IParser<VerilogToken>>(() => analysis_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "\"")), new Lazy<IParser<VerilogToken>>(() => analog_event_expression_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("analog_event_expression_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_event_expression_optional_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_expression_optional_2#0", (args) => CreateSyntaxNode(nameof(analog_event_expression_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "\"")), new Lazy<IParser<VerilogToken>>(() => analysis_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "\"")), new Lazy<IParser<VerilogToken>>(() => analog_event_expression_many_2.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("analog_event_expression_optional_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_event_expression_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_expression_many#0", (args) => CreateSyntaxNode(nameof(analog_event_expression_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "\"")), new Lazy<IParser<VerilogToken>>(() => analysis_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "\""))).Named("analog_event_expression_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_event_expression_many_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_expression_many_2#0", (args) => CreateSyntaxNode(nameof(analog_event_expression_many_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "\"")), new Lazy<IParser<VerilogToken>>(() => analysis_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "\""))).Named("analog_event_expression_many_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_event_functions =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_functions#0", (args) => CreateSyntaxNode(nameof(analog_event_functions), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "cross")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_event_functions_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_functions#1", (args) => CreateSyntaxNode(nameof(analog_event_functions), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "above")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_event_functions_optional_2.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_functions#2", (args) => CreateSyntaxNode(nameof(analog_event_functions), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "timer")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_event_functions_optional_3.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_functions#3", (args) => CreateSyntaxNode(nameof(analog_event_functions), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "absdelta")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_event_functions_optional_4.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))))).Named("analog_event_functions"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_event_functions_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_functions_optional#0", (args) => CreateSyntaxNode(nameof(analog_event_functions_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression_or_null.Value), new Lazy<IParser<VerilogToken>>(() => analog_event_functions_optional_5.Value.Optional(greedy: false))).Named("analog_event_functions_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_event_functions_optional_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_functions_optional_2#0", (args) => CreateSyntaxNode(nameof(analog_event_functions_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => constant_expression_or_null.Value), new Lazy<IParser<VerilogToken>>(() => analog_event_functions_optional_6.Value.Optional(greedy: false))).Named("analog_event_functions_optional_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_event_functions_optional_3 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_functions_optional_3#0", (args) => CreateSyntaxNode(nameof(analog_event_functions_optional_3), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression_or_null.Value), new Lazy<IParser<VerilogToken>>(() => analog_event_functions_optional_7.Value.Optional(greedy: false))).Named("analog_event_functions_optional_3"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_event_functions_optional_4 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_functions_optional_4#0", (args) => CreateSyntaxNode(nameof(analog_event_functions_optional_4), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => constant_expression_or_null.Value), new Lazy<IParser<VerilogToken>>(() => analog_event_functions_optional_8.Value.Optional(greedy: false))).Named("analog_event_functions_optional_4"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_event_functions_optional_5 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_functions_optional_5#0", (args) => CreateSyntaxNode(nameof(analog_event_functions_optional_5), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => constant_expression_or_null.Value), new Lazy<IParser<VerilogToken>>(() => analog_event_functions_optional_9.Value.Optional(greedy: false))).Named("analog_event_functions_optional_5"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_event_functions_optional_6 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_functions_optional_6#0", (args) => CreateSyntaxNode(nameof(analog_event_functions_optional_6), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => constant_expression_or_null.Value), new Lazy<IParser<VerilogToken>>(() => analog_event_functions_optional_10.Value.Optional(greedy: false))).Named("analog_event_functions_optional_6"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_event_functions_optional_7 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_functions_optional_7#0", (args) => CreateSyntaxNode(nameof(analog_event_functions_optional_7), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => constant_expression_or_null.Value), new Lazy<IParser<VerilogToken>>(() => analog_event_functions_optional_11.Value.Optional(greedy: false))).Named("analog_event_functions_optional_7"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_event_functions_optional_8 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_functions_optional_8#0", (args) => CreateSyntaxNode(nameof(analog_event_functions_optional_8), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => constant_expression_or_null.Value), new Lazy<IParser<VerilogToken>>(() => analog_event_functions_optional_12.Value.Optional(greedy: false))).Named("analog_event_functions_optional_8"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_event_functions_optional_9 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_functions_optional_9#0", (args) => CreateSyntaxNode(nameof(analog_event_functions_optional_9), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => constant_expression_or_null.Value), new Lazy<IParser<VerilogToken>>(() => analog_event_functions_optional_13.Value.Optional(greedy: false))).Named("analog_event_functions_optional_9"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_event_functions_optional_10 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_functions_optional_10#0", (args) => CreateSyntaxNode(nameof(analog_event_functions_optional_10), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value)).Named("analog_event_functions_optional_10"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_event_functions_optional_11 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_functions_optional_11#0", (args) => CreateSyntaxNode(nameof(analog_event_functions_optional_11), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value)).Named("analog_event_functions_optional_11"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_event_functions_optional_12 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_functions_optional_12#0", (args) => CreateSyntaxNode(nameof(analog_event_functions_optional_12), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value)).Named("analog_event_functions_optional_12"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_event_functions_optional_13 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_functions_optional_13#0", (args) => CreateSyntaxNode(nameof(analog_event_functions_optional_13), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value)).Named("analog_event_functions_optional_13"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> delay_control =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("delay_control#0", (args) => CreateSyntaxNode(nameof(delay_control), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.HASH)), new Lazy<IParser<VerilogToken>>(() => delay_value.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("delay_control#1", (args) => CreateSyntaxNode(nameof(delay_control), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.HASH)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => mintypmax_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))).Named("delay_control"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> delay_or_event_control =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("delay_or_event_control#0", (args) => CreateSyntaxNode(nameof(delay_or_event_control), args), new Lazy<IParser<VerilogToken>>(() => delay_control.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("delay_or_event_control#1", (args) => CreateSyntaxNode(nameof(delay_or_event_control), args), new Lazy<IParser<VerilogToken>>(() => event_control.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("delay_or_event_control#2", (args) => CreateSyntaxNode(nameof(delay_or_event_control), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "repeat")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => event_control.Value)))).Named("delay_or_event_control"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> disable_statement =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("disable_statement#0", (args) => CreateSyntaxNode(nameof(disable_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "disable")), new Lazy<IParser<VerilogToken>>(() => hierarchical_task_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("disable_statement#1", (args) => CreateSyntaxNode(nameof(disable_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "disable")), new Lazy<IParser<VerilogToken>>(() => hierarchical_block_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))).Named("disable_statement"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> event_control =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("event_control#0", (args) => CreateSyntaxNode(nameof(event_control), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.AT)), new Lazy<IParser<VerilogToken>>(() => hierarchical_event_identifier.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("event_control#1", (args) => CreateSyntaxNode(nameof(event_control), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.AT)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => event_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("event_control#2", (args) => CreateSyntaxNode(nameof(event_control), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.AT)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.STAR)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("event_control#3", (args) => CreateSyntaxNode(nameof(event_control), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.AT)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.STAR)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))))).Named("event_control"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> event_trigger =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("event_trigger#0", (args) => CreateSyntaxNode(nameof(event_trigger), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "->")), new Lazy<IParser<VerilogToken>>(() => hierarchical_event_identifier.Value), new Lazy<IParser<VerilogToken>>(() => event_trigger_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("event_trigger"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> event_trigger_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("event_trigger_many#0", (args) => CreateSyntaxNode(nameof(event_trigger_many), args), new Lazy<IParser<VerilogToken>>(() => expression.Value.Optional(greedy: false))).Named("event_trigger_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> event_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("event_expression#0", (args) => CreateSyntaxNode(nameof(event_expression), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "posedge")), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => event_expression_prim.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("event_expression#1", (args) => CreateSyntaxNode(nameof(event_expression), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "negedge")), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => event_expression_prim.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("event_expression#2", (args) => CreateSyntaxNode(nameof(event_expression), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_event_identifier.Value), new Lazy<IParser<VerilogToken>>(() => event_expression_prim.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("event_expression#3", (args) => CreateSyntaxNode(nameof(event_expression), args), new Lazy<IParser<VerilogToken>>(() => analog_event_functions.Value), new Lazy<IParser<VerilogToken>>(() => event_expression_prim.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("event_expression#4", (args) => CreateSyntaxNode(nameof(event_expression), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "driver_update")), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => event_expression_prim.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("event_expression#5", (args) => CreateSyntaxNode(nameof(event_expression), args), new Lazy<IParser<VerilogToken>>(() => analog_variable_lvalue.Value), new Lazy<IParser<VerilogToken>>(() => event_expression_prim.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("event_expression#6", (args) => CreateSyntaxNode(nameof(event_expression), args), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => event_expression_prim.Value)))))))).Named("event_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> procedural_timing_control =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("procedural_timing_control#0", (args) => CreateSyntaxNode(nameof(procedural_timing_control), args), new Lazy<IParser<VerilogToken>>(() => delay_control.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("procedural_timing_control#1", (args) => CreateSyntaxNode(nameof(procedural_timing_control), args), new Lazy<IParser<VerilogToken>>(() => event_control.Value))).Named("procedural_timing_control"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> procedural_timing_control_statement =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("procedural_timing_control_statement#0", (args) => CreateSyntaxNode(nameof(procedural_timing_control_statement), args), new Lazy<IParser<VerilogToken>>(() => procedural_timing_control.Value), new Lazy<IParser<VerilogToken>>(() => statement_or_null.Value)).Named("procedural_timing_control_statement"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> wait_statement =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("wait_statement#0", (args) => CreateSyntaxNode(nameof(wait_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "wait")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => statement_or_null.Value)).Named("wait_statement"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_conditional_statement =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_conditional_statement#0", (args) => CreateSyntaxNode(nameof(analog_conditional_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "if")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_statement_or_null.Value), new Lazy<IParser<VerilogToken>>(() => analog_conditional_statement_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_conditional_statement_else.Value.Optional(greedy: true))).Named("analog_conditional_statement"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_conditional_statement_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_conditional_statement_many#0", (args) => CreateSyntaxNode(nameof(analog_conditional_statement_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "else")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "if")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_statement_or_null.Value)).Named("analog_conditional_statement_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_conditional_statement_else =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_conditional_statement_else#0", (args) => CreateSyntaxNode(nameof(analog_conditional_statement_else), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "else")), new Lazy<IParser<VerilogToken>>(() => analog_statement_or_null.Value)).Named("analog_conditional_statement_else"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_function_conditional_statement =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_conditional_statement#0", (args) => CreateSyntaxNode(nameof(analog_function_conditional_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "if")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_function_statement_or_null.Value), new Lazy<IParser<VerilogToken>>(() => analog_function_conditional_statement_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_function_conditional_statement_else.Value.Optional(greedy: true))).Named("analog_function_conditional_statement"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_function_conditional_statement_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_conditional_statement_many#0", (args) => CreateSyntaxNode(nameof(analog_function_conditional_statement_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "else")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "if")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_function_statement_or_null.Value)).Named("analog_function_conditional_statement_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_function_conditional_statement_else =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_conditional_statement_else#0", (args) => CreateSyntaxNode(nameof(analog_function_conditional_statement_else), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "else")), new Lazy<IParser<VerilogToken>>(() => analog_function_statement_or_null.Value)).Named("analog_function_conditional_statement_else"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> conditional_statement =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("conditional_statement#0", (args) => CreateSyntaxNode(nameof(conditional_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "if")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => statement_or_null.Value), new Lazy<IParser<VerilogToken>>(() => conditional_statement_else.Value.Optional(greedy: true)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("conditional_statement#1", (args) => CreateSyntaxNode(nameof(conditional_statement), args), new Lazy<IParser<VerilogToken>>(() => if_else_if_statement.Value))).Named("conditional_statement"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> conditional_statement_else =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("conditional_statement_else#0", (args) => CreateSyntaxNode(nameof(conditional_statement_else), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "else")), new Lazy<IParser<VerilogToken>>(() => statement_or_null.Value)).Named("conditional_statement_else"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> if_else_if_statement =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("if_else_if_statement#0", (args) => CreateSyntaxNode(nameof(if_else_if_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "if")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => statement_or_null.Value), new Lazy<IParser<VerilogToken>>(() => if_else_if_statement_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => if_else_if_statement_else.Value.Optional(greedy: true))).Named("if_else_if_statement"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> if_else_if_statement_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("if_else_if_statement_many#0", (args) => CreateSyntaxNode(nameof(if_else_if_statement_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "else")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "if")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => statement_or_null.Value)).Named("if_else_if_statement_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> if_else_if_statement_else =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("if_else_if_statement_else#0", (args) => CreateSyntaxNode(nameof(if_else_if_statement_else), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "else")), new Lazy<IParser<VerilogToken>>(() => statement_or_null.Value)).Named("if_else_if_statement_else"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_case_statement =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_case_statement#0", (args) => CreateSyntaxNode(nameof(analog_case_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "case")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_case_item.Value), new Lazy<IParser<VerilogToken>>(() => analog_case_item.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "endcase")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_case_statement#1", (args) => CreateSyntaxNode(nameof(analog_case_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "casex")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_case_item.Value), new Lazy<IParser<VerilogToken>>(() => analog_case_item.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "endcase")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_case_statement#2", (args) => CreateSyntaxNode(nameof(analog_case_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "casez")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_case_item.Value), new Lazy<IParser<VerilogToken>>(() => analog_case_item.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "endcase"))))).Named("analog_case_statement"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_case_item =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_case_item#0", (args) => CreateSyntaxNode(nameof(analog_case_item), args), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_case_item_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => analog_statement_or_null.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_case_item#1", (args) => CreateSyntaxNode(nameof(analog_case_item), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "default")), new Lazy<IParser<VerilogToken>>(() => analog_case_item_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => analog_statement_or_null.Value))).Named("analog_case_item"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_case_item_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_case_item_many#0", (args) => CreateSyntaxNode(nameof(analog_case_item_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value)).Named("analog_case_item_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_case_item_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_case_item_optional#0", (args) => CreateSyntaxNode(nameof(analog_case_item_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON))).Named("analog_case_item_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_function_case_statement =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_case_statement#0", (args) => CreateSyntaxNode(nameof(analog_function_case_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "case")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_function_case_item.Value), new Lazy<IParser<VerilogToken>>(() => analog_function_case_item.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "endcase"))).Named("analog_function_case_statement"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_function_case_item =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_case_item#0", (args) => CreateSyntaxNode(nameof(analog_function_case_item), args), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_function_case_item_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => analog_function_statement_or_null.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_case_item#1", (args) => CreateSyntaxNode(nameof(analog_function_case_item), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "default")), new Lazy<IParser<VerilogToken>>(() => analog_function_case_item_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => analog_function_statement_or_null.Value))).Named("analog_function_case_item"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_function_case_item_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_case_item_many#0", (args) => CreateSyntaxNode(nameof(analog_function_case_item_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value)).Named("analog_function_case_item_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_function_case_item_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_case_item_optional#0", (args) => CreateSyntaxNode(nameof(analog_function_case_item_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON))).Named("analog_function_case_item_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> case_statement =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("case_statement#0", (args) => CreateSyntaxNode(nameof(case_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "case")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => case_item.Value), new Lazy<IParser<VerilogToken>>(() => case_item.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "endcase")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("case_statement#1", (args) => CreateSyntaxNode(nameof(case_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "casez")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => case_item.Value), new Lazy<IParser<VerilogToken>>(() => case_item.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "endcase")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("case_statement#2", (args) => CreateSyntaxNode(nameof(case_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "casex")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => case_item.Value), new Lazy<IParser<VerilogToken>>(() => case_item.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "endcase"))))).Named("case_statement"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> case_item =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("case_item#0", (args) => CreateSyntaxNode(nameof(case_item), args), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => case_item_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => statement_or_null.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("case_item#1", (args) => CreateSyntaxNode(nameof(case_item), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "default")), new Lazy<IParser<VerilogToken>>(() => case_item_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => statement_or_null.Value))).Named("case_item"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> case_item_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("case_item_many#0", (args) => CreateSyntaxNode(nameof(case_item_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => expression.Value)).Named("case_item_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> case_item_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("case_item_optional#0", (args) => CreateSyntaxNode(nameof(case_item_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON))).Named("case_item_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_loop_statement =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_loop_statement#0", (args) => CreateSyntaxNode(nameof(analog_loop_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "repeat")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_loop_statement#1", (args) => CreateSyntaxNode(nameof(analog_loop_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "while")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_loop_statement#2", (args) => CreateSyntaxNode(nameof(analog_loop_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "for")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_variable_assignment.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)), new Lazy<IParser<VerilogToken>>(() => analog_variable_assignment.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_statement.Value)))).Named("analog_loop_statement"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_function_loop_statement =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_loop_statement#0", (args) => CreateSyntaxNode(nameof(analog_function_loop_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "repeat")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_function_statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_loop_statement#1", (args) => CreateSyntaxNode(nameof(analog_function_loop_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "while")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_function_statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_loop_statement#2", (args) => CreateSyntaxNode(nameof(analog_function_loop_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "for")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_variable_assignment.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)), new Lazy<IParser<VerilogToken>>(() => analog_variable_assignment.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))))).Named("analog_function_loop_statement"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_function_statement_loop_statement =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_statement_loop_statement#0", (args) => CreateSyntaxNode(nameof(analog_function_statement_loop_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "forever")), new Lazy<IParser<VerilogToken>>(() => statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_statement_loop_statement#1", (args) => CreateSyntaxNode(nameof(analog_function_statement_loop_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "repeat")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_statement_loop_statement#2", (args) => CreateSyntaxNode(nameof(analog_function_statement_loop_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "while")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_statement_loop_statement#3", (args) => CreateSyntaxNode(nameof(analog_function_statement_loop_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "for")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => variable_assignment.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)), new Lazy<IParser<VerilogToken>>(() => variable_assignment.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => statement.Value))))).Named("analog_function_statement_loop_statement"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> loop_statement =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("loop_statement#0", (args) => CreateSyntaxNode(nameof(loop_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "forever")), new Lazy<IParser<VerilogToken>>(() => statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("loop_statement#1", (args) => CreateSyntaxNode(nameof(loop_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "repeat")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("loop_statement#2", (args) => CreateSyntaxNode(nameof(loop_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "while")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => statement.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("loop_statement#3", (args) => CreateSyntaxNode(nameof(loop_statement), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "for")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => variable_assignment.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)), new Lazy<IParser<VerilogToken>>(() => variable_assignment.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => statement.Value))))).Named("loop_statement"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_system_task_enable =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_system_task_enable#0", (args) => CreateSyntaxNode(nameof(analog_system_task_enable), args), new Lazy<IParser<VerilogToken>>(() => analog_system_task_identifier.Value), new Lazy<IParser<VerilogToken>>(() => analog_system_task_enable_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("analog_system_task_enable"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_system_task_enable_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_system_task_enable_optional#0", (args) => CreateSyntaxNode(nameof(analog_system_task_enable_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => analog_system_task_enable_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("analog_system_task_enable_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_system_task_enable_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_system_task_enable_many#0", (args) => CreateSyntaxNode(nameof(analog_system_task_enable_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value.Optional(greedy: false))).Named("analog_system_task_enable_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> system_task_enable =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("system_task_enable#0", (args) => CreateSyntaxNode(nameof(system_task_enable), args), new Lazy<IParser<VerilogToken>>(() => system_task_identifier.Value), new Lazy<IParser<VerilogToken>>(() => system_task_enable_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("system_task_enable"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> system_task_enable_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("system_task_enable_optional#0", (args) => CreateSyntaxNode(nameof(system_task_enable_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => expression.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => system_task_enable_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("system_task_enable_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> system_task_enable_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("system_task_enable_many#0", (args) => CreateSyntaxNode(nameof(system_task_enable_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => expression.Value.Optional(greedy: false))).Named("system_task_enable_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> task_enable =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("task_enable#0", (args) => CreateSyntaxNode(nameof(task_enable), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_task_identifier.Value), new Lazy<IParser<VerilogToken>>(() => task_enable_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("task_enable"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> task_enable_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("task_enable_optional#0", (args) => CreateSyntaxNode(nameof(task_enable_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => task_enable_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("task_enable_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> task_enable_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("task_enable_many#0", (args) => CreateSyntaxNode(nameof(task_enable_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => expression.Value)).Named("task_enable_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> contribution_statement =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("contribution_statement#0", (args) => CreateSyntaxNode(nameof(contribution_statement), args), new Lazy<IParser<VerilogToken>>(() => branch_lvalue.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.CONTRIBUTE)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("contribution_statement"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> indirect_contribution_statement =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("indirect_contribution_statement#0", (args) => CreateSyntaxNode(nameof(indirect_contribution_statement), args), new Lazy<IParser<VerilogToken>>(() => branch_lvalue.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => indirect_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL_DOUBLE)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("indirect_contribution_statement"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> specify_block =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("specify_block#0", (args) => CreateSyntaxNode(nameof(specify_block), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "specify")), new Lazy<IParser<VerilogToken>>(() => specify_item.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "endspecify"))).Named("specify_block"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> specify_item =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("specify_item#0", (args) => CreateSyntaxNode(nameof(specify_item), args), new Lazy<IParser<VerilogToken>>(() => specparam_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("specify_item#1", (args) => CreateSyntaxNode(nameof(specify_item), args), new Lazy<IParser<VerilogToken>>(() => pulsestyle_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("specify_item#2", (args) => CreateSyntaxNode(nameof(specify_item), args), new Lazy<IParser<VerilogToken>>(() => showcancelled_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("specify_item#3", (args) => CreateSyntaxNode(nameof(specify_item), args), new Lazy<IParser<VerilogToken>>(() => path_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("specify_item#4", (args) => CreateSyntaxNode(nameof(specify_item), args), new Lazy<IParser<VerilogToken>>(() => system_timing_check.Value)))))).Named("specify_item"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> pulsestyle_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("pulsestyle_declaration#0", (args) => CreateSyntaxNode(nameof(pulsestyle_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "pulsestyle_onevent")), new Lazy<IParser<VerilogToken>>(() => list_of_path_outputs.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("pulsestyle_declaration#1", (args) => CreateSyntaxNode(nameof(pulsestyle_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "pulsestyle_ondetect")), new Lazy<IParser<VerilogToken>>(() => list_of_path_outputs.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))).Named("pulsestyle_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> showcancelled_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("showcancelled_declaration#0", (args) => CreateSyntaxNode(nameof(showcancelled_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "showcancelled")), new Lazy<IParser<VerilogToken>>(() => list_of_path_outputs.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("showcancelled_declaration#1", (args) => CreateSyntaxNode(nameof(showcancelled_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "noshowcancelled")), new Lazy<IParser<VerilogToken>>(() => list_of_path_outputs.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))).Named("showcancelled_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> path_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("path_declaration#0", (args) => CreateSyntaxNode(nameof(path_declaration), args), new Lazy<IParser<VerilogToken>>(() => simple_path_declaration.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("path_declaration#1", (args) => CreateSyntaxNode(nameof(path_declaration), args), new Lazy<IParser<VerilogToken>>(() => edge_sensitive_path_declaration.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("path_declaration#2", (args) => CreateSyntaxNode(nameof(path_declaration), args), new Lazy<IParser<VerilogToken>>(() => state_dependent_path_declaration.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))))).Named("path_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> simple_path_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("simple_path_declaration#0", (args) => CreateSyntaxNode(nameof(simple_path_declaration), args), new Lazy<IParser<VerilogToken>>(() => parallel_path_description.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => path_delay_value.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("simple_path_declaration#1", (args) => CreateSyntaxNode(nameof(simple_path_declaration), args), new Lazy<IParser<VerilogToken>>(() => full_path_description.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => path_delay_value.Value))).Named("simple_path_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> parallel_path_description =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("parallel_path_description#0", (args) => CreateSyntaxNode(nameof(parallel_path_description), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => specify_input_terminal_descriptor.Value), new Lazy<IParser<VerilogToken>>(() => polarity_operator.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "=>")), new Lazy<IParser<VerilogToken>>(() => specify_output_terminal_descriptor.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("parallel_path_description"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> full_path_description =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("full_path_description#0", (args) => CreateSyntaxNode(nameof(full_path_description), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => list_of_path_inputs.Value), new Lazy<IParser<VerilogToken>>(() => polarity_operator.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "*>")), new Lazy<IParser<VerilogToken>>(() => list_of_path_outputs.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("full_path_description"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_path_inputs =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_path_inputs#0", (args) => CreateSyntaxNode(nameof(list_of_path_inputs), args), new Lazy<IParser<VerilogToken>>(() => specify_input_terminal_descriptor.Value), new Lazy<IParser<VerilogToken>>(() => list_of_path_inputs_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "\\"))).Named("list_of_path_inputs"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_path_inputs_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_path_inputs_many#0", (args) => CreateSyntaxNode(nameof(list_of_path_inputs_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => specify_input_terminal_descriptor.Value)).Named("list_of_path_inputs_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_path_outputs =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_path_outputs#0", (args) => CreateSyntaxNode(nameof(list_of_path_outputs), args), new Lazy<IParser<VerilogToken>>(() => specify_output_terminal_descriptor.Value), new Lazy<IParser<VerilogToken>>(() => list_of_path_outputs_many.Value.Many(greedy: true))).Named("list_of_path_outputs"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_path_outputs_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_path_outputs_many#0", (args) => CreateSyntaxNode(nameof(list_of_path_outputs_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => specify_output_terminal_descriptor.Value)).Named("list_of_path_outputs_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> specify_input_terminal_descriptor =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("specify_input_terminal_descriptor#0", (args) => CreateSyntaxNode(nameof(specify_input_terminal_descriptor), args), new Lazy<IParser<VerilogToken>>(() => input_identifier.Value), new Lazy<IParser<VerilogToken>>(() => specify_input_terminal_descriptor_optional.Value.Optional(greedy: false))).Named("specify_input_terminal_descriptor"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> specify_input_terminal_descriptor_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("specify_input_terminal_descriptor_optional#0", (args) => CreateSyntaxNode(nameof(specify_input_terminal_descriptor_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => constant_range_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE))).Named("specify_input_terminal_descriptor_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> specify_output_terminal_descriptor =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("specify_output_terminal_descriptor#0", (args) => CreateSyntaxNode(nameof(specify_output_terminal_descriptor), args), new Lazy<IParser<VerilogToken>>(() => output_identifier.Value), new Lazy<IParser<VerilogToken>>(() => specify_output_terminal_descriptor_optional.Value.Optional(greedy: false))).Named("specify_output_terminal_descriptor"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> specify_output_terminal_descriptor_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("specify_output_terminal_descriptor_optional#0", (args) => CreateSyntaxNode(nameof(specify_output_terminal_descriptor_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => constant_range_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE))).Named("specify_output_terminal_descriptor_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> input_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("input_identifier#0", (args) => CreateSyntaxNode(nameof(input_identifier), args), new Lazy<IParser<VerilogToken>>(() => input_port_identifier.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("input_identifier#1", (args) => CreateSyntaxNode(nameof(input_identifier), args), new Lazy<IParser<VerilogToken>>(() => inout_port_identifier.Value))).Named("input_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> output_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("output_identifier#0", (args) => CreateSyntaxNode(nameof(output_identifier), args), new Lazy<IParser<VerilogToken>>(() => output_port_identifier.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("output_identifier#1", (args) => CreateSyntaxNode(nameof(output_identifier), args), new Lazy<IParser<VerilogToken>>(() => inout_port_identifier.Value))).Named("output_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> path_delay_value =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("path_delay_value#0", (args) => CreateSyntaxNode(nameof(path_delay_value), args), new Lazy<IParser<VerilogToken>>(() => list_of_path_delay_expressions.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("path_delay_value#1", (args) => CreateSyntaxNode(nameof(path_delay_value), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => list_of_path_delay_expressions.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))).Named("path_delay_value"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> list_of_path_delay_expressions =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("list_of_path_delay_expressions#0", (args) => CreateSyntaxNode(nameof(list_of_path_delay_expressions), args), new Lazy<IParser<VerilogToken>>(() => t_path_delay_expression.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("list_of_path_delay_expressions#1", (args) => CreateSyntaxNode(nameof(list_of_path_delay_expressions), args), new Lazy<IParser<VerilogToken>>(() => trise_path_delay_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => tfall_path_delay_expression.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("list_of_path_delay_expressions#2", (args) => CreateSyntaxNode(nameof(list_of_path_delay_expressions), args), new Lazy<IParser<VerilogToken>>(() => trise_path_delay_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => tfall_path_delay_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => tz_path_delay_expression.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("list_of_path_delay_expressions#3", (args) => CreateSyntaxNode(nameof(list_of_path_delay_expressions), args), new Lazy<IParser<VerilogToken>>(() => t01_path_delay_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => t10_path_delay_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => t0z_path_delay_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => tz1_path_delay_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => t1z_path_delay_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => tz0_path_delay_expression.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("list_of_path_delay_expressions#4", (args) => CreateSyntaxNode(nameof(list_of_path_delay_expressions), args), new Lazy<IParser<VerilogToken>>(() => t01_path_delay_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => t10_path_delay_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => t0z_path_delay_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => tz1_path_delay_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => t1z_path_delay_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => tz0_path_delay_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => t0x_path_delay_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => tx1_path_delay_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => t1x_path_delay_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => tx0_path_delay_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => txz_path_delay_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => tzx_path_delay_expression.Value)))))).Named("list_of_path_delay_expressions"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> t_path_delay_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("t_path_delay_expression#0", (args) => CreateSyntaxNode(nameof(t_path_delay_expression), args), new Lazy<IParser<VerilogToken>>(() => path_delay_expression.Value)).Named("t_path_delay_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> trise_path_delay_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("trise_path_delay_expression#0", (args) => CreateSyntaxNode(nameof(trise_path_delay_expression), args), new Lazy<IParser<VerilogToken>>(() => path_delay_expression.Value)).Named("trise_path_delay_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> tfall_path_delay_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("tfall_path_delay_expression#0", (args) => CreateSyntaxNode(nameof(tfall_path_delay_expression), args), new Lazy<IParser<VerilogToken>>(() => path_delay_expression.Value)).Named("tfall_path_delay_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> tz_path_delay_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("tz_path_delay_expression#0", (args) => CreateSyntaxNode(nameof(tz_path_delay_expression), args), new Lazy<IParser<VerilogToken>>(() => path_delay_expression.Value)).Named("tz_path_delay_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> t01_path_delay_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("t01_path_delay_expression#0", (args) => CreateSyntaxNode(nameof(t01_path_delay_expression), args), new Lazy<IParser<VerilogToken>>(() => path_delay_expression.Value)).Named("t01_path_delay_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> t10_path_delay_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("t10_path_delay_expression#0", (args) => CreateSyntaxNode(nameof(t10_path_delay_expression), args), new Lazy<IParser<VerilogToken>>(() => path_delay_expression.Value)).Named("t10_path_delay_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> t0z_path_delay_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("t0z_path_delay_expression#0", (args) => CreateSyntaxNode(nameof(t0z_path_delay_expression), args), new Lazy<IParser<VerilogToken>>(() => path_delay_expression.Value)).Named("t0z_path_delay_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> tz1_path_delay_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("tz1_path_delay_expression#0", (args) => CreateSyntaxNode(nameof(tz1_path_delay_expression), args), new Lazy<IParser<VerilogToken>>(() => path_delay_expression.Value)).Named("tz1_path_delay_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> t1z_path_delay_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("t1z_path_delay_expression#0", (args) => CreateSyntaxNode(nameof(t1z_path_delay_expression), args), new Lazy<IParser<VerilogToken>>(() => path_delay_expression.Value)).Named("t1z_path_delay_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> tz0_path_delay_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("tz0_path_delay_expression#0", (args) => CreateSyntaxNode(nameof(tz0_path_delay_expression), args), new Lazy<IParser<VerilogToken>>(() => path_delay_expression.Value)).Named("tz0_path_delay_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> t0x_path_delay_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("t0x_path_delay_expression#0", (args) => CreateSyntaxNode(nameof(t0x_path_delay_expression), args), new Lazy<IParser<VerilogToken>>(() => path_delay_expression.Value)).Named("t0x_path_delay_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> tx1_path_delay_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("tx1_path_delay_expression#0", (args) => CreateSyntaxNode(nameof(tx1_path_delay_expression), args), new Lazy<IParser<VerilogToken>>(() => path_delay_expression.Value)).Named("tx1_path_delay_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> t1x_path_delay_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("t1x_path_delay_expression#0", (args) => CreateSyntaxNode(nameof(t1x_path_delay_expression), args), new Lazy<IParser<VerilogToken>>(() => path_delay_expression.Value)).Named("t1x_path_delay_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> tx0_path_delay_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("tx0_path_delay_expression#0", (args) => CreateSyntaxNode(nameof(tx0_path_delay_expression), args), new Lazy<IParser<VerilogToken>>(() => path_delay_expression.Value)).Named("tx0_path_delay_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> txz_path_delay_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("txz_path_delay_expression#0", (args) => CreateSyntaxNode(nameof(txz_path_delay_expression), args), new Lazy<IParser<VerilogToken>>(() => path_delay_expression.Value)).Named("txz_path_delay_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> tzx_path_delay_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("tzx_path_delay_expression#0", (args) => CreateSyntaxNode(nameof(tzx_path_delay_expression), args), new Lazy<IParser<VerilogToken>>(() => path_delay_expression.Value)).Named("tzx_path_delay_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> path_delay_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("path_delay_expression#0", (args) => CreateSyntaxNode(nameof(path_delay_expression), args), new Lazy<IParser<VerilogToken>>(() => constant_mintypmax_expression.Value)).Named("path_delay_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> edge_sensitive_path_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("edge_sensitive_path_declaration#0", (args) => CreateSyntaxNode(nameof(edge_sensitive_path_declaration), args), new Lazy<IParser<VerilogToken>>(() => parallel_edge_sensitive_path_description.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => path_delay_value.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("edge_sensitive_path_declaration#1", (args) => CreateSyntaxNode(nameof(edge_sensitive_path_declaration), args), new Lazy<IParser<VerilogToken>>(() => full_edge_sensitive_path_description.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => path_delay_value.Value))).Named("edge_sensitive_path_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> parallel_edge_sensitive_path_description =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("parallel_edge_sensitive_path_description#0", (args) => CreateSyntaxNode(nameof(parallel_edge_sensitive_path_description), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => edge_identifier.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => specify_input_terminal_descriptor.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "=>")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => specify_output_terminal_descriptor.Value), new Lazy<IParser<VerilogToken>>(() => polarity_operator.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => data_source_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("parallel_edge_sensitive_path_description"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> full_edge_sensitive_path_description =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("full_edge_sensitive_path_description#0", (args) => CreateSyntaxNode(nameof(full_edge_sensitive_path_description), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => edge_identifier.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => list_of_path_inputs.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "*>")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => list_of_path_outputs.Value), new Lazy<IParser<VerilogToken>>(() => polarity_operator.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => data_source_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("full_edge_sensitive_path_description"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> data_source_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("data_source_expression#0", (args) => CreateSyntaxNode(nameof(data_source_expression), args), new Lazy<IParser<VerilogToken>>(() => expression.Value)).Named("data_source_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> edge_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("edge_identifier#0", (args) => CreateSyntaxNode(nameof(edge_identifier), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "posedge")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("edge_identifier#1", (args) => CreateSyntaxNode(nameof(edge_identifier), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "negedge")))).Named("edge_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> state_dependent_path_declaration =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("state_dependent_path_declaration#0", (args) => CreateSyntaxNode(nameof(state_dependent_path_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "if")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => module_path_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => simple_path_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("state_dependent_path_declaration#1", (args) => CreateSyntaxNode(nameof(state_dependent_path_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "if")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => module_path_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => edge_sensitive_path_declaration.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("state_dependent_path_declaration#2", (args) => CreateSyntaxNode(nameof(state_dependent_path_declaration), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "ifnone")), new Lazy<IParser<VerilogToken>>(() => simple_path_declaration.Value)))).Named("state_dependent_path_declaration"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> polarity_operator =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("polarity_operator#0", (args) => CreateSyntaxNode(nameof(polarity_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.PLUS)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("polarity_operator#1", (args) => CreateSyntaxNode(nameof(polarity_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.MINUS)))).Named("polarity_operator"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> system_timing_check =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("system_timing_check#0", (args) => CreateSyntaxNode(nameof(system_timing_check), args), new Lazy<IParser<VerilogToken>>(() => setup_timing_check.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("system_timing_check#1", (args) => CreateSyntaxNode(nameof(system_timing_check), args), new Lazy<IParser<VerilogToken>>(() => hold_timing_check.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("system_timing_check#2", (args) => CreateSyntaxNode(nameof(system_timing_check), args), new Lazy<IParser<VerilogToken>>(() => setuphold_timing_check.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("system_timing_check#3", (args) => CreateSyntaxNode(nameof(system_timing_check), args), new Lazy<IParser<VerilogToken>>(() => recovery_timing_check.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("system_timing_check#4", (args) => CreateSyntaxNode(nameof(system_timing_check), args), new Lazy<IParser<VerilogToken>>(() => removal_timing_check.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("system_timing_check#5", (args) => CreateSyntaxNode(nameof(system_timing_check), args), new Lazy<IParser<VerilogToken>>(() => recrem_timing_check.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("system_timing_check#6", (args) => CreateSyntaxNode(nameof(system_timing_check), args), new Lazy<IParser<VerilogToken>>(() => skew_timing_check.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("system_timing_check#7", (args) => CreateSyntaxNode(nameof(system_timing_check), args), new Lazy<IParser<VerilogToken>>(() => timeskew_timing_check.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("system_timing_check#8", (args) => CreateSyntaxNode(nameof(system_timing_check), args), new Lazy<IParser<VerilogToken>>(() => fullskew_timing_check.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("system_timing_check#9", (args) => CreateSyntaxNode(nameof(system_timing_check), args), new Lazy<IParser<VerilogToken>>(() => period_timing_check.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("system_timing_check#10", (args) => CreateSyntaxNode(nameof(system_timing_check), args), new Lazy<IParser<VerilogToken>>(() => width_timing_check.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("system_timing_check#11", (args) => CreateSyntaxNode(nameof(system_timing_check), args), new Lazy<IParser<VerilogToken>>(() => nochange_timing_check.Value))))))))))))).Named("system_timing_check"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> setup_timing_check =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("setup_timing_check#0", (args) => CreateSyntaxNode(nameof(setup_timing_check), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "$setup")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => data_event.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => reference_event.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => timing_check_limit.Value), new Lazy<IParser<VerilogToken>>(() => setup_timing_check_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("$setup_timing_check"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> setup_timing_check_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("setup_timing_check_optional#0", (args) => CreateSyntaxNode(nameof(setup_timing_check_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => notifier.Value.Optional(greedy: false))).Named("$setup_timing_check_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> hold_timing_check =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("hold_timing_check#0", (args) => CreateSyntaxNode(nameof(hold_timing_check), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "$hold")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => reference_event.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => data_event.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => timing_check_limit.Value), new Lazy<IParser<VerilogToken>>(() => hold_timing_check_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("$hold_timing_check"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> hold_timing_check_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("hold_timing_check_optional#0", (args) => CreateSyntaxNode(nameof(hold_timing_check_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => notifier.Value.Optional(greedy: false))).Named("$hold_timing_check_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> setuphold_timing_check =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("setuphold_timing_check#0", (args) => CreateSyntaxNode(nameof(setuphold_timing_check), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "$setuphold")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => reference_event.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => data_event.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => timing_check_limit.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => timing_check_limit.Value), new Lazy<IParser<VerilogToken>>(() => setuphold_timing_check_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("$setuphold_timing_check"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> setuphold_timing_check_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("setuphold_timing_check_optional#0", (args) => CreateSyntaxNode(nameof(setuphold_timing_check_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => notifier.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => setuphold_timing_check_optional_2.Value.Optional(greedy: false))).Named("$setuphold_timing_check_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> setuphold_timing_check_optional_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("setuphold_timing_check_optional_2#0", (args) => CreateSyntaxNode(nameof(setuphold_timing_check_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => stamptime_condition.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => setuphold_timing_check_optional_3.Value.Optional(greedy: false))).Named("$setuphold_timing_check_optional_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> setuphold_timing_check_optional_3 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("setuphold_timing_check_optional_3#0", (args) => CreateSyntaxNode(nameof(setuphold_timing_check_optional_3), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => checktime_condition.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => setuphold_timing_check_optional_4.Value.Optional(greedy: false))).Named("$setuphold_timing_check_optional_3"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> setuphold_timing_check_optional_4 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("setuphold_timing_check_optional_4#0", (args) => CreateSyntaxNode(nameof(setuphold_timing_check_optional_4), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => delayed_reference.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => setuphold_timing_check_optional_5.Value.Optional(greedy: false))).Named("$setuphold_timing_check_optional_4"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> setuphold_timing_check_optional_5 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("setuphold_timing_check_optional_5#0", (args) => CreateSyntaxNode(nameof(setuphold_timing_check_optional_5), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => delayed_data.Value.Optional(greedy: false))).Named("$setuphold_timing_check_optional_5"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> recovery_timing_check =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("recovery_timing_check#0", (args) => CreateSyntaxNode(nameof(recovery_timing_check), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "$recovery")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => reference_event.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => data_event.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => timing_check_limit.Value), new Lazy<IParser<VerilogToken>>(() => recovery_timing_check_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("$recovery_timing_check"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> recovery_timing_check_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("recovery_timing_check_optional#0", (args) => CreateSyntaxNode(nameof(recovery_timing_check_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => notifier.Value.Optional(greedy: false))).Named("$recovery_timing_check_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> removal_timing_check =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("removal_timing_check#0", (args) => CreateSyntaxNode(nameof(removal_timing_check), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "$removal")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => reference_event.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => data_event.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => timing_check_limit.Value), new Lazy<IParser<VerilogToken>>(() => removal_timing_check_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("$removal_timing_check"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> removal_timing_check_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("removal_timing_check_optional#0", (args) => CreateSyntaxNode(nameof(removal_timing_check_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => notifier.Value.Optional(greedy: false))).Named("$removal_timing_check_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> recrem_timing_check =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("recrem_timing_check#0", (args) => CreateSyntaxNode(nameof(recrem_timing_check), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "$recrem")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => reference_event.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => data_event.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => timing_check_limit.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => timing_check_limit.Value), new Lazy<IParser<VerilogToken>>(() => recrem_timing_check_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("$recrem_timing_check"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> recrem_timing_check_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("recrem_timing_check_optional#0", (args) => CreateSyntaxNode(nameof(recrem_timing_check_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => notifier.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => recrem_timing_check_optional_2.Value.Optional(greedy: false))).Named("$recrem_timing_check_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> recrem_timing_check_optional_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("recrem_timing_check_optional_2#0", (args) => CreateSyntaxNode(nameof(recrem_timing_check_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => stamptime_condition.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => recrem_timing_check_optional_3.Value.Optional(greedy: false))).Named("$recrem_timing_check_optional_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> recrem_timing_check_optional_3 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("recrem_timing_check_optional_3#0", (args) => CreateSyntaxNode(nameof(recrem_timing_check_optional_3), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => checktime_condition.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => recrem_timing_check_optional_4.Value.Optional(greedy: false))).Named("$recrem_timing_check_optional_3"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> recrem_timing_check_optional_4 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("recrem_timing_check_optional_4#0", (args) => CreateSyntaxNode(nameof(recrem_timing_check_optional_4), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => delayed_reference.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => recrem_timing_check_optional_5.Value.Optional(greedy: false))).Named("$recrem_timing_check_optional_4"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> recrem_timing_check_optional_5 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("recrem_timing_check_optional_5#0", (args) => CreateSyntaxNode(nameof(recrem_timing_check_optional_5), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => delayed_data.Value.Optional(greedy: false))).Named("$recrem_timing_check_optional_5"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> skew_timing_check =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("skew_timing_check#0", (args) => CreateSyntaxNode(nameof(skew_timing_check), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "$skew")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => reference_event.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => data_event.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => timing_check_limit.Value), new Lazy<IParser<VerilogToken>>(() => skew_timing_check_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("$skew_timing_check"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> skew_timing_check_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("skew_timing_check_optional#0", (args) => CreateSyntaxNode(nameof(skew_timing_check_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => notifier.Value.Optional(greedy: false))).Named("$skew_timing_check_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> timeskew_timing_check =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("timeskew_timing_check#0", (args) => CreateSyntaxNode(nameof(timeskew_timing_check), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "$timeskew")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => reference_event.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => data_event.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => timing_check_limit.Value), new Lazy<IParser<VerilogToken>>(() => timeskew_timing_check_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("$timeskew_timing_check"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> timeskew_timing_check_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("timeskew_timing_check_optional#0", (args) => CreateSyntaxNode(nameof(timeskew_timing_check_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => notifier.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => timeskew_timing_check_optional_2.Value.Optional(greedy: false))).Named("$timeskew_timing_check_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> timeskew_timing_check_optional_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("timeskew_timing_check_optional_2#0", (args) => CreateSyntaxNode(nameof(timeskew_timing_check_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => event_based_flag.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => timeskew_timing_check_optional_3.Value.Optional(greedy: false))).Named("$timeskew_timing_check_optional_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> timeskew_timing_check_optional_3 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("timeskew_timing_check_optional_3#0", (args) => CreateSyntaxNode(nameof(timeskew_timing_check_optional_3), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => remain_active_flag.Value.Optional(greedy: false))).Named("$timeskew_timing_check_optional_3"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> fullskew_timing_check =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("fullskew_timing_check#0", (args) => CreateSyntaxNode(nameof(fullskew_timing_check), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "$fullskew")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => reference_event.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => data_event.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => timing_check_limit.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => timing_check_limit.Value), new Lazy<IParser<VerilogToken>>(() => fullskew_timing_check_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("$fullskew_timing_check"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> fullskew_timing_check_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("fullskew_timing_check_optional#0", (args) => CreateSyntaxNode(nameof(fullskew_timing_check_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => notifier.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => fullskew_timing_check_optional_2.Value.Optional(greedy: false))).Named("$fullskew_timing_check_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> fullskew_timing_check_optional_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("fullskew_timing_check_optional_2#0", (args) => CreateSyntaxNode(nameof(fullskew_timing_check_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => event_based_flag.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => fullskew_timing_check_optional_3.Value.Optional(greedy: false))).Named("$fullskew_timing_check_optional_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> fullskew_timing_check_optional_3 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("fullskew_timing_check_optional_3#0", (args) => CreateSyntaxNode(nameof(fullskew_timing_check_optional_3), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => remain_active_flag.Value.Optional(greedy: false))).Named("$fullskew_timing_check_optional_3"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> period_timing_check =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("period_timing_check#0", (args) => CreateSyntaxNode(nameof(period_timing_check), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "$period")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => controlled_reference_event.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => timing_check_limit.Value), new Lazy<IParser<VerilogToken>>(() => period_timing_check_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("$period_timing_check"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> period_timing_check_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("period_timing_check_optional#0", (args) => CreateSyntaxNode(nameof(period_timing_check_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => notifier.Value.Optional(greedy: false))).Named("$period_timing_check_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> width_timing_check =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("width_timing_check#0", (args) => CreateSyntaxNode(nameof(width_timing_check), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "$width")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => controlled_reference_event.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => timing_check_limit.Value), new Lazy<IParser<VerilogToken>>(() => width_timing_check_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("$width_timing_check"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> width_timing_check_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("width_timing_check_optional#0", (args) => CreateSyntaxNode(nameof(width_timing_check_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => threshold.Value), new Lazy<IParser<VerilogToken>>(() => width_timing_check_optional_2.Value.Optional(greedy: false))).Named("$width_timing_check_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> width_timing_check_optional_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("width_timing_check_optional_2#0", (args) => CreateSyntaxNode(nameof(width_timing_check_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => notifier.Value)).Named("$width_timing_check_optional_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> nochange_timing_check =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("nochange_timing_check#0", (args) => CreateSyntaxNode(nameof(nochange_timing_check), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "$nochange")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => reference_event.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => data_event.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => start_edge_offset.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => end_edge_offset.Value), new Lazy<IParser<VerilogToken>>(() => nochange_timing_check_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("$nochange_timing_check"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> nochange_timing_check_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("nochange_timing_check_optional#0", (args) => CreateSyntaxNode(nameof(nochange_timing_check_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => notifier.Value.Optional(greedy: false))).Named("$nochange_timing_check_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> checktime_condition =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("checktime_condition#0", (args) => CreateSyntaxNode(nameof(checktime_condition), args), new Lazy<IParser<VerilogToken>>(() => mintypmax_expression.Value)).Named("checktime_condition"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> controlled_reference_event =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("controlled_reference_event#0", (args) => CreateSyntaxNode(nameof(controlled_reference_event), args), new Lazy<IParser<VerilogToken>>(() => controlled_timing_check_event.Value)).Named("controlled_reference_event"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> data_event =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("data_event#0", (args) => CreateSyntaxNode(nameof(data_event), args), new Lazy<IParser<VerilogToken>>(() => timing_check_event.Value)).Named("data_event"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> delayed_data =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("delayed_data#0", (args) => CreateSyntaxNode(nameof(delayed_data), args), new Lazy<IParser<VerilogToken>>(() => terminal_identifier.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("delayed_data#1", (args) => CreateSyntaxNode(nameof(delayed_data), args), new Lazy<IParser<VerilogToken>>(() => terminal_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => constant_mintypmax_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE)))).Named("delayed_data"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> delayed_reference =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("delayed_reference#0", (args) => CreateSyntaxNode(nameof(delayed_reference), args), new Lazy<IParser<VerilogToken>>(() => terminal_identifier.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("delayed_reference#1", (args) => CreateSyntaxNode(nameof(delayed_reference), args), new Lazy<IParser<VerilogToken>>(() => terminal_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => constant_mintypmax_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE)))).Named("delayed_reference"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> end_edge_offset =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("end_edge_offset#0", (args) => CreateSyntaxNode(nameof(end_edge_offset), args), new Lazy<IParser<VerilogToken>>(() => mintypmax_expression.Value)).Named("end_edge_offset"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> event_based_flag =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("event_based_flag#0", (args) => CreateSyntaxNode(nameof(event_based_flag), args), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value)).Named("event_based_flag"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> notifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("notifier#0", (args) => CreateSyntaxNode(nameof(notifier), args), new Lazy<IParser<VerilogToken>>(() => variable_identifier.Value)).Named("notifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> reference_event =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("reference_event#0", (args) => CreateSyntaxNode(nameof(reference_event), args), new Lazy<IParser<VerilogToken>>(() => timing_check_event.Value)).Named("reference_event"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> remain_active_flag =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("remain_active_flag#0", (args) => CreateSyntaxNode(nameof(remain_active_flag), args), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value)).Named("remain_active_flag"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> stamptime_condition =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("stamptime_condition#0", (args) => CreateSyntaxNode(nameof(stamptime_condition), args), new Lazy<IParser<VerilogToken>>(() => mintypmax_expression.Value)).Named("stamptime_condition"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> start_edge_offset =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("start_edge_offset#0", (args) => CreateSyntaxNode(nameof(start_edge_offset), args), new Lazy<IParser<VerilogToken>>(() => mintypmax_expression.Value)).Named("start_edge_offset"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> threshold =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("threshold#0", (args) => CreateSyntaxNode(nameof(threshold), args), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value)).Named("threshold"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> timing_check_limit =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("timing_check_limit#0", (args) => CreateSyntaxNode(nameof(timing_check_limit), args), new Lazy<IParser<VerilogToken>>(() => expression.Value)).Named("timing_check_limit"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> timing_check_event =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("timing_check_event#0", (args) => CreateSyntaxNode(nameof(timing_check_event), args), new Lazy<IParser<VerilogToken>>(() => timing_check_event_control.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => specify_terminal_descriptor.Value), new Lazy<IParser<VerilogToken>>(() => timing_check_event_optional.Value.Optional(greedy: false))).Named("timing_check_event"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> timing_check_event_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("timing_check_event_optional#0", (args) => CreateSyntaxNode(nameof(timing_check_event_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "&&&")), new Lazy<IParser<VerilogToken>>(() => timing_check_condition.Value)).Named("timing_check_event_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> controlled_timing_check_event =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("controlled_timing_check_event#0", (args) => CreateSyntaxNode(nameof(controlled_timing_check_event), args), new Lazy<IParser<VerilogToken>>(() => timing_check_event_control.Value), new Lazy<IParser<VerilogToken>>(() => specify_terminal_descriptor.Value), new Lazy<IParser<VerilogToken>>(() => controlled_timing_check_event_optional.Value.Optional(greedy: false))).Named("controlled_timing_check_event"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> controlled_timing_check_event_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("controlled_timing_check_event_optional#0", (args) => CreateSyntaxNode(nameof(controlled_timing_check_event_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "&&&")), new Lazy<IParser<VerilogToken>>(() => timing_check_condition.Value)).Named("controlled_timing_check_event_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> timing_check_event_control =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("timing_check_event_control#0", (args) => CreateSyntaxNode(nameof(timing_check_event_control), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "posedge")))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("timing_check_event_control#1", (args) => CreateSyntaxNode(nameof(timing_check_event_control), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "negedge")))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("timing_check_event_control#2", (args) => CreateSyntaxNode(nameof(timing_check_event_control), args), new Lazy<IParser<VerilogToken>>(() => edge_control_specifier.Value)))).Named("timing_check_event_control"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> specify_terminal_descriptor =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("specify_terminal_descriptor#0", (args) => CreateSyntaxNode(nameof(specify_terminal_descriptor), args), new Lazy<IParser<VerilogToken>>(() => specify_input_terminal_descriptor.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("specify_terminal_descriptor#1", (args) => CreateSyntaxNode(nameof(specify_terminal_descriptor), args), new Lazy<IParser<VerilogToken>>(() => specify_output_terminal_descriptor.Value))).Named("specify_terminal_descriptor"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> edge_control_specifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("edge_control_specifier#0", (args) => CreateSyntaxNode(nameof(edge_control_specifier), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "edge")), new Lazy<IParser<VerilogToken>>(() => edge_control_specifier_optional.Value.Optional(greedy: false))).Named("edge_control_specifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> edge_control_specifier_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("edge_control_specifier_optional#0", (args) => CreateSyntaxNode(nameof(edge_control_specifier_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "edge_descriptor")), new Lazy<IParser<VerilogToken>>(() => edge_control_specifier_many.Value.Many(greedy: true))).Named("edge_control_specifier_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> edge_control_specifier_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("edge_control_specifier_many#0", (args) => CreateSyntaxNode(nameof(edge_control_specifier_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "edge_descriptor"))).Named("edge_control_specifier_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> edge_descriptor2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("edge_descriptor2#0", (args) => CreateSyntaxNode(nameof(edge_descriptor2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "01")))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("edge_descriptor2#1", (args) => CreateSyntaxNode(nameof(edge_descriptor2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "10")))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("edge_descriptor2#2", (args) => CreateSyntaxNode(nameof(edge_descriptor2), args), new Lazy<IParser<VerilogToken>>(() => z_or_x.Value), new Lazy<IParser<VerilogToken>>(() => zero_or_one.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("edge_descriptor2#3", (args) => CreateSyntaxNode(nameof(edge_descriptor2), args), new Lazy<IParser<VerilogToken>>(() => zero_or_one.Value), new Lazy<IParser<VerilogToken>>(() => z_or_x.Value))))).Named("edge_descriptor2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> zero_or_one =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("zero_or_one#0", (args) => CreateSyntaxNode(nameof(zero_or_one), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('0')))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("zero_or_one#1", (args) => CreateSyntaxNode(nameof(zero_or_one), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('1')))).Named("zero_or_one"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> z_or_x =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("z_or_x#0", (args) => CreateSyntaxNode(nameof(z_or_x), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('x')))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("z_or_x#1", (args) => CreateSyntaxNode(nameof(z_or_x), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('X')))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("z_or_x#2", (args) => CreateSyntaxNode(nameof(z_or_x), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('z')))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("z_or_x#3", (args) => CreateSyntaxNode(nameof(z_or_x), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('Z')))))).Named("z_or_x"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> timing_check_condition =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("timing_check_condition#0", (args) => CreateSyntaxNode(nameof(timing_check_condition), args), new Lazy<IParser<VerilogToken>>(() => scalar_timing_check_condition.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("timing_check_condition#1", (args) => CreateSyntaxNode(nameof(timing_check_condition), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => scalar_timing_check_condition.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))).Named("timing_check_condition"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> scalar_timing_check_condition =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("scalar_timing_check_condition#0", (args) => CreateSyntaxNode(nameof(scalar_timing_check_condition), args), new Lazy<IParser<VerilogToken>>(() => expression.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("scalar_timing_check_condition#1", (args) => CreateSyntaxNode(nameof(scalar_timing_check_condition), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.TYLDA)), new Lazy<IParser<VerilogToken>>(() => expression.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("scalar_timing_check_condition#2", (args) => CreateSyntaxNode(nameof(scalar_timing_check_condition), args), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL_DOUBLE)), new Lazy<IParser<VerilogToken>>(() => scalar_constant.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("scalar_timing_check_condition#3", (args) => CreateSyntaxNode(nameof(scalar_timing_check_condition), args), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.GREATER_OR_EQUAL)), new Lazy<IParser<VerilogToken>>(() => scalar_constant.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("scalar_timing_check_condition#4", (args) => CreateSyntaxNode(nameof(scalar_timing_check_condition), args), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL_NOT)), new Lazy<IParser<VerilogToken>>(() => scalar_constant.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("scalar_timing_check_condition#5", (args) => CreateSyntaxNode(nameof(scalar_timing_check_condition), args), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL_DOUBLE_NOT)), new Lazy<IParser<VerilogToken>>(() => scalar_constant.Value))))))).Named("scalar_timing_check_condition"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> scalar_constant =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("scalar_constant#0", (args) => CreateSyntaxNode(nameof(scalar_constant), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "1'b0")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("scalar_constant#1", (args) => CreateSyntaxNode(nameof(scalar_constant), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "1'b1")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("scalar_constant#2", (args) => CreateSyntaxNode(nameof(scalar_constant), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "1'B0")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("scalar_constant#3", (args) => CreateSyntaxNode(nameof(scalar_constant), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "1'B1")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("scalar_constant#4", (args) => CreateSyntaxNode(nameof(scalar_constant), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "'b0")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("scalar_constant#5", (args) => CreateSyntaxNode(nameof(scalar_constant), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "'b1")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("scalar_constant#6", (args) => CreateSyntaxNode(nameof(scalar_constant), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "'B0")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("scalar_constant#7", (args) => CreateSyntaxNode(nameof(scalar_constant), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "'B1")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("scalar_constant#8", (args) => CreateSyntaxNode(nameof(scalar_constant), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('1')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("scalar_constant#9", (args) => CreateSyntaxNode(nameof(scalar_constant), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('0')))))))))))).Named("scalar_constant"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_concatenation =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_concatenation#0", (args) => CreateSyntaxNode(nameof(analog_concatenation), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SHARP2)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_concatenation_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SHARP2))).Named("analog_concatenation"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_concatenation_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_concatenation_many#0", (args) => CreateSyntaxNode(nameof(analog_concatenation_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value)).Named("analog_concatenation_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_multiple_concatenation =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_multiple_concatenation#0", (args) => CreateSyntaxNode(nameof(analog_multiple_concatenation), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SHARP2)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_concatenation.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SHARP2))).Named("analog_multiple_concatenation"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_filter_function_arg =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_arg#0", (args) => CreateSyntaxNode(nameof(analog_filter_function_arg), args), new Lazy<IParser<VerilogToken>>(() => parameter_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => msb_constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => lsb_constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_arg#1", (args) => CreateSyntaxNode(nameof(analog_filter_function_arg), args), new Lazy<IParser<VerilogToken>>(() => parameter_identifier.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_arg#2", (args) => CreateSyntaxNode(nameof(analog_filter_function_arg), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "constant_optional_arrayinit"))))).Named("analog_filter_function_arg"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> concatenation =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("concatenation#0", (args) => CreateSyntaxNode(nameof(concatenation), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SHARP2)), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => concatenation_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SHARP2))).Named("concatenation"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> concatenation_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("concatenation_many#0", (args) => CreateSyntaxNode(nameof(concatenation_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => expression.Value)).Named("concatenation_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_concatenation =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_concatenation#0", (args) => CreateSyntaxNode(nameof(constant_concatenation), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SHARP2)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => constant_concatenation_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SHARP2))).Named("constant_concatenation"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_concatenation_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_concatenation_many#0", (args) => CreateSyntaxNode(nameof(constant_concatenation_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value)).Named("constant_concatenation_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_multiple_concatenation =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_multiple_concatenation#0", (args) => CreateSyntaxNode(nameof(constant_multiple_concatenation), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SHARP2)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => constant_concatenation.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SHARP2))).Named("constant_multiple_concatenation"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> module_path_concatenation =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("module_path_concatenation#0", (args) => CreateSyntaxNode(nameof(module_path_concatenation), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SHARP2)), new Lazy<IParser<VerilogToken>>(() => module_path_expression.Value), new Lazy<IParser<VerilogToken>>(() => module_path_concatenation_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SHARP2))).Named("module_path_concatenation"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> module_path_concatenation_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("module_path_concatenation_many#0", (args) => CreateSyntaxNode(nameof(module_path_concatenation_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => module_path_expression.Value)).Named("module_path_concatenation_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> module_path_multiple_concatenation =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("module_path_multiple_concatenation#0", (args) => CreateSyntaxNode(nameof(module_path_multiple_concatenation), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SHARP2)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => module_path_concatenation.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SHARP2))).Named("module_path_multiple_concatenation"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> multiple_concatenation =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("multiple_concatenation#0", (args) => CreateSyntaxNode(nameof(multiple_concatenation), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SHARP2)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => concatenation.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SHARP2))).Named("multiple_concatenation"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> assignment_pattern =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("assignment_pattern#0", (args) => CreateSyntaxNode(nameof(assignment_pattern), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SHARP2)), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => assignment_pattern_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SHARP2)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("assignment_pattern#1", (args) => CreateSyntaxNode(nameof(assignment_pattern), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SHARP2)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SHARP2)), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => assignment_pattern_many_2.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SHARP2)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SHARP2)))).Named("assignment_pattern"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> assignment_pattern_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("assignment_pattern_many#0", (args) => CreateSyntaxNode(nameof(assignment_pattern_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => expression.Value)).Named("assignment_pattern_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> assignment_pattern_many_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("assignment_pattern_many_2#0", (args) => CreateSyntaxNode(nameof(assignment_pattern_many_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => expression.Value)).Named("assignment_pattern_many_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_assignment_pattern =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_assignment_pattern#0", (args) => CreateSyntaxNode(nameof(constant_assignment_pattern), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "'{")), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => constant_assignment_pattern_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SHARP2)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("constant_assignment_pattern#1", (args) => CreateSyntaxNode(nameof(constant_assignment_pattern), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "'{")), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SHARP2)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => constant_assignment_pattern_many_2.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SHARP2)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SHARP2)))).Named("constant_assignment_pattern"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_assignment_pattern_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_assignment_pattern_many#0", (args) => CreateSyntaxNode(nameof(constant_assignment_pattern_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value)).Named("constant_assignment_pattern_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_assignment_pattern_many_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_assignment_pattern_many_2#0", (args) => CreateSyntaxNode(nameof(constant_assignment_pattern_many_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value)).Named("constant_assignment_pattern_many_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_arrayinit =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_arrayinit#0", (args) => CreateSyntaxNode(nameof(constant_arrayinit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "'{")), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => constant_arrayinit_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SHARP2))).Named("constant_arrayinit"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_arrayinit_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_arrayinit_many#0", (args) => CreateSyntaxNode(nameof(constant_arrayinit_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value)).Named("constant_arrayinit_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_function_call =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_call#0", (args) => CreateSyntaxNode(nameof(analog_function_call), args), new Lazy<IParser<VerilogToken>>(() => analog_function_identifier.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_function_call_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("analog_function_call"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_function_call_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_call_many#0", (args) => CreateSyntaxNode(nameof(analog_function_call_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value)).Named("analog_function_call_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_system_function_call =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_system_function_call#0", (args) => CreateSyntaxNode(nameof(analog_system_function_call), args), new Lazy<IParser<VerilogToken>>(() => analog_system_function_identifier.Value), new Lazy<IParser<VerilogToken>>(() => analog_system_function_call_optional.Value.Optional(greedy: false))).Named("analog_system_function_call"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_system_function_call_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_system_function_call_optional#0", (args) => CreateSyntaxNode(nameof(analog_system_function_call_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => analog_system_function_call_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("analog_system_function_call_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_system_function_call_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_system_function_call_many#0", (args) => CreateSyntaxNode(nameof(analog_system_function_call_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value.Optional(greedy: false))).Named("analog_system_function_call_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_built_in_function_call =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_built_in_function_call#0", (args) => CreateSyntaxNode(nameof(analog_built_in_function_call), args), new Lazy<IParser<VerilogToken>>(() => analog_built_in_function_name.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_built_in_function_call_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("analog_built_in_function_call"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_built_in_function_call_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_built_in_function_call_optional#0", (args) => CreateSyntaxNode(nameof(analog_built_in_function_call_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value)).Named("analog_built_in_function_call_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_built_in_function_name =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_built_in_function_name#0", (args) => CreateSyntaxNode(nameof(analog_built_in_function_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "ln")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_built_in_function_name#1", (args) => CreateSyntaxNode(nameof(analog_built_in_function_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "log")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_built_in_function_name#2", (args) => CreateSyntaxNode(nameof(analog_built_in_function_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "exp")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_built_in_function_name#3", (args) => CreateSyntaxNode(nameof(analog_built_in_function_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "sqrt")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_built_in_function_name#4", (args) => CreateSyntaxNode(nameof(analog_built_in_function_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "min")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_built_in_function_name#5", (args) => CreateSyntaxNode(nameof(analog_built_in_function_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "max")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_built_in_function_name#6", (args) => CreateSyntaxNode(nameof(analog_built_in_function_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "abs")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_built_in_function_name#7", (args) => CreateSyntaxNode(nameof(analog_built_in_function_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "pow")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_built_in_function_name#8", (args) => CreateSyntaxNode(nameof(analog_built_in_function_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "floor")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_built_in_function_name#9", (args) => CreateSyntaxNode(nameof(analog_built_in_function_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "ceil")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_built_in_function_name#10", (args) => CreateSyntaxNode(nameof(analog_built_in_function_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "tanh")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_built_in_function_name#11", (args) => CreateSyntaxNode(nameof(analog_built_in_function_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "asinh")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_built_in_function_name#12", (args) => CreateSyntaxNode(nameof(analog_built_in_function_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "acosh")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_built_in_function_name#13", (args) => CreateSyntaxNode(nameof(analog_built_in_function_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "atan2")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_built_in_function_name#14", (args) => CreateSyntaxNode(nameof(analog_built_in_function_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "atanh")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_built_in_function_name#15", (args) => CreateSyntaxNode(nameof(analog_built_in_function_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "hypot")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_built_in_function_name#16", (args) => CreateSyntaxNode(nameof(analog_built_in_function_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "sinh")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_built_in_function_name#17", (args) => CreateSyntaxNode(nameof(analog_built_in_function_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "sin")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_built_in_function_name#18", (args) => CreateSyntaxNode(nameof(analog_built_in_function_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "cosh")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_built_in_function_name#19", (args) => CreateSyntaxNode(nameof(analog_built_in_function_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "cos")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_built_in_function_name#20", (args) => CreateSyntaxNode(nameof(analog_built_in_function_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "tan")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_built_in_function_name#21", (args) => CreateSyntaxNode(nameof(analog_built_in_function_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "asin")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_built_in_function_name#22", (args) => CreateSyntaxNode(nameof(analog_built_in_function_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "acos")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_built_in_function_name#23", (args) => CreateSyntaxNode(nameof(analog_built_in_function_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "atan")))))))))))))))))))))))))).Named("analog_built_in_function_name"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analysis_function_call =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analysis_function_call#0", (args) => CreateSyntaxNode(nameof(analysis_function_call), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "analysis")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "\"")), new Lazy<IParser<VerilogToken>>(() => analysis_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "\"")), new Lazy<IParser<VerilogToken>>(() => analysis_function_call_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("analysis_function_call"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analysis_function_call_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analysis_function_call_many#0", (args) => CreateSyntaxNode(nameof(analysis_function_call_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "\"")), new Lazy<IParser<VerilogToken>>(() => analysis_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "\""))).Named("analysis_function_call_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_filter_function_call =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call#0", (args) => CreateSyntaxNode(nameof(analog_filter_function_call), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "ddt")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_filter_function_call_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call#1", (args) => CreateSyntaxNode(nameof(analog_filter_function_call), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "ddx")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => branch_probe_function_call.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call#2", (args) => CreateSyntaxNode(nameof(analog_filter_function_call), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "idt")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_filter_function_call_optional_2.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call#3", (args) => CreateSyntaxNode(nameof(analog_filter_function_call), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "idtmod")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_filter_function_call_optional_3.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call#4", (args) => CreateSyntaxNode(nameof(analog_filter_function_call), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "absdelay")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_filter_function_call_optional_4.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call#5", (args) => CreateSyntaxNode(nameof(analog_filter_function_call), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "transition")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_filter_function_call_optional_5.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call#6", (args) => CreateSyntaxNode(nameof(analog_filter_function_call), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "slew")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_filter_function_call_optional_6.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call#7", (args) => CreateSyntaxNode(nameof(analog_filter_function_call), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "last_crossing")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_filter_function_call_optional_7.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call#8", (args) => CreateSyntaxNode(nameof(analog_filter_function_call), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "limexp")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call#9", (args) => CreateSyntaxNode(nameof(analog_filter_function_call), args), new Lazy<IParser<VerilogToken>>(() => laplace_filter_name.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_filter_function_arg.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_filter_function_arg.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => analog_filter_function_call_optional_8.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call#10", (args) => CreateSyntaxNode(nameof(analog_filter_function_call), args), new Lazy<IParser<VerilogToken>>(() => zi_filter_name.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_filter_function_arg.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_filter_function_arg.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_filter_function_call_optional_9.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))))))))))))).Named("analog_filter_function_call"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_filter_function_call_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call_optional#0", (args) => CreateSyntaxNode(nameof(analog_filter_function_call_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => abstol_expression.Value)).Named("analog_filter_function_call_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_filter_function_call_optional_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call_optional_2#0", (args) => CreateSyntaxNode(nameof(analog_filter_function_call_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_filter_function_call_optional_10.Value.Optional(greedy: false))).Named("analog_filter_function_call_optional_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_filter_function_call_optional_3 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call_optional_3#0", (args) => CreateSyntaxNode(nameof(analog_filter_function_call_optional_3), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_filter_function_call_optional_11.Value.Optional(greedy: false))).Named("analog_filter_function_call_optional_3"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_filter_function_call_optional_4 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call_optional_4#0", (args) => CreateSyntaxNode(nameof(analog_filter_function_call_optional_4), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value)).Named("analog_filter_function_call_optional_4"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_filter_function_call_optional_5 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call_optional_5#0", (args) => CreateSyntaxNode(nameof(analog_filter_function_call_optional_5), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_filter_function_call_optional_12.Value.Optional(greedy: false))).Named("analog_filter_function_call_optional_5"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_filter_function_call_optional_6 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call_optional_6#0", (args) => CreateSyntaxNode(nameof(analog_filter_function_call_optional_6), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_filter_function_call_optional_13.Value.Optional(greedy: false))).Named("analog_filter_function_call_optional_6"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_filter_function_call_optional_7 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call_optional_7#0", (args) => CreateSyntaxNode(nameof(analog_filter_function_call_optional_7), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value)).Named("analog_filter_function_call_optional_7"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_filter_function_call_optional_8 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call_optional_8#0", (args) => CreateSyntaxNode(nameof(analog_filter_function_call_optional_8), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value)).Named("analog_filter_function_call_optional_8"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_filter_function_call_optional_9 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call_optional_9#0", (args) => CreateSyntaxNode(nameof(analog_filter_function_call_optional_9), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_filter_function_call_optional_14.Value.Optional(greedy: false))).Named("analog_filter_function_call_optional_9"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_filter_function_call_optional_10 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call_optional_10#0", (args) => CreateSyntaxNode(nameof(analog_filter_function_call_optional_10), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_filter_function_call_optional_15.Value.Optional(greedy: false))).Named("analog_filter_function_call_optional_10"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_filter_function_call_optional_11 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call_optional_11#0", (args) => CreateSyntaxNode(nameof(analog_filter_function_call_optional_11), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_filter_function_call_optional_16.Value.Optional(greedy: false))).Named("analog_filter_function_call_optional_11"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_filter_function_call_optional_12 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call_optional_12#0", (args) => CreateSyntaxNode(nameof(analog_filter_function_call_optional_12), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_filter_function_call_optional_17.Value.Optional(greedy: false))).Named("analog_filter_function_call_optional_12"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_filter_function_call_optional_13 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call_optional_13#0", (args) => CreateSyntaxNode(nameof(analog_filter_function_call_optional_13), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value)).Named("analog_filter_function_call_optional_13"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_filter_function_call_optional_14 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call_optional_14#0", (args) => CreateSyntaxNode(nameof(analog_filter_function_call_optional_14), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value)).Named("analog_filter_function_call_optional_14"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_filter_function_call_optional_15 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call_optional_15#0", (args) => CreateSyntaxNode(nameof(analog_filter_function_call_optional_15), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => abstol_expression.Value)).Named("analog_filter_function_call_optional_15"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_filter_function_call_optional_16 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call_optional_16#0", (args) => CreateSyntaxNode(nameof(analog_filter_function_call_optional_16), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_filter_function_call_optional_18.Value.Optional(greedy: false))).Named("analog_filter_function_call_optional_16"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_filter_function_call_optional_17 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call_optional_17#0", (args) => CreateSyntaxNode(nameof(analog_filter_function_call_optional_17), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_filter_function_call_optional_19.Value.Optional(greedy: false))).Named("analog_filter_function_call_optional_17"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_filter_function_call_optional_18 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call_optional_18#0", (args) => CreateSyntaxNode(nameof(analog_filter_function_call_optional_18), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => abstol_expression.Value)).Named("analog_filter_function_call_optional_18"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_filter_function_call_optional_19 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_filter_function_call_optional_19#0", (args) => CreateSyntaxNode(nameof(analog_filter_function_call_optional_19), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value)).Named("analog_filter_function_call_optional_19"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_small_signal_function_call =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_small_signal_function_call#0", (args) => CreateSyntaxNode(nameof(analog_small_signal_function_call), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "ac_stim")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_small_signal_function_call_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("analog_small_signal_function_call#1", (args) => CreateSyntaxNode(nameof(analog_small_signal_function_call), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "white_noise")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_small_signal_function_call_optional_2.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("analog_small_signal_function_call#2", (args) => CreateSyntaxNode(nameof(analog_small_signal_function_call), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "flicker_noise")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_small_signal_function_call_optional_3.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("analog_small_signal_function_call#3", (args) => CreateSyntaxNode(nameof(analog_small_signal_function_call), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "noise_table")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => noise_table_input_arg.Value), new Lazy<IParser<VerilogToken>>(() => analog_small_signal_function_call_optional_4.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("analog_small_signal_function_call#4", (args) => CreateSyntaxNode(nameof(analog_small_signal_function_call), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "noise_table_log")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => noise_table_input_arg.Value), new Lazy<IParser<VerilogToken>>(() => analog_small_signal_function_call_optional_5.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))))))).Named("analog_small_signal_function_call"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_small_signal_function_call_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_small_signal_function_call_optional#0", (args) => CreateSyntaxNode(nameof(analog_small_signal_function_call_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "\"")), new Lazy<IParser<VerilogToken>>(() => analysis_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "\"")), new Lazy<IParser<VerilogToken>>(() => analog_small_signal_function_call_optional_6.Value.Optional(greedy: false))).Named("analog_small_signal_function_call_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_small_signal_function_call_optional_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_small_signal_function_call_optional_2#0", (args) => CreateSyntaxNode(nameof(analog_small_signal_function_call_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => @string.Value)).Named("analog_small_signal_function_call_optional_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_small_signal_function_call_optional_3 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_small_signal_function_call_optional_3#0", (args) => CreateSyntaxNode(nameof(analog_small_signal_function_call_optional_3), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => @string.Value)).Named("analog_small_signal_function_call_optional_3"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_small_signal_function_call_optional_4 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_small_signal_function_call_optional_4#0", (args) => CreateSyntaxNode(nameof(analog_small_signal_function_call_optional_4), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => @string.Value)).Named("analog_small_signal_function_call_optional_4"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_small_signal_function_call_optional_5 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_small_signal_function_call_optional_5#0", (args) => CreateSyntaxNode(nameof(analog_small_signal_function_call_optional_5), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => @string.Value)).Named("analog_small_signal_function_call_optional_5"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_small_signal_function_call_optional_6 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_small_signal_function_call_optional_6#0", (args) => CreateSyntaxNode(nameof(analog_small_signal_function_call_optional_6), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_small_signal_function_call_optional_7.Value.Optional(greedy: false))).Named("analog_small_signal_function_call_optional_6"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_small_signal_function_call_optional_7 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_small_signal_function_call_optional_7#0", (args) => CreateSyntaxNode(nameof(analog_small_signal_function_call_optional_7), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value)).Named("analog_small_signal_function_call_optional_7"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> noise_table_input_arg =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("noise_table_input_arg#0", (args) => CreateSyntaxNode(nameof(noise_table_input_arg), args), new Lazy<IParser<VerilogToken>>(() => parameter_identifier.Value), new Lazy<IParser<VerilogToken>>(() => noise_table_input_arg_optional.Value.Optional(greedy: false)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("noise_table_input_arg#1", (args) => CreateSyntaxNode(nameof(noise_table_input_arg), args), new Lazy<IParser<VerilogToken>>(() => parameter_identifier.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("noise_table_input_arg#2", (args) => CreateSyntaxNode(nameof(noise_table_input_arg), args), new Lazy<IParser<VerilogToken>>(() => @string.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("noise_table_input_arg#3", (args) => CreateSyntaxNode(nameof(noise_table_input_arg), args), new Lazy<IParser<VerilogToken>>(() => constant_arrayinit.Value))))).Named("noise_table_input_arg"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> noise_table_input_arg_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("noise_table_input_arg_optional#0", (args) => CreateSyntaxNode(nameof(noise_table_input_arg_optional), args), new Lazy<IParser<VerilogToken>>(() => msb_constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => lsb_constant_expression.Value)).Named("noise_table_input_arg_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> laplace_filter_name =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("laplace_filter_name#0", (args) => CreateSyntaxNode(nameof(laplace_filter_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "laplace_zd")))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("laplace_filter_name#1", (args) => CreateSyntaxNode(nameof(laplace_filter_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "laplace_zp")))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("laplace_filter_name#2", (args) => CreateSyntaxNode(nameof(laplace_filter_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "laplace_np")))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("laplace_filter_name#3", (args) => CreateSyntaxNode(nameof(laplace_filter_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "laplace_nd")))))).Named("laplace_filter_name"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> zi_filter_name =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("zi_filter_name#0", (args) => CreateSyntaxNode(nameof(zi_filter_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "zi_zp")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("zi_filter_name#1", (args) => CreateSyntaxNode(nameof(zi_filter_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "zi_zd")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("zi_filter_name#2", (args) => CreateSyntaxNode(nameof(zi_filter_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "zi_np")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("zi_filter_name#3", (args) => CreateSyntaxNode(nameof(zi_filter_name), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "zi_nd")))))).Named("zi_filter_name"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> nature_access_function =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("nature_access_function#0", (args) => CreateSyntaxNode(nameof(nature_access_function), args), new Lazy<IParser<VerilogToken>>(() => nature_attribute_identifier.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("nature_access_function#1", (args) => CreateSyntaxNode(nameof(nature_access_function), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "potential")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("nature_access_function#2", (args) => CreateSyntaxNode(nameof(nature_access_function), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "flow"))))).Named("nature_access_function"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> branch_probe_function_call =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("branch_probe_function_call#0", (args) => CreateSyntaxNode(nameof(branch_probe_function_call), args), new Lazy<IParser<VerilogToken>>(() => nature_access_function.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => branch_reference.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("branch_probe_function_call#1", (args) => CreateSyntaxNode(nameof(branch_probe_function_call), args), new Lazy<IParser<VerilogToken>>(() => nature_access_function.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_net_reference.Value), new Lazy<IParser<VerilogToken>>(() => branch_probe_function_call_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))).Named("branch_probe_function_call"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> branch_probe_function_call_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("branch_probe_function_call_optional#0", (args) => CreateSyntaxNode(nameof(branch_probe_function_call_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_net_reference.Value)).Named("branch_probe_function_call_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> port_probe_function_call =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("port_probe_function_call#0", (args) => CreateSyntaxNode(nameof(port_probe_function_call), args), new Lazy<IParser<VerilogToken>>(() => nature_attribute_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LESS)), new Lazy<IParser<VerilogToken>>(() => analog_port_reference.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.GREATER)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("port_probe_function_call"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_analog_function_call =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_analog_function_call#0", (args) => CreateSyntaxNode(nameof(constant_analog_function_call), args), new Lazy<IParser<VerilogToken>>(() => analog_function_identifier.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => constant_analog_function_call_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("constant_analog_function_call"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_analog_function_call_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_analog_function_call_many#0", (args) => CreateSyntaxNode(nameof(constant_analog_function_call_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value)).Named("constant_analog_function_call_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_function_call =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_function_call#0", (args) => CreateSyntaxNode(nameof(constant_function_call), args), new Lazy<IParser<VerilogToken>>(() => function_identifier.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => constant_function_call_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("constant_function_call"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_function_call_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_function_call_many#0", (args) => CreateSyntaxNode(nameof(constant_function_call_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value)).Named("constant_function_call_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_system_function_call =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_system_function_call#0", (args) => CreateSyntaxNode(nameof(constant_system_function_call), args), new Lazy<IParser<VerilogToken>>(() => system_function_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => constant_system_function_call_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("constant_system_function_call"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_system_function_call_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_system_function_call_many#0", (args) => CreateSyntaxNode(nameof(constant_system_function_call_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value)).Named("constant_system_function_call_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_analog_built_in_function_call =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_analog_built_in_function_call#0", (args) => CreateSyntaxNode(nameof(constant_analog_built_in_function_call), args), new Lazy<IParser<VerilogToken>>(() => analog_built_in_function_name.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => constant_analog_built_in_function_call_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("constant_analog_built_in_function_call"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_analog_built_in_function_call_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_analog_built_in_function_call_optional#0", (args) => CreateSyntaxNode(nameof(constant_analog_built_in_function_call_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value)).Named("constant_analog_built_in_function_call_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> function_call =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("function_call#0", (args) => CreateSyntaxNode(nameof(function_call), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_function_identifier.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => function_call_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("function_call"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> function_call_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("function_call_many#0", (args) => CreateSyntaxNode(nameof(function_call_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => expression.Value)).Named("function_call_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> system_function_call =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("system_function_call#0", (args) => CreateSyntaxNode(nameof(system_function_call), args), new Lazy<IParser<VerilogToken>>(() => system_function_identifier.Value), new Lazy<IParser<VerilogToken>>(() => system_function_call_optional.Value.Optional(greedy: false))).Named("system_function_call"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> system_function_call_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("system_function_call_optional#0", (args) => CreateSyntaxNode(nameof(system_function_call_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => system_function_call_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))).Named("system_function_call_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> system_function_call_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("system_function_call_many#0", (args) => CreateSyntaxNode(nameof(system_function_call_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => expression.Value)).Named("system_function_call_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_conditional_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_conditional_expression#0", (args) => CreateSyntaxNode(nameof(analog_conditional_expression), args), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.QUESTION)), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value)).Named("analog_conditional_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_expression#0", (args) => CreateSyntaxNode(nameof(analog_expression), args), new Lazy<IParser<VerilogToken>>(() => analog_expression_10.Value), new Lazy<IParser<VerilogToken>>(() => analog_expression_prim.Value)).Named("analog_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_expression_10 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_expression_10#0", (args) => CreateSyntaxNode(nameof(analog_expression_10), args), new Lazy<IParser<VerilogToken>>(() => analog_expression_9.Value), new Lazy<IParser<VerilogToken>>(() => analog_expression_10_many.Value.Many(greedy: true))).Named("analog_expression_10"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_expression_10_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_expression_10_many#0", (args) => CreateSyntaxNode(nameof(analog_expression_10_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_10.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_expression_9.Value)).Named("analog_expression_10_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_expression_9 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_expression_9#0", (args) => CreateSyntaxNode(nameof(analog_expression_9), args), new Lazy<IParser<VerilogToken>>(() => analog_expression_8.Value), new Lazy<IParser<VerilogToken>>(() => analog_expression_9_many.Value.Many(greedy: true))).Named("analog_expression_9"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_expression_9_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_expression_9_many#0", (args) => CreateSyntaxNode(nameof(analog_expression_9_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_9.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_expression_8.Value)).Named("analog_expression_9_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_expression_8 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_expression_8#0", (args) => CreateSyntaxNode(nameof(analog_expression_8), args), new Lazy<IParser<VerilogToken>>(() => analog_expression_7.Value), new Lazy<IParser<VerilogToken>>(() => analog_expression_8_many.Value.Many(greedy: true))).Named("analog_expression_8"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_expression_8_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_expression_8_many#0", (args) => CreateSyntaxNode(nameof(analog_expression_8_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_8.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_expression_7.Value)).Named("analog_expression_8_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_expression_7 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_expression_7#0", (args) => CreateSyntaxNode(nameof(analog_expression_7), args), new Lazy<IParser<VerilogToken>>(() => analog_expression_6.Value), new Lazy<IParser<VerilogToken>>(() => analog_expression_7_many.Value.Many(greedy: true))).Named("analog_expression_7"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_expression_7_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_expression_7_many#0", (args) => CreateSyntaxNode(nameof(analog_expression_7_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_7.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_expression_6.Value)).Named("analog_expression_7_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_expression_6 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_expression_6#0", (args) => CreateSyntaxNode(nameof(analog_expression_6), args), new Lazy<IParser<VerilogToken>>(() => analog_expression_5.Value), new Lazy<IParser<VerilogToken>>(() => analog_expression_6_many.Value.Many(greedy: true))).Named("analog_expression_6"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_expression_6_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_expression_6_many#0", (args) => CreateSyntaxNode(nameof(analog_expression_6_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_6.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_expression_5.Value)).Named("analog_expression_6_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_expression_5 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_expression_5#0", (args) => CreateSyntaxNode(nameof(analog_expression_5), args), new Lazy<IParser<VerilogToken>>(() => analog_expression_4.Value), new Lazy<IParser<VerilogToken>>(() => analog_expression_5_many.Value.Many(greedy: true))).Named("analog_expression_5"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_expression_5_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_expression_5_many#0", (args) => CreateSyntaxNode(nameof(analog_expression_5_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_5.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_expression_4.Value)).Named("analog_expression_5_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_expression_4 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_expression_4#0", (args) => CreateSyntaxNode(nameof(analog_expression_4), args), new Lazy<IParser<VerilogToken>>(() => analog_expression_3.Value), new Lazy<IParser<VerilogToken>>(() => analog_expression_4_many.Value.Many(greedy: true))).Named("analog_expression_4"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_expression_4_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_expression_4_many#0", (args) => CreateSyntaxNode(nameof(analog_expression_4_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_4.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_expression_3.Value)).Named("analog_expression_4_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_expression_3 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_expression_3#0", (args) => CreateSyntaxNode(nameof(analog_expression_3), args), new Lazy<IParser<VerilogToken>>(() => analog_expression_2.Value), new Lazy<IParser<VerilogToken>>(() => analog_expression_3_many.Value.Many(greedy: true))).Named("analog_expression_3"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_expression_3_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_expression_3_many#0", (args) => CreateSyntaxNode(nameof(analog_expression_3_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_3.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_expression_2.Value)).Named("analog_expression_3_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_expression_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_expression_2#0", (args) => CreateSyntaxNode(nameof(analog_expression_2), args), new Lazy<IParser<VerilogToken>>(() => analog_expression_1.Value), new Lazy<IParser<VerilogToken>>(() => analog_expression_2_many.Value.Many(greedy: true))).Named("analog_expression_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_expression_2_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_expression_2_many#0", (args) => CreateSyntaxNode(nameof(analog_expression_2_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_2.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_expression_1.Value)).Named("analog_expression_2_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_expression_1 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_expression_1#0", (args) => CreateSyntaxNode(nameof(analog_expression_1), args), new Lazy<IParser<VerilogToken>>(() => analog_expression_0.Value), new Lazy<IParser<VerilogToken>>(() => analog_expression_1_many.Value.Many(greedy: true))).Named("analog_expression_1"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_expression_1_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_expression_1_many#0", (args) => CreateSyntaxNode(nameof(analog_expression_1_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_1.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_expression_0.Value)).Named("analog_expression_1_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_expression_0 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_expression_0#0", (args) => CreateSyntaxNode(nameof(analog_expression_0), args), new Lazy<IParser<VerilogToken>>(() => analog_expression_primary.Value), new Lazy<IParser<VerilogToken>>(() => analog_expression_0_many.Value.Many(greedy: true))).Named("analog_expression_0"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_expression_0_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_expression_0_many#0", (args) => CreateSyntaxNode(nameof(analog_expression_0_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_0.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_expression_primary.Value)).Named("analog_expression_0_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_expression_primary =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_expression_primary#0", (args) => CreateSyntaxNode(nameof(analog_expression_primary), args), new Lazy<IParser<VerilogToken>>(() => analog_primary.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("analog_expression_primary#1", (args) => CreateSyntaxNode(nameof(analog_expression_primary), args), new Lazy<IParser<VerilogToken>>(() => unary_operator.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_primary.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("analog_expression_primary#2", (args) => CreateSyntaxNode(nameof(analog_expression_primary), args), new Lazy<IParser<VerilogToken>>(() => @string.Value)))).Named("analog_expression_primary"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> abstol_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("abstol_expression#0", (args) => CreateSyntaxNode(nameof(abstol_expression), args), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("abstol_expression#1", (args) => CreateSyntaxNode(nameof(abstol_expression), args), new Lazy<IParser<VerilogToken>>(() => nature_identifier.Value))).Named("abstol_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_range_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_range_expression#0", (args) => CreateSyntaxNode(nameof(analog_range_expression), args), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("analog_range_expression#1", (args) => CreateSyntaxNode(nameof(analog_range_expression), args), new Lazy<IParser<VerilogToken>>(() => msb_constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => lsb_constant_expression.Value))).Named("analog_range_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_expression_or_null =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_expression_or_null#0", (args) => CreateSyntaxNode(nameof(analog_expression_or_null), args), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value.Optional(greedy: false))).Named("analog_expression_or_null"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> base_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("base_expression#0", (args) => CreateSyntaxNode(nameof(base_expression), args), new Lazy<IParser<VerilogToken>>(() => expression.Value)).Named("base_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> conditional_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("conditional_expression#0", (args) => CreateSyntaxNode(nameof(conditional_expression), args), new Lazy<IParser<VerilogToken>>(() => expression1.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.QUESTION)), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => expression2.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => expression3.Value)).Named("conditional_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_base_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_base_expression#0", (args) => CreateSyntaxNode(nameof(constant_base_expression), args), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value)).Named("constant_base_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_expression_or_null =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_expression_or_null#0", (args) => CreateSyntaxNode(nameof(constant_expression_or_null), args), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value.Optional(greedy: false))).Named("constant_expression_or_null"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_expression#0", (args) => CreateSyntaxNode(nameof(constant_expression), args), new Lazy<IParser<VerilogToken>>(() => constant_expression_10.Value), new Lazy<IParser<VerilogToken>>(() => constant_expression_prim.Value)).Named("constant_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_conditional_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_conditional_expression#0", (args) => CreateSyntaxNode(nameof(constant_conditional_expression), args), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.QUESTION)), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value)).Named("constant_conditional_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_expression_10 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_expression_10#0", (args) => CreateSyntaxNode(nameof(constant_expression_10), args), new Lazy<IParser<VerilogToken>>(() => constant_expression_9.Value), new Lazy<IParser<VerilogToken>>(() => constant_expression_10_many.Value.Many(greedy: true))).Named("constant_expression_10"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_expression_10_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_expression_10_many#0", (args) => CreateSyntaxNode(nameof(constant_expression_10_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_10.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => constant_expression_9.Value)).Named("constant_expression_10_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_expression_9 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_expression_9#0", (args) => CreateSyntaxNode(nameof(constant_expression_9), args), new Lazy<IParser<VerilogToken>>(() => constant_expression_8.Value), new Lazy<IParser<VerilogToken>>(() => constant_expression_9_many.Value.Many(greedy: true))).Named("constant_expression_9"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_expression_9_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_expression_9_many#0", (args) => CreateSyntaxNode(nameof(constant_expression_9_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_9.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => constant_expression_8.Value)).Named("constant_expression_9_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_expression_8 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_expression_8#0", (args) => CreateSyntaxNode(nameof(constant_expression_8), args), new Lazy<IParser<VerilogToken>>(() => constant_expression_7.Value), new Lazy<IParser<VerilogToken>>(() => constant_expression_8_many.Value.Many(greedy: true))).Named("constant_expression_8"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_expression_8_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_expression_8_many#0", (args) => CreateSyntaxNode(nameof(constant_expression_8_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_8.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => constant_expression_7.Value)).Named("constant_expression_8_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_expression_7 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_expression_7#0", (args) => CreateSyntaxNode(nameof(constant_expression_7), args), new Lazy<IParser<VerilogToken>>(() => constant_expression_6.Value), new Lazy<IParser<VerilogToken>>(() => constant_expression_7_many.Value.Many(greedy: true))).Named("constant_expression_7"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_expression_7_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_expression_7_many#0", (args) => CreateSyntaxNode(nameof(constant_expression_7_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_7.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => constant_expression_6.Value)).Named("constant_expression_7_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_expression_6 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_expression_6#0", (args) => CreateSyntaxNode(nameof(constant_expression_6), args), new Lazy<IParser<VerilogToken>>(() => constant_expression_5.Value), new Lazy<IParser<VerilogToken>>(() => constant_expression_6_many.Value.Many(greedy: true))).Named("constant_expression_6"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_expression_6_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_expression_6_many#0", (args) => CreateSyntaxNode(nameof(constant_expression_6_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_6.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => constant_expression_5.Value)).Named("constant_expression_6_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_expression_5 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_expression_5#0", (args) => CreateSyntaxNode(nameof(constant_expression_5), args), new Lazy<IParser<VerilogToken>>(() => constant_expression_4.Value), new Lazy<IParser<VerilogToken>>(() => constant_expression_5_many.Value.Many(greedy: true))).Named("constant_expression_5"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_expression_5_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_expression_5_many#0", (args) => CreateSyntaxNode(nameof(constant_expression_5_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_5.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => constant_expression_4.Value)).Named("constant_expression_5_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_expression_4 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_expression_4#0", (args) => CreateSyntaxNode(nameof(constant_expression_4), args), new Lazy<IParser<VerilogToken>>(() => constant_expression_3.Value), new Lazy<IParser<VerilogToken>>(() => constant_expression_4_many.Value.Many(greedy: true))).Named("constant_expression_4"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_expression_4_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_expression_4_many#0", (args) => CreateSyntaxNode(nameof(constant_expression_4_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_4.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => constant_expression_3.Value)).Named("constant_expression_4_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_expression_3 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_expression_3#0", (args) => CreateSyntaxNode(nameof(constant_expression_3), args), new Lazy<IParser<VerilogToken>>(() => constant_expression_2.Value), new Lazy<IParser<VerilogToken>>(() => constant_expression_3_many.Value.Many(greedy: true))).Named("constant_expression_3"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_expression_3_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_expression_3_many#0", (args) => CreateSyntaxNode(nameof(constant_expression_3_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_3.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => constant_expression_2.Value)).Named("constant_expression_3_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_expression_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_expression_2#0", (args) => CreateSyntaxNode(nameof(constant_expression_2), args), new Lazy<IParser<VerilogToken>>(() => constant_expression_1.Value), new Lazy<IParser<VerilogToken>>(() => constant_expression_2_many.Value.Many(greedy: true))).Named("constant_expression_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_expression_2_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_expression_2_many#0", (args) => CreateSyntaxNode(nameof(constant_expression_2_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_2.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => constant_expression_1.Value)).Named("constant_expression_2_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_expression_1 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_expression_1#0", (args) => CreateSyntaxNode(nameof(constant_expression_1), args), new Lazy<IParser<VerilogToken>>(() => constant_expression_0.Value), new Lazy<IParser<VerilogToken>>(() => constant_expression_1_many.Value.Many(greedy: true))).Named("constant_expression_1"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_expression_1_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_expression_1_many#0", (args) => CreateSyntaxNode(nameof(constant_expression_1_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_1.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => constant_expression_0.Value)).Named("constant_expression_1_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_expression_0 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_expression_0#0", (args) => CreateSyntaxNode(nameof(constant_expression_0), args), new Lazy<IParser<VerilogToken>>(() => constant_expression_primary.Value), new Lazy<IParser<VerilogToken>>(() => constant_expression_0_many.Value.Many(greedy: true))).Named("constant_expression_0"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_expression_0_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_expression_0_many#0", (args) => CreateSyntaxNode(nameof(constant_expression_0_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_0.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => constant_expression_primary.Value)).Named("constant_expression_0_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_expression_primary =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_expression_primary#0", (args) => CreateSyntaxNode(nameof(constant_expression_primary), args), new Lazy<IParser<VerilogToken>>(() => constant_primary.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("constant_expression_primary#1", (args) => CreateSyntaxNode(nameof(constant_expression_primary), args), new Lazy<IParser<VerilogToken>>(() => unary_operator.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => constant_primary.Value))).Named("constant_expression_primary"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analysis_or_constant_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analysis_or_constant_expression#0", (args) => CreateSyntaxNode(nameof(analysis_or_constant_expression), args), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_10.Value), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_prim.Value)).Named("analysis_or_constant_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analysis_or_constant_conditional_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analysis_or_constant_conditional_expression#0", (args) => CreateSyntaxNode(nameof(analysis_or_constant_conditional_expression), args), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.QUESTION)), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression.Value)).Named("analysis_or_constant_conditional_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analysis_or_constant_expression_10 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analysis_or_constant_expression_10#0", (args) => CreateSyntaxNode(nameof(analysis_or_constant_expression_10), args), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_9.Value), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_10_many.Value.Many(greedy: true))).Named("analysis_or_constant_expression_10"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analysis_or_constant_expression_10_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analysis_or_constant_expression_10_many#0", (args) => CreateSyntaxNode(nameof(analysis_or_constant_expression_10_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_10.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_9.Value)).Named("analysis_or_constant_expression_10_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analysis_or_constant_expression_9 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analysis_or_constant_expression_9#0", (args) => CreateSyntaxNode(nameof(analysis_or_constant_expression_9), args), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_8.Value), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_9_many.Value.Many(greedy: true))).Named("analysis_or_constant_expression_9"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analysis_or_constant_expression_9_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analysis_or_constant_expression_9_many#0", (args) => CreateSyntaxNode(nameof(analysis_or_constant_expression_9_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_9.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_8.Value)).Named("analysis_or_constant_expression_9_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analysis_or_constant_expression_8 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analysis_or_constant_expression_8#0", (args) => CreateSyntaxNode(nameof(analysis_or_constant_expression_8), args), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_7.Value), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_8_many.Value.Many(greedy: true))).Named("analysis_or_constant_expression_8"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analysis_or_constant_expression_8_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analysis_or_constant_expression_8_many#0", (args) => CreateSyntaxNode(nameof(analysis_or_constant_expression_8_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_8.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_7.Value)).Named("analysis_or_constant_expression_8_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analysis_or_constant_expression_7 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analysis_or_constant_expression_7#0", (args) => CreateSyntaxNode(nameof(analysis_or_constant_expression_7), args), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_6.Value), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_7_many.Value.Many(greedy: true))).Named("analysis_or_constant_expression_7"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analysis_or_constant_expression_7_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analysis_or_constant_expression_7_many#0", (args) => CreateSyntaxNode(nameof(analysis_or_constant_expression_7_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_7.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_6.Value)).Named("analysis_or_constant_expression_7_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analysis_or_constant_expression_6 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analysis_or_constant_expression_6#0", (args) => CreateSyntaxNode(nameof(analysis_or_constant_expression_6), args), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_5.Value), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_6_many.Value.Many(greedy: true))).Named("analysis_or_constant_expression_6"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analysis_or_constant_expression_6_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analysis_or_constant_expression_6_many#0", (args) => CreateSyntaxNode(nameof(analysis_or_constant_expression_6_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_6.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_5.Value)).Named("analysis_or_constant_expression_6_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analysis_or_constant_expression_5 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analysis_or_constant_expression_5#0", (args) => CreateSyntaxNode(nameof(analysis_or_constant_expression_5), args), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_4.Value), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_5_many.Value.Many(greedy: true))).Named("analysis_or_constant_expression_5"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analysis_or_constant_expression_5_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analysis_or_constant_expression_5_many#0", (args) => CreateSyntaxNode(nameof(analysis_or_constant_expression_5_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_5.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_4.Value)).Named("analysis_or_constant_expression_5_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analysis_or_constant_expression_4 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analysis_or_constant_expression_4#0", (args) => CreateSyntaxNode(nameof(analysis_or_constant_expression_4), args), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_3.Value), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_4_many.Value.Many(greedy: true))).Named("analysis_or_constant_expression_4"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analysis_or_constant_expression_4_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analysis_or_constant_expression_4_many#0", (args) => CreateSyntaxNode(nameof(analysis_or_constant_expression_4_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_4.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_3.Value)).Named("analysis_or_constant_expression_4_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analysis_or_constant_expression_3 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analysis_or_constant_expression_3#0", (args) => CreateSyntaxNode(nameof(analysis_or_constant_expression_3), args), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_2.Value), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_3_many.Value.Many(greedy: true))).Named("analysis_or_constant_expression_3"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analysis_or_constant_expression_3_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analysis_or_constant_expression_3_many#0", (args) => CreateSyntaxNode(nameof(analysis_or_constant_expression_3_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_3.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_2.Value)).Named("analysis_or_constant_expression_3_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analysis_or_constant_expression_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analysis_or_constant_expression_2#0", (args) => CreateSyntaxNode(nameof(analysis_or_constant_expression_2), args), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_1.Value), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_2_many.Value.Many(greedy: true))).Named("analysis_or_constant_expression_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analysis_or_constant_expression_2_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analysis_or_constant_expression_2_many#0", (args) => CreateSyntaxNode(nameof(analysis_or_constant_expression_2_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_2.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_1.Value)).Named("analysis_or_constant_expression_2_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analysis_or_constant_expression_1 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analysis_or_constant_expression_1#0", (args) => CreateSyntaxNode(nameof(analysis_or_constant_expression_1), args), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_0.Value), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_1_many.Value.Many(greedy: true))).Named("analysis_or_constant_expression_1"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analysis_or_constant_expression_1_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analysis_or_constant_expression_1_many#0", (args) => CreateSyntaxNode(nameof(analysis_or_constant_expression_1_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_1.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_0.Value)).Named("analysis_or_constant_expression_1_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analysis_or_constant_expression_0 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analysis_or_constant_expression_0#0", (args) => CreateSyntaxNode(nameof(analysis_or_constant_expression_0), args), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_primary.Value), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_0_many.Value.Many(greedy: true))).Named("analysis_or_constant_expression_0"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analysis_or_constant_expression_0_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analysis_or_constant_expression_0_many#0", (args) => CreateSyntaxNode(nameof(analysis_or_constant_expression_0_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_0.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_primary.Value)).Named("analysis_or_constant_expression_0_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analysis_or_constant_expression_primary =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analysis_or_constant_expression_primary#0", (args) => CreateSyntaxNode(nameof(analysis_or_constant_expression_primary), args), new Lazy<IParser<VerilogToken>>(() => constant_primary.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("analysis_or_constant_expression_primary#1", (args) => CreateSyntaxNode(nameof(analysis_or_constant_expression_primary), args), new Lazy<IParser<VerilogToken>>(() => unary_operator.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => constant_primary.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("analysis_or_constant_expression_primary#2", (args) => CreateSyntaxNode(nameof(analysis_or_constant_expression_primary), args), new Lazy<IParser<VerilogToken>>(() => analysis_function_call.Value)))).Named("analysis_or_constant_expression_primary"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_mintypmax_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_mintypmax_expression#0", (args) => CreateSyntaxNode(nameof(constant_mintypmax_expression), args), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("constant_mintypmax_expression#1", (args) => CreateSyntaxNode(nameof(constant_mintypmax_expression), args), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value))).Named("constant_mintypmax_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_range_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_range_expression#0", (args) => CreateSyntaxNode(nameof(constant_range_expression), args), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("constant_range_expression#1", (args) => CreateSyntaxNode(nameof(constant_range_expression), args), new Lazy<IParser<VerilogToken>>(() => msb_constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => lsb_constant_expression.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("constant_range_expression#2", (args) => CreateSyntaxNode(nameof(constant_range_expression), args), new Lazy<IParser<VerilogToken>>(() => constant_base_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "+:")), new Lazy<IParser<VerilogToken>>(() => width_constant_expression.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("constant_range_expression#3", (args) => CreateSyntaxNode(nameof(constant_range_expression), args), new Lazy<IParser<VerilogToken>>(() => constant_base_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "-:")), new Lazy<IParser<VerilogToken>>(() => width_constant_expression.Value))))).Named("constant_range_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> dimension_constant_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("dimension_constant_expression#0", (args) => CreateSyntaxNode(nameof(dimension_constant_expression), args), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value)).Named("dimension_constant_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("expression#0", (args) => CreateSyntaxNode(nameof(expression), args), new Lazy<IParser<VerilogToken>>(() => expression_10.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("expression#1", (args) => CreateSyntaxNode(nameof(expression), args), new Lazy<IParser<VerilogToken>>(() => expression1.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.QUESTION)), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => expression2.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => expression3.Value))).Named("expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> expression_10 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("expression_10#0", (args) => CreateSyntaxNode(nameof(expression_10), args), new Lazy<IParser<VerilogToken>>(() => expression_9.Value), new Lazy<IParser<VerilogToken>>(() => expression_10_many.Value.Many(greedy: true))).Named("expression_10"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> expression_10_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("expression_10_many#0", (args) => CreateSyntaxNode(nameof(expression_10_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_10.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => expression_9.Value)).Named("expression_10_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> expression_9 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("expression_9#0", (args) => CreateSyntaxNode(nameof(expression_9), args), new Lazy<IParser<VerilogToken>>(() => expression_8.Value), new Lazy<IParser<VerilogToken>>(() => expression_9_many.Value.Many(greedy: true))).Named("expression_9"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> expression_9_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("expression_9_many#0", (args) => CreateSyntaxNode(nameof(expression_9_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_9.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => expression_8.Value)).Named("expression_9_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> expression_8 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("expression_8#0", (args) => CreateSyntaxNode(nameof(expression_8), args), new Lazy<IParser<VerilogToken>>(() => expression_7.Value), new Lazy<IParser<VerilogToken>>(() => expression_8_many.Value.Many(greedy: true))).Named("expression_8"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> expression_8_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("expression_8_many#0", (args) => CreateSyntaxNode(nameof(expression_8_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_8.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => expression_7.Value)).Named("expression_8_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> expression_7 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("expression_7#0", (args) => CreateSyntaxNode(nameof(expression_7), args), new Lazy<IParser<VerilogToken>>(() => expression_6.Value), new Lazy<IParser<VerilogToken>>(() => expression_7_many.Value.Many(greedy: true))).Named("expression_7"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> expression_7_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("expression_7_many#0", (args) => CreateSyntaxNode(nameof(expression_7_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_7.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => expression_6.Value)).Named("expression_7_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> expression_6 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("expression_6#0", (args) => CreateSyntaxNode(nameof(expression_6), args), new Lazy<IParser<VerilogToken>>(() => expression_5.Value), new Lazy<IParser<VerilogToken>>(() => expression_6_many.Value.Many(greedy: true))).Named("expression_6"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> expression_6_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("expression_6_many#0", (args) => CreateSyntaxNode(nameof(expression_6_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_6.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => expression_5.Value)).Named("expression_6_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> expression_5 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("expression_5#0", (args) => CreateSyntaxNode(nameof(expression_5), args), new Lazy<IParser<VerilogToken>>(() => expression_4.Value), new Lazy<IParser<VerilogToken>>(() => expression_5_many.Value.Many(greedy: true))).Named("expression_5"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> expression_5_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("expression_5_many#0", (args) => CreateSyntaxNode(nameof(expression_5_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_5.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => expression_4.Value)).Named("expression_5_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> expression_4 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("expression_4#0", (args) => CreateSyntaxNode(nameof(expression_4), args), new Lazy<IParser<VerilogToken>>(() => expression_3.Value), new Lazy<IParser<VerilogToken>>(() => expression_4_many.Value.Many(greedy: true))).Named("expression_4"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> expression_4_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("expression_4_many#0", (args) => CreateSyntaxNode(nameof(expression_4_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_4.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => expression_3.Value)).Named("expression_4_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> expression_3 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("expression_3#0", (args) => CreateSyntaxNode(nameof(expression_3), args), new Lazy<IParser<VerilogToken>>(() => expression_2.Value), new Lazy<IParser<VerilogToken>>(() => expression_3_many.Value.Many(greedy: true))).Named("expression_3"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> expression_3_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("expression_3_many#0", (args) => CreateSyntaxNode(nameof(expression_3_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_3.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => expression_2.Value)).Named("expression_3_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> expression_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("expression_2#0", (args) => CreateSyntaxNode(nameof(expression_2), args), new Lazy<IParser<VerilogToken>>(() => expression_1.Value), new Lazy<IParser<VerilogToken>>(() => expression_2_many.Value.Many(greedy: true))).Named("expression_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> expression_2_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("expression_2_many#0", (args) => CreateSyntaxNode(nameof(expression_2_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_2.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => expression_1.Value)).Named("expression_2_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> expression_1 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("expression_1#0", (args) => CreateSyntaxNode(nameof(expression_1), args), new Lazy<IParser<VerilogToken>>(() => expression_0.Value), new Lazy<IParser<VerilogToken>>(() => expression_1_many.Value.Many(greedy: true))).Named("expression_1"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> expression_1_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("expression_1_many#0", (args) => CreateSyntaxNode(nameof(expression_1_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_1.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => expression_0.Value)).Named("expression_1_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> expression_0 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("expression_0#0", (args) => CreateSyntaxNode(nameof(expression_0), args), new Lazy<IParser<VerilogToken>>(() => expression_primary.Value), new Lazy<IParser<VerilogToken>>(() => expression_0_many.Value.Many(greedy: true))).Named("expression_0"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> expression_0_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("expression_0_many#0", (args) => CreateSyntaxNode(nameof(expression_0_many), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_0.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => expression_primary.Value)).Named("expression_0_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> expression_primary =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("expression_primary#0", (args) => CreateSyntaxNode(nameof(expression_primary), args), new Lazy<IParser<VerilogToken>>(() => primary.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("expression_primary#1", (args) => CreateSyntaxNode(nameof(expression_primary), args), new Lazy<IParser<VerilogToken>>(() => unary_operator.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => primary.Value))).Named("expression_primary"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> expression1 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("expression1#0", (args) => CreateSyntaxNode(nameof(expression1), args), new Lazy<IParser<VerilogToken>>(() => expression_10.Value), new Lazy<IParser<VerilogToken>>(() => expression1_prim.Value)).Named("expression1"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> expression2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("expression2#0", (args) => CreateSyntaxNode(nameof(expression2), args), new Lazy<IParser<VerilogToken>>(() => expression.Value)).Named("expression2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> expression3 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("expression3#0", (args) => CreateSyntaxNode(nameof(expression3), args), new Lazy<IParser<VerilogToken>>(() => expression.Value)).Named("expression3"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> indirect_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("indirect_expression#0", (args) => CreateSyntaxNode(nameof(indirect_expression), args), new Lazy<IParser<VerilogToken>>(() => branch_probe_function_call.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("indirect_expression#1", (args) => CreateSyntaxNode(nameof(indirect_expression), args), new Lazy<IParser<VerilogToken>>(() => port_probe_function_call.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("indirect_expression#2", (args) => CreateSyntaxNode(nameof(indirect_expression), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "ddt")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => branch_probe_function_call.Value), new Lazy<IParser<VerilogToken>>(() => indirect_expression_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("indirect_expression#3", (args) => CreateSyntaxNode(nameof(indirect_expression), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "ddt")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => port_probe_function_call.Value), new Lazy<IParser<VerilogToken>>(() => indirect_expression_optional_2.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("indirect_expression#4", (args) => CreateSyntaxNode(nameof(indirect_expression), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "idt")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => branch_probe_function_call.Value), new Lazy<IParser<VerilogToken>>(() => indirect_expression_optional_3.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("indirect_expression#5", (args) => CreateSyntaxNode(nameof(indirect_expression), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "idt")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => port_probe_function_call.Value), new Lazy<IParser<VerilogToken>>(() => indirect_expression_optional_4.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("indirect_expression#6", (args) => CreateSyntaxNode(nameof(indirect_expression), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "idtmod")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => branch_probe_function_call.Value), new Lazy<IParser<VerilogToken>>(() => indirect_expression_optional_5.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("indirect_expression#7", (args) => CreateSyntaxNode(nameof(indirect_expression), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "idtmod")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => port_probe_function_call.Value), new Lazy<IParser<VerilogToken>>(() => indirect_expression_optional_6.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))))))))).Named("indirect_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> indirect_expression_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("indirect_expression_optional#0", (args) => CreateSyntaxNode(nameof(indirect_expression_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => abstol_expression.Value)).Named("indirect_expression_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> indirect_expression_optional_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("indirect_expression_optional_2#0", (args) => CreateSyntaxNode(nameof(indirect_expression_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => abstol_expression.Value)).Named("indirect_expression_optional_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> indirect_expression_optional_3 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("indirect_expression_optional_3#0", (args) => CreateSyntaxNode(nameof(indirect_expression_optional_3), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => indirect_expression_optional_7.Value.Optional(greedy: false))).Named("indirect_expression_optional_3"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> indirect_expression_optional_4 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("indirect_expression_optional_4#0", (args) => CreateSyntaxNode(nameof(indirect_expression_optional_4), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => indirect_expression_optional_8.Value.Optional(greedy: false))).Named("indirect_expression_optional_4"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> indirect_expression_optional_5 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("indirect_expression_optional_5#0", (args) => CreateSyntaxNode(nameof(indirect_expression_optional_5), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => indirect_expression_optional_9.Value.Optional(greedy: false))).Named("indirect_expression_optional_5"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> indirect_expression_optional_6 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("indirect_expression_optional_6#0", (args) => CreateSyntaxNode(nameof(indirect_expression_optional_6), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => indirect_expression_optional_10.Value.Optional(greedy: false))).Named("indirect_expression_optional_6"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> indirect_expression_optional_7 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("indirect_expression_optional_7#0", (args) => CreateSyntaxNode(nameof(indirect_expression_optional_7), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => indirect_expression_optional_11.Value.Optional(greedy: false))).Named("indirect_expression_optional_7"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> indirect_expression_optional_8 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("indirect_expression_optional_8#0", (args) => CreateSyntaxNode(nameof(indirect_expression_optional_8), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => indirect_expression_optional_12.Value.Optional(greedy: false))).Named("indirect_expression_optional_8"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> indirect_expression_optional_9 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("indirect_expression_optional_9#0", (args) => CreateSyntaxNode(nameof(indirect_expression_optional_9), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => indirect_expression_optional_13.Value.Optional(greedy: false))).Named("indirect_expression_optional_9"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> indirect_expression_optional_10 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("indirect_expression_optional_10#0", (args) => CreateSyntaxNode(nameof(indirect_expression_optional_10), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => indirect_expression_optional_14.Value.Optional(greedy: false))).Named("indirect_expression_optional_10"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> indirect_expression_optional_11 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("indirect_expression_optional_11#0", (args) => CreateSyntaxNode(nameof(indirect_expression_optional_11), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => abstol_expression.Value)).Named("indirect_expression_optional_11"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> indirect_expression_optional_12 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("indirect_expression_optional_12#0", (args) => CreateSyntaxNode(nameof(indirect_expression_optional_12), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => abstol_expression.Value)).Named("indirect_expression_optional_12"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> indirect_expression_optional_13 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("indirect_expression_optional_13#0", (args) => CreateSyntaxNode(nameof(indirect_expression_optional_13), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => indirect_expression_optional_15.Value.Optional(greedy: false))).Named("indirect_expression_optional_13"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> indirect_expression_optional_14 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("indirect_expression_optional_14#0", (args) => CreateSyntaxNode(nameof(indirect_expression_optional_14), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => indirect_expression_optional_16.Value.Optional(greedy: false))).Named("indirect_expression_optional_14"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> indirect_expression_optional_15 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("indirect_expression_optional_15#0", (args) => CreateSyntaxNode(nameof(indirect_expression_optional_15), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => abstol_expression.Value)).Named("indirect_expression_optional_15"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> indirect_expression_optional_16 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("indirect_expression_optional_16#0", (args) => CreateSyntaxNode(nameof(indirect_expression_optional_16), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => abstol_expression.Value)).Named("indirect_expression_optional_16"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> lsb_constant_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("lsb_constant_expression#0", (args) => CreateSyntaxNode(nameof(lsb_constant_expression), args), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value)).Named("lsb_constant_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> mintypmax_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("mintypmax_expression#0", (args) => CreateSyntaxNode(nameof(mintypmax_expression), args), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => expression.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("mintypmax_expression#1", (args) => CreateSyntaxNode(nameof(mintypmax_expression), args), new Lazy<IParser<VerilogToken>>(() => expression.Value))).Named("mintypmax_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> module_path_conditional_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("module_path_conditional_expression#0", (args) => CreateSyntaxNode(nameof(module_path_conditional_expression), args), new Lazy<IParser<VerilogToken>>(() => module_path_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.QUESTION)), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => module_path_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => module_path_expression.Value)).Named("module_path_conditional_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> module_path_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("module_path_expression#0", (args) => CreateSyntaxNode(nameof(module_path_expression), args), new Lazy<IParser<VerilogToken>>(() => module_path_primary.Value), new Lazy<IParser<VerilogToken>>(() => module_path_expression_prim.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("module_path_expression#1", (args) => CreateSyntaxNode(nameof(module_path_expression), args), new Lazy<IParser<VerilogToken>>(() => unary_module_path_operator.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => module_path_primary.Value), new Lazy<IParser<VerilogToken>>(() => module_path_expression_prim.Value))).Named("module_path_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> module_path_mintypmax_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("module_path_mintypmax_expression#0", (args) => CreateSyntaxNode(nameof(module_path_mintypmax_expression), args), new Lazy<IParser<VerilogToken>>(() => module_path_primary.Value), new Lazy<IParser<VerilogToken>>(() => module_path_expression_prim.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("module_path_mintypmax_expression#1", (args) => CreateSyntaxNode(nameof(module_path_mintypmax_expression), args), new Lazy<IParser<VerilogToken>>(() => unary_module_path_operator.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => module_path_primary.Value), new Lazy<IParser<VerilogToken>>(() => module_path_expression_prim.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("module_path_mintypmax_expression#2", (args) => CreateSyntaxNode(nameof(module_path_mintypmax_expression), args), new Lazy<IParser<VerilogToken>>(() => module_path_primary.Value), new Lazy<IParser<VerilogToken>>(() => module_path_expression_prim.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => module_path_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => module_path_expression.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("module_path_mintypmax_expression#3", (args) => CreateSyntaxNode(nameof(module_path_mintypmax_expression), args), new Lazy<IParser<VerilogToken>>(() => unary_module_path_operator.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => module_path_primary.Value), new Lazy<IParser<VerilogToken>>(() => module_path_expression_prim.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => module_path_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => module_path_expression.Value))))).Named("module_path_mintypmax_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> msb_constant_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("msb_constant_expression#0", (args) => CreateSyntaxNode(nameof(msb_constant_expression), args), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value)).Named("msb_constant_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> nature_attribute_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("nature_attribute_expression#0", (args) => CreateSyntaxNode(nameof(nature_attribute_expression), args), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("nature_attribute_expression#1", (args) => CreateSyntaxNode(nameof(nature_attribute_expression), args), new Lazy<IParser<VerilogToken>>(() => nature_identifier.Value))).Named("nature_attribute_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> range_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("range_expression#0", (args) => CreateSyntaxNode(nameof(range_expression), args), new Lazy<IParser<VerilogToken>>(() => expression.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("range_expression#1", (args) => CreateSyntaxNode(nameof(range_expression), args), new Lazy<IParser<VerilogToken>>(() => msb_constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => lsb_constant_expression.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("range_expression#2", (args) => CreateSyntaxNode(nameof(range_expression), args), new Lazy<IParser<VerilogToken>>(() => base_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "+:")), new Lazy<IParser<VerilogToken>>(() => width_constant_expression.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("range_expression#3", (args) => CreateSyntaxNode(nameof(range_expression), args), new Lazy<IParser<VerilogToken>>(() => base_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "-:")), new Lazy<IParser<VerilogToken>>(() => width_constant_expression.Value))))).Named("range_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> width_constant_expression =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("width_constant_expression#0", (args) => CreateSyntaxNode(nameof(width_constant_expression), args), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value)).Named("width_constant_expression"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_primary =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_primary#0", (args) => CreateSyntaxNode(nameof(analog_primary), args), new Lazy<IParser<VerilogToken>>(() => number.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_primary#1", (args) => CreateSyntaxNode(nameof(analog_primary), args), new Lazy<IParser<VerilogToken>>(() => analog_concatenation.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_primary#2", (args) => CreateSyntaxNode(nameof(analog_primary), args), new Lazy<IParser<VerilogToken>>(() => analog_multiple_concatenation.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_primary#3", (args) => CreateSyntaxNode(nameof(analog_primary), args), new Lazy<IParser<VerilogToken>>(() => analog_function_call.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_primary#4", (args) => CreateSyntaxNode(nameof(analog_primary), args), new Lazy<IParser<VerilogToken>>(() => analog_system_function_call.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_primary#5", (args) => CreateSyntaxNode(nameof(analog_primary), args), new Lazy<IParser<VerilogToken>>(() => analog_built_in_function_call.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_primary#6", (args) => CreateSyntaxNode(nameof(analog_primary), args), new Lazy<IParser<VerilogToken>>(() => analog_filter_function_call.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_primary#7", (args) => CreateSyntaxNode(nameof(analog_primary), args), new Lazy<IParser<VerilogToken>>(() => analog_small_signal_function_call.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_primary#8", (args) => CreateSyntaxNode(nameof(analog_primary), args), new Lazy<IParser<VerilogToken>>(() => analysis_function_call.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_primary#9", (args) => CreateSyntaxNode(nameof(analog_primary), args), new Lazy<IParser<VerilogToken>>(() => branch_probe_function_call.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_primary#10", (args) => CreateSyntaxNode(nameof(analog_primary), args), new Lazy<IParser<VerilogToken>>(() => port_probe_function_call.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_primary#11", (args) => CreateSyntaxNode(nameof(analog_primary), args), new Lazy<IParser<VerilogToken>>(() => variable_reference.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_primary#12", (args) => CreateSyntaxNode(nameof(analog_primary), args), new Lazy<IParser<VerilogToken>>(() => net_reference.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_primary#13", (args) => CreateSyntaxNode(nameof(analog_primary), args), new Lazy<IParser<VerilogToken>>(() => genvar_identifier.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_primary#14", (args) => CreateSyntaxNode(nameof(analog_primary), args), new Lazy<IParser<VerilogToken>>(() => parameter_reference.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_primary#15", (args) => CreateSyntaxNode(nameof(analog_primary), args), new Lazy<IParser<VerilogToken>>(() => nature_attribute_reference.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_primary#16", (args) => CreateSyntaxNode(nameof(analog_primary), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))))))))))))))))))).Named("analog_primary"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_primary =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_primary#0", (args) => CreateSyntaxNode(nameof(constant_primary), args), new Lazy<IParser<VerilogToken>>(() => number.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("constant_primary#1", (args) => CreateSyntaxNode(nameof(constant_primary), args), new Lazy<IParser<VerilogToken>>(() => parameter_identifier.Value), new Lazy<IParser<VerilogToken>>(() => constant_primary_optional.Value.Optional(greedy: false)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("constant_primary#2", (args) => CreateSyntaxNode(nameof(constant_primary), args), new Lazy<IParser<VerilogToken>>(() => specparam_identifier.Value), new Lazy<IParser<VerilogToken>>(() => constant_primary_optional_2.Value.Optional(greedy: false)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("constant_primary#3", (args) => CreateSyntaxNode(nameof(constant_primary), args), new Lazy<IParser<VerilogToken>>(() => constant_concatenation.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("constant_primary#4", (args) => CreateSyntaxNode(nameof(constant_primary), args), new Lazy<IParser<VerilogToken>>(() => constant_multiple_concatenation.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("constant_primary#5", (args) => CreateSyntaxNode(nameof(constant_primary), args), new Lazy<IParser<VerilogToken>>(() => constant_function_call.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("constant_primary#6", (args) => CreateSyntaxNode(nameof(constant_primary), args), new Lazy<IParser<VerilogToken>>(() => constant_system_function_call.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("constant_primary#7", (args) => CreateSyntaxNode(nameof(constant_primary), args), new Lazy<IParser<VerilogToken>>(() => constant_analog_built_in_function_call.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("constant_primary#8", (args) => CreateSyntaxNode(nameof(constant_primary), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => constant_mintypmax_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("constant_primary#9", (args) => CreateSyntaxNode(nameof(constant_primary), args), new Lazy<IParser<VerilogToken>>(() => @string.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("constant_primary#10", (args) => CreateSyntaxNode(nameof(constant_primary), args), new Lazy<IParser<VerilogToken>>(() => system_parameter_identifier.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("constant_primary#11", (args) => CreateSyntaxNode(nameof(constant_primary), args), new Lazy<IParser<VerilogToken>>(() => nature_attribute_reference.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("constant_primary#12", (args) => CreateSyntaxNode(nameof(constant_primary), args), new Lazy<IParser<VerilogToken>>(() => constant_analog_function_call.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("constant_primary#13", (args) => CreateSyntaxNode(nameof(constant_primary), args), new Lazy<IParser<VerilogToken>>(() => genvar_identifier.Value))))))))))))))).Named("constant_primary"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_primary_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_primary_optional#0", (args) => CreateSyntaxNode(nameof(constant_primary_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => constant_range_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE))).Named("constant_primary_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_primary_optional_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_primary_optional_2#0", (args) => CreateSyntaxNode(nameof(constant_primary_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => constant_range_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE))).Named("constant_primary_optional_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> module_path_primary =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("module_path_primary#0", (args) => CreateSyntaxNode(nameof(module_path_primary), args), new Lazy<IParser<VerilogToken>>(() => number.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("module_path_primary#1", (args) => CreateSyntaxNode(nameof(module_path_primary), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("module_path_primary#2", (args) => CreateSyntaxNode(nameof(module_path_primary), args), new Lazy<IParser<VerilogToken>>(() => module_path_concatenation.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("module_path_primary#3", (args) => CreateSyntaxNode(nameof(module_path_primary), args), new Lazy<IParser<VerilogToken>>(() => module_path_multiple_concatenation.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("module_path_primary#4", (args) => CreateSyntaxNode(nameof(module_path_primary), args), new Lazy<IParser<VerilogToken>>(() => function_call.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("module_path_primary#5", (args) => CreateSyntaxNode(nameof(module_path_primary), args), new Lazy<IParser<VerilogToken>>(() => system_function_call.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("module_path_primary#6", (args) => CreateSyntaxNode(nameof(module_path_primary), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => module_path_mintypmax_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))))))))).Named("module_path_primary"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> primary =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("primary#0", (args) => CreateSyntaxNode(nameof(primary), args), new Lazy<IParser<VerilogToken>>(() => number.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("primary#1", (args) => CreateSyntaxNode(nameof(primary), args), new Lazy<IParser<VerilogToken>>(() => concatenation.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("primary#2", (args) => CreateSyntaxNode(nameof(primary), args), new Lazy<IParser<VerilogToken>>(() => multiple_concatenation.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("primary#3", (args) => CreateSyntaxNode(nameof(primary), args), new Lazy<IParser<VerilogToken>>(() => function_call.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("primary#4", (args) => CreateSyntaxNode(nameof(primary), args), new Lazy<IParser<VerilogToken>>(() => system_function_call.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("primary#5", (args) => CreateSyntaxNode(nameof(primary), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => mintypmax_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("primary#6", (args) => CreateSyntaxNode(nameof(primary), args), new Lazy<IParser<VerilogToken>>(() => @string.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("primary#7", (args) => CreateSyntaxNode(nameof(primary), args), new Lazy<IParser<VerilogToken>>(() => branch_probe_function_call.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("primary#8", (args) => CreateSyntaxNode(nameof(primary), args), new Lazy<IParser<VerilogToken>>(() => port_probe_function_call.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("primary#9", (args) => CreateSyntaxNode(nameof(primary), args), new Lazy<IParser<VerilogToken>>(() => nature_attribute_reference.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("primary#10", (args) => CreateSyntaxNode(nameof(primary), args), new Lazy<IParser<VerilogToken>>(() => analog_function_call.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("primary#11", (args) => CreateSyntaxNode(nameof(primary), args), new Lazy<IParser<VerilogToken>>(() => analog_built_in_function_call.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("primary#12", (args) => CreateSyntaxNode(nameof(primary), args), new Lazy<IParser<VerilogToken>>(() => primary_h.Value)))))))))))))).Named("primary"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> primary_h =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("primary_h#0", (args) => CreateSyntaxNode(nameof(primary_h), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_identifier.Value), new Lazy<IParser<VerilogToken>>(() => primary_h_optional.Value.Optional(greedy: false))).Named("primary_h"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> primary_h_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("primary_h_optional#0", (args) => CreateSyntaxNode(nameof(primary_h_optional), args), new Lazy<IParser<VerilogToken>>(() => lazy_expressions.Value.Many(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => range_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE))).Named("primary_h_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_variable_lvalue =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_variable_lvalue#0", (args) => CreateSyntaxNode(nameof(analog_variable_lvalue), args), new Lazy<IParser<VerilogToken>>(() => variable_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => analog_variable_lvalue_many.Value.Many(greedy: true)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("analog_variable_lvalue#1", (args) => CreateSyntaxNode(nameof(analog_variable_lvalue), args), new Lazy<IParser<VerilogToken>>(() => variable_identifier.Value))).Named("analog_variable_lvalue"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_variable_lvalue_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_variable_lvalue_many#0", (args) => CreateSyntaxNode(nameof(analog_variable_lvalue_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE))).Named("analog_variable_lvalue_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> array_analog_variable_assignment =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("array_analog_variable_assignment#0", (args) => CreateSyntaxNode(nameof(array_analog_variable_assignment), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "array_analog_variable_lvalue")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => array_analog_variable_rvalue.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SEMICOLON))).Named("array_analog_variable_assignment"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> array_analog_variable_rvalue =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("array_analog_variable_rvalue#0", (args) => CreateSyntaxNode(nameof(array_analog_variable_rvalue), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "array_variable_identifier")))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("array_analog_variable_rvalue#1", (args) => CreateSyntaxNode(nameof(array_analog_variable_rvalue), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "array_")), new Lazy<IParser<VerilogToken>>(() => variable_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => array_analog_variable_rvalue_many.Value.Many(greedy: true)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("array_analog_variable_rvalue#2", (args) => CreateSyntaxNode(nameof(array_analog_variable_rvalue), args), new Lazy<IParser<VerilogToken>>(() => assignment_pattern.Value)))).Named("array_analog_variable_rvalue"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> array_analog_variable_rvalue_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("array_analog_variable_rvalue_many#0", (args) => CreateSyntaxNode(nameof(array_analog_variable_rvalue_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE))).Named("array_analog_variable_rvalue_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> branch_lvalue =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("branch_lvalue#0", (args) => CreateSyntaxNode(nameof(branch_lvalue), args), new Lazy<IParser<VerilogToken>>(() => branch_probe_function_call.Value)).Named("branch_lvalue"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> net_lvalue =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("net_lvalue#0", (args) => CreateSyntaxNode(nameof(net_lvalue), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_net_identifier.Value), new Lazy<IParser<VerilogToken>>(() => net_lvalue_optional.Value.Optional(greedy: false)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("net_lvalue#1", (args) => CreateSyntaxNode(nameof(net_lvalue), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SHARP2)), new Lazy<IParser<VerilogToken>>(() => net_lvalue.Value), new Lazy<IParser<VerilogToken>>(() => net_lvalue_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SHARP2)))).Named("net_lvalue"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> net_lvalue_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("net_lvalue_optional#0", (args) => CreateSyntaxNode(nameof(net_lvalue_optional), args), new Lazy<IParser<VerilogToken>>(() => constant_expression_lazy.Value.Many(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => constant_range_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE))).Named("net_lvalue_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> net_lvalue_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("net_lvalue_many#0", (args) => CreateSyntaxNode(nameof(net_lvalue_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => net_lvalue.Value)).Named("net_lvalue_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_expression_lazy =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_expression_lazy#0", (args) => CreateSyntaxNode(nameof(constant_expression_lazy), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE))).Named("constant_expression_lazy"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> variable_lvalue =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("variable_lvalue#0", (args) => CreateSyntaxNode(nameof(variable_lvalue), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_variable_identifier.Value), new Lazy<IParser<VerilogToken>>(() => variable_lvalue_optional.Value.Optional(greedy: false)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("variable_lvalue#1", (args) => CreateSyntaxNode(nameof(variable_lvalue), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SHARP2)), new Lazy<IParser<VerilogToken>>(() => variable_lvalue.Value), new Lazy<IParser<VerilogToken>>(() => variable_lvalue_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SHARP2)))).Named("variable_lvalue"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> variable_lvalue_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("variable_lvalue_optional#0", (args) => CreateSyntaxNode(nameof(variable_lvalue_optional), args), new Lazy<IParser<VerilogToken>>(() => lazy_expressions.Value.Many(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => range_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE))).Named("variable_lvalue_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> variable_lvalue_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("variable_lvalue_many#0", (args) => CreateSyntaxNode(nameof(variable_lvalue_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => variable_lvalue.Value)).Named("variable_lvalue_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> lazy_expressions =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("lazy_expressions#0", (args) => CreateSyntaxNode(nameof(lazy_expressions), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE))).Named("lazy_expressions"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> unary_operator =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("unary_operator#0", (args) => CreateSyntaxNode(nameof(unary_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.PLUS)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("unary_operator#1", (args) => CreateSyntaxNode(nameof(unary_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.MINUS)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("unary_operator#2", (args) => CreateSyntaxNode(nameof(unary_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EXCLAMATION)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("unary_operator#3", (args) => CreateSyntaxNode(nameof(unary_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.TYLDA_DASH)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("unary_operator#4", (args) => CreateSyntaxNode(nameof(unary_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.DASH_TYLDA)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("unary_operator#5", (args) => CreateSyntaxNode(nameof(unary_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.TYLDA_AMP)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("unary_operator#6", (args) => CreateSyntaxNode(nameof(unary_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.TYLDA)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("unary_operator#7", (args) => CreateSyntaxNode(nameof(unary_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.AMP)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("unary_operator#8", (args) => CreateSyntaxNode(nameof(unary_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.OR)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("unary_operator#9", (args) => CreateSyntaxNode(nameof(unary_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.TYLDA_OR)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("unary_operator#10", (args) => CreateSyntaxNode(nameof(unary_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.DASH))))))))))))).Named("unary_operator"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> binary_operator =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator#0", (args) => CreateSyntaxNode(nameof(binary_operator), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_0.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator#1", (args) => CreateSyntaxNode(nameof(binary_operator), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_1.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator#2", (args) => CreateSyntaxNode(nameof(binary_operator), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_2.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator#3", (args) => CreateSyntaxNode(nameof(binary_operator), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_3.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator#4", (args) => CreateSyntaxNode(nameof(binary_operator), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_4.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator#5", (args) => CreateSyntaxNode(nameof(binary_operator), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_5.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator#6", (args) => CreateSyntaxNode(nameof(binary_operator), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_6.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator#7", (args) => CreateSyntaxNode(nameof(binary_operator), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_7.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator#8", (args) => CreateSyntaxNode(nameof(binary_operator), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_8.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator#9", (args) => CreateSyntaxNode(nameof(binary_operator), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_9.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator#10", (args) => CreateSyntaxNode(nameof(binary_operator), args), new Lazy<IParser<VerilogToken>>(() => binary_operator_10.Value)))))))))))).Named("binary_operator"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> binary_operator_0 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator_0#0", (args) => CreateSyntaxNode(nameof(binary_operator_0), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.PLUS)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator_0#1", (args) => CreateSyntaxNode(nameof(binary_operator_0), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.MINUS)))).Named("binary_operator_0"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> binary_operator_1 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator_1#0", (args) => CreateSyntaxNode(nameof(binary_operator_1), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.POW))).Named("binary_operator_1"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> binary_operator_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator_2#0", (args) => CreateSyntaxNode(nameof(binary_operator_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.STAR)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator_2#1", (args) => CreateSyntaxNode(nameof(binary_operator_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.DIV)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator_2#2", (args) => CreateSyntaxNode(nameof(binary_operator_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.PROCENT))))).Named("binary_operator_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> binary_operator_3 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator_3#0", (args) => CreateSyntaxNode(nameof(binary_operator_3), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LESS_DOUBLE)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator_3#1", (args) => CreateSyntaxNode(nameof(binary_operator_3), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.GREATER_DOUBLE)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator_3#2", (args) => CreateSyntaxNode(nameof(binary_operator_3), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LESS_TRIPLE)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator_3#3", (args) => CreateSyntaxNode(nameof(binary_operator_3), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.GREATER_TRIPLE)))))).Named("binary_operator_3"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> binary_operator_4 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator_4#0", (args) => CreateSyntaxNode(nameof(binary_operator_4), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LESS_OR_EQUAL)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator_4#1", (args) => CreateSyntaxNode(nameof(binary_operator_4), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.GREATER_OR_EQUAL)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator_4#2", (args) => CreateSyntaxNode(nameof(binary_operator_4), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LESS)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator_4#3", (args) => CreateSyntaxNode(nameof(binary_operator_4), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.GREATER)))))).Named("binary_operator_4"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> binary_operator_5 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator_5#0", (args) => CreateSyntaxNode(nameof(binary_operator_5), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL_DOUBLE)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator_5#1", (args) => CreateSyntaxNode(nameof(binary_operator_5), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL_NOT)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator_5#2", (args) => CreateSyntaxNode(nameof(binary_operator_5), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL_TRIPLE)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator_5#3", (args) => CreateSyntaxNode(nameof(binary_operator_5), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL_DOUBLE_NOT)))))).Named("binary_operator_5"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> binary_operator_6 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator_6#0", (args) => CreateSyntaxNode(nameof(binary_operator_6), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.AMP))).Named("binary_operator_6"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> binary_operator_7 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator_7#0", (args) => CreateSyntaxNode(nameof(binary_operator_7), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.DASH)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator_7#1", (args) => CreateSyntaxNode(nameof(binary_operator_7), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.DASH_TYLDA)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator_7#2", (args) => CreateSyntaxNode(nameof(binary_operator_7), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.TYLDA_DASH))))).Named("binary_operator_7"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> binary_operator_8 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator_8#0", (args) => CreateSyntaxNode(nameof(binary_operator_8), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.OR))).Named("binary_operator_8"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> binary_operator_9 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator_9#0", (args) => CreateSyntaxNode(nameof(binary_operator_9), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.AMP_DOUBLE))).Named("binary_operator_9"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> binary_operator_10 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("binary_operator_10#0", (args) => CreateSyntaxNode(nameof(binary_operator_10), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.OR_DOUBLE))).Named("binary_operator_10"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> unary_module_path_operator =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("unary_module_path_operator#0", (args) => CreateSyntaxNode(nameof(unary_module_path_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EXCLAMATION)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("unary_module_path_operator#1", (args) => CreateSyntaxNode(nameof(unary_module_path_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.TYLDA)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("unary_module_path_operator#2", (args) => CreateSyntaxNode(nameof(unary_module_path_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.AMP)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("unary_module_path_operator#3", (args) => CreateSyntaxNode(nameof(unary_module_path_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.TYLDA_AMP)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("unary_module_path_operator#4", (args) => CreateSyntaxNode(nameof(unary_module_path_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.OR)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("unary_module_path_operator#5", (args) => CreateSyntaxNode(nameof(unary_module_path_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.TYLDA_OR)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("unary_module_path_operator#6", (args) => CreateSyntaxNode(nameof(unary_module_path_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.DASH)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("unary_module_path_operator#7", (args) => CreateSyntaxNode(nameof(unary_module_path_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.TYLDA_DASH)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("unary_module_path_operator#8", (args) => CreateSyntaxNode(nameof(unary_module_path_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.DASH_TYLDA))))))))))).Named("unary_module_path_operator"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> binary_module_path_operator =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("binary_module_path_operator#0", (args) => CreateSyntaxNode(nameof(binary_module_path_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL_DOUBLE)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_module_path_operator#1", (args) => CreateSyntaxNode(nameof(binary_module_path_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL_NOT)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_module_path_operator#2", (args) => CreateSyntaxNode(nameof(binary_module_path_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.AMP_DOUBLE)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_module_path_operator#3", (args) => CreateSyntaxNode(nameof(binary_module_path_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.OR_DOUBLE)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_module_path_operator#4", (args) => CreateSyntaxNode(nameof(binary_module_path_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.AMP)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_module_path_operator#5", (args) => CreateSyntaxNode(nameof(binary_module_path_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.OR)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_module_path_operator#6", (args) => CreateSyntaxNode(nameof(binary_module_path_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.DASH)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_module_path_operator#7", (args) => CreateSyntaxNode(nameof(binary_module_path_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.DASH_TYLDA)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_module_path_operator#8", (args) => CreateSyntaxNode(nameof(binary_module_path_operator), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.TYLDA_DASH))))))))))).Named("binary_module_path_operator"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> number =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("number#0", (args) => CreateSyntaxNode(nameof(number), args), new Lazy<IParser<VerilogToken>>(() => binary_number.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("number#1", (args) => CreateSyntaxNode(nameof(number), args), new Lazy<IParser<VerilogToken>>(() => hex_number.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("number#2", (args) => CreateSyntaxNode(nameof(number), args), new Lazy<IParser<VerilogToken>>(() => octal_number.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("number#3", (args) => CreateSyntaxNode(nameof(number), args), new Lazy<IParser<VerilogToken>>(() => real_number_of_decimal.Value))))).Named("number"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> real_number_of_decimal =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("real_number_of_decimal#0", (args) => CreateSyntaxNode(nameof(real_number_of_decimal), args), new Lazy<IParser<VerilogToken>>(() => real_number.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("real_number_of_decimal#1", (args) => CreateSyntaxNode(nameof(real_number_of_decimal), args), new Lazy<IParser<VerilogToken>>(() => decimal_number.Value))).Named("real_number_of_decimal"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> real_number =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("real_number#0", (args) => CreateSyntaxNode(nameof(real_number), args), new Lazy<IParser<VerilogToken>>(() => unsigned_number.Value), new Lazy<IParser<VerilogToken>>(() => real_number_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => exp.Value), new Lazy<IParser<VerilogToken>>(() => sign.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => unsigned_number.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("real_number#1", (args) => CreateSyntaxNode(nameof(real_number), args), new Lazy<IParser<VerilogToken>>(() => unsigned_number.Value), new Lazy<IParser<VerilogToken>>(() => real_number_optional_2.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => scale_factor.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("real_number#2", (args) => CreateSyntaxNode(nameof(real_number), args), new Lazy<IParser<VerilogToken>>(() => unsigned_number.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.DOT)), new Lazy<IParser<VerilogToken>>(() => unsigned_number.Value)))).Named("real_number"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> real_number_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("real_number_optional#0", (args) => CreateSyntaxNode(nameof(real_number_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.DOT)), new Lazy<IParser<VerilogToken>>(() => unsigned_number.Value)).Named("real_number_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> real_number_optional_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("real_number_optional_2#0", (args) => CreateSyntaxNode(nameof(real_number_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.DOT)), new Lazy<IParser<VerilogToken>>(() => unsigned_number.Value)).Named("real_number_optional_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> exp = new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("exp#0", (args) => CreateSyntaxNode(nameof(exp), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.REAL_LETTER))));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> scale_factor =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("scale_factor#0", (args) => CreateSyntaxNode(nameof(scale_factor), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('T')))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("scale_factor#1", (args) => CreateSyntaxNode(nameof(scale_factor), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('G')))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("scale_factor#2", (args) => CreateSyntaxNode(nameof(scale_factor), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('M')))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("scale_factor#3", (args) => CreateSyntaxNode(nameof(scale_factor), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('K')))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("scale_factor#4", (args) => CreateSyntaxNode(nameof(scale_factor), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('k')))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("scale_factor#5", (args) => CreateSyntaxNode(nameof(scale_factor), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('m')))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("scale_factor#6", (args) => CreateSyntaxNode(nameof(scale_factor), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('u')))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("scale_factor#7", (args) => CreateSyntaxNode(nameof(scale_factor), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('n')))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("scale_factor#8", (args) => CreateSyntaxNode(nameof(scale_factor), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('p')))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("scale_factor#9", (args) => CreateSyntaxNode(nameof(scale_factor), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('f')))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("scale_factor#10", (args) => CreateSyntaxNode(nameof(scale_factor), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('a'))))))))))))).Named("scale_factor"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> decimal_number =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("decimal_number#0", (args) => CreateSyntaxNode(nameof(decimal_number), args), new Lazy<IParser<VerilogToken>>(() => size.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => decimal_base.Value), new Lazy<IParser<VerilogToken>>(() => unsigned_number.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("decimal_number#1", (args) => CreateSyntaxNode(nameof(decimal_number), args), new Lazy<IParser<VerilogToken>>(() => size.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => decimal_base.Value), new Lazy<IParser<VerilogToken>>(() => x_digit.Value), new Lazy<IParser<VerilogToken>>(() => decimal_number_many.Value.Many(greedy: true)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("decimal_number#2", (args) => CreateSyntaxNode(nameof(decimal_number), args), new Lazy<IParser<VerilogToken>>(() => size.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => decimal_base.Value), new Lazy<IParser<VerilogToken>>(() => z_digit.Value), new Lazy<IParser<VerilogToken>>(() => decimal_number_many_2.Value.Many(greedy: true)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("decimal_number#3", (args) => CreateSyntaxNode(nameof(decimal_number), args), new Lazy<IParser<VerilogToken>>(() => unsigned_number.Value))))).Named("decimal_number"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> decimal_number_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("decimal_number_many#0", (args) => CreateSyntaxNode(nameof(decimal_number_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.UNDERLINE))).Named("decimal_number_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> decimal_number_many_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("decimal_number_many_2#0", (args) => CreateSyntaxNode(nameof(decimal_number_many_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.UNDERLINE))).Named("decimal_number_many_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> binary_number =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("binary_number#0", (args) => CreateSyntaxNode(nameof(binary_number), args), new Lazy<IParser<VerilogToken>>(() => size.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => binary_base.Value), new Lazy<IParser<VerilogToken>>(() => binary_value.Value)).Named("binary_number"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> octal_number =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("octal_number#0", (args) => CreateSyntaxNode(nameof(octal_number), args), new Lazy<IParser<VerilogToken>>(() => size.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => octal_base.Value), new Lazy<IParser<VerilogToken>>(() => octal_value.Value)).Named("octal_number"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> hex_number =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("hex_number#0", (args) => CreateSyntaxNode(nameof(hex_number), args), new Lazy<IParser<VerilogToken>>(() => size.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => hex_base.Value), new Lazy<IParser<VerilogToken>>(() => hex_value.Value)).Named("hex_number"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> sign =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("sign#0", (args) => CreateSyntaxNode(nameof(sign), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.PLUS)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("sign#1", (args) => CreateSyntaxNode(nameof(sign), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.MINUS)))).Named("sign"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> size =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("size#0", (args) => CreateSyntaxNode(nameof(size), args), new Lazy<IParser<VerilogToken>>(() => non_zero_unsigned_number.Value)).Named("size"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> non_zero_unsigned_number =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("non_zero_unsigned_number#0", (args) => CreateSyntaxNode(nameof(non_zero_unsigned_number), args), new Lazy<IParser<VerilogToken>>(() => non_zero_decimal_digit.Value), new Lazy<IParser<VerilogToken>>(() => non_zero_unsigned_number_many.Value.Many(greedy: true))).Named("non_zero_unsigned_number"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> non_zero_unsigned_number_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("non_zero_unsigned_number_many#0", (args) => CreateSyntaxNode(nameof(non_zero_unsigned_number_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.UNDERLINE)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("non_zero_unsigned_number_many#1", (args) => CreateSyntaxNode(nameof(non_zero_unsigned_number_many), args), new Lazy<IParser<VerilogToken>>(() => decimal_digit.Value))).Named("non_zero_unsigned_number_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> unsigned_number =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("unsigned_number#0", (args) => CreateSyntaxNode(nameof(unsigned_number), args), new Lazy<IParser<VerilogToken>>(() => decimal_digit.Value), new Lazy<IParser<VerilogToken>>(() => unsigned_number_many.Value.Many(greedy: true))).Named("unsigned_number"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> unsigned_number_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("unsigned_number_many#0", (args) => CreateSyntaxNode(nameof(unsigned_number_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.UNDERLINE)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("unsigned_number_many#1", (args) => CreateSyntaxNode(nameof(unsigned_number_many), args), new Lazy<IParser<VerilogToken>>(() => decimal_digit.Value))).Named("unsigned_number_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> binary_value =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("binary_value#0", (args) => CreateSyntaxNode(nameof(binary_value), args), new Lazy<IParser<VerilogToken>>(() => binary_digit.Value), new Lazy<IParser<VerilogToken>>(() => binary_value_many.Value.Many(greedy: true))).Named("binary_value"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> binary_value_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("binary_value_many#0", (args) => CreateSyntaxNode(nameof(binary_value_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.UNDERLINE)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_value_many#1", (args) => CreateSyntaxNode(nameof(binary_value_many), args), new Lazy<IParser<VerilogToken>>(() => binary_digit.Value))).Named("binary_value_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> octal_value =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("octal_value#0", (args) => CreateSyntaxNode(nameof(octal_value), args), new Lazy<IParser<VerilogToken>>(() => octal_digit.Value), new Lazy<IParser<VerilogToken>>(() => octal_value_many.Value.Many(greedy: true))).Named("octal_value"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> octal_value_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("octal_value_many#0", (args) => CreateSyntaxNode(nameof(octal_value_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.UNDERLINE)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("octal_value_many#1", (args) => CreateSyntaxNode(nameof(octal_value_many), args), new Lazy<IParser<VerilogToken>>(() => octal_digit.Value))).Named("octal_value_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> hex_value =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("hex_value#0", (args) => CreateSyntaxNode(nameof(hex_value), args), new Lazy<IParser<VerilogToken>>(() => hex_digit.Value), new Lazy<IParser<VerilogToken>>(() => hex_value_many.Value.Many(greedy: true))).Named("hex_value"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> hex_value_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("hex_value_many#0", (args) => CreateSyntaxNode(nameof(hex_value_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.UNDERLINE)))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("hex_value_many#1", (args) => CreateSyntaxNode(nameof(hex_value_many), args), new Lazy<IParser<VerilogToken>>(() => hex_digit.Value))).Named("hex_value_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> decimal_base =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("decimal_base#0", (args) => CreateSyntaxNode(nameof(decimal_base), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SINGLE_QUOTE)), new Lazy<IParser<VerilogToken>>(() => decimal_base_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('d')))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("decimal_base#1", (args) => CreateSyntaxNode(nameof(decimal_base), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SINGLE_QUOTE)), new Lazy<IParser<VerilogToken>>(() => decimal_base_optional_2.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('D')))).Named("decimal_base"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> decimal_base_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("decimal_base_optional#0", (args) => CreateSyntaxNode(nameof(decimal_base_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('s')))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("decimal_base_optional#1", (args) => CreateSyntaxNode(nameof(decimal_base_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('S')))).Named("decimal_base_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> decimal_base_optional_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("decimal_base_optional_2#0", (args) => CreateSyntaxNode(nameof(decimal_base_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('s')))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("decimal_base_optional_2#1", (args) => CreateSyntaxNode(nameof(decimal_base_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('S')))).Named("decimal_base_optional_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> binary_base = new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("binary_base#0", (args) => CreateSyntaxNode(nameof(binary_base), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SINGLE_QUOTE)), new Lazy<IParser<VerilogToken>>(() => binary_base_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('b'))));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> binary_base_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("binary_base_optional#0", (args) => CreateSyntaxNode(nameof(binary_base_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('s')))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_base_optional#1", (args) => CreateSyntaxNode(nameof(binary_base_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('S')))).Named("binary_base_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> binary_base_optional_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("binary_base_optional_2#0", (args) => CreateSyntaxNode(nameof(binary_base_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('s')))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("binary_base_optional_2#1", (args) => CreateSyntaxNode(nameof(binary_base_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('S')))).Named("binary_base_optional_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> octal_base =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("octal_base#0", (args) => CreateSyntaxNode(nameof(octal_base), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SINGLE_QUOTE)), new Lazy<IParser<VerilogToken>>(() => octal_base_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('o')))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("octal_base#1", (args) => CreateSyntaxNode(nameof(octal_base), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SINGLE_QUOTE)), new Lazy<IParser<VerilogToken>>(() => octal_base_optional_2.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('O')))).Named("octal_base"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> octal_base_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("octal_base_optional#0", (args) => CreateSyntaxNode(nameof(octal_base_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('s')))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("octal_base_optional#1", (args) => CreateSyntaxNode(nameof(octal_base_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('S')))).Named("octal_base_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> octal_base_optional_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("octal_base_optional_2#0", (args) => CreateSyntaxNode(nameof(octal_base_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('s')))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("octal_base_optional_2#1", (args) => CreateSyntaxNode(nameof(octal_base_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('S')))).Named("octal_base_optional_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> hex_base = new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("hex_base#0", (args) => CreateSyntaxNode(nameof(hex_base), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SINGLE_QUOTE)), new Lazy<IParser<VerilogToken>>(() => hex_base_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('h'))));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> hex_base_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("hex_base_optional#0", (args) => CreateSyntaxNode(nameof(hex_base_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('s')))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("hex_base_optional#1", (args) => CreateSyntaxNode(nameof(hex_base_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('S')))).Named("hex_base_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> hex_base_optional_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("hex_base_optional_2#0", (args) => CreateSyntaxNode(nameof(hex_base_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('s')))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("hex_base_optional_2#1", (args) => CreateSyntaxNode(nameof(hex_base_optional_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('S')))).Named("hex_base_optional_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> non_zero_decimal_digit =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("non_zero_decimal_digit#0", (args) => CreateSyntaxNode(nameof(non_zero_decimal_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('1')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("non_zero_decimal_digit#1", (args) => CreateSyntaxNode(nameof(non_zero_decimal_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('2')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("non_zero_decimal_digit#2", (args) => CreateSyntaxNode(nameof(non_zero_decimal_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('3')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("non_zero_decimal_digit#3", (args) => CreateSyntaxNode(nameof(non_zero_decimal_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('4')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("non_zero_decimal_digit#4", (args) => CreateSyntaxNode(nameof(non_zero_decimal_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('5')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("non_zero_decimal_digit#5", (args) => CreateSyntaxNode(nameof(non_zero_decimal_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('6')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("non_zero_decimal_digit#6", (args) => CreateSyntaxNode(nameof(non_zero_decimal_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('7')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("non_zero_decimal_digit#7", (args) => CreateSyntaxNode(nameof(non_zero_decimal_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('8')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("non_zero_decimal_digit#8", (args) => CreateSyntaxNode(nameof(non_zero_decimal_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('9'))))))))))).Named("non_zero_decimal_digit"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> decimal_digit =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("decimal_digit#0", (args) => CreateSyntaxNode(nameof(decimal_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('0')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("decimal_digit#1", (args) => CreateSyntaxNode(nameof(decimal_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('1')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("decimal_digit#2", (args) => CreateSyntaxNode(nameof(decimal_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('2')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("decimal_digit#3", (args) => CreateSyntaxNode(nameof(decimal_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('3')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("decimal_digit#4", (args) => CreateSyntaxNode(nameof(decimal_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('4')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("decimal_digit#5", (args) => CreateSyntaxNode(nameof(decimal_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('5')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("decimal_digit#6", (args) => CreateSyntaxNode(nameof(decimal_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('6')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("decimal_digit#7", (args) => CreateSyntaxNode(nameof(decimal_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('7')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("decimal_digit#8", (args) => CreateSyntaxNode(nameof(decimal_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('8')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("decimal_digit#9", (args) => CreateSyntaxNode(nameof(decimal_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('9')))))))))))).Named("decimal_digit"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> binary_digit =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("binary_digit#0", (args) => CreateSyntaxNode(nameof(binary_digit), args), new Lazy<IParser<VerilogToken>>(() => x_digit.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("binary_digit#1", (args) => CreateSyntaxNode(nameof(binary_digit), args), new Lazy<IParser<VerilogToken>>(() => z_digit.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("binary_digit#2", (args) => CreateSyntaxNode(nameof(binary_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('0')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("binary_digit#3", (args) => CreateSyntaxNode(nameof(binary_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('1')))))).Named("binary_digit"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> octal_digit =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("octal_digit#0", (args) => CreateSyntaxNode(nameof(octal_digit), args), new Lazy<IParser<VerilogToken>>(() => x_digit.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("octal_digit#1", (args) => CreateSyntaxNode(nameof(octal_digit), args), new Lazy<IParser<VerilogToken>>(() => z_digit.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("octal_digit#2", (args) => CreateSyntaxNode(nameof(octal_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('0')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("octal_digit#3", (args) => CreateSyntaxNode(nameof(octal_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('1')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("octal_digit#4", (args) => CreateSyntaxNode(nameof(octal_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('2')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("octal_digit#5", (args) => CreateSyntaxNode(nameof(octal_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('3')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("octal_digit#6", (args) => CreateSyntaxNode(nameof(octal_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('4')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("octal_digit#7", (args) => CreateSyntaxNode(nameof(octal_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('5')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("octal_digit#8", (args) => CreateSyntaxNode(nameof(octal_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('6')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("octal_digit#9", (args) => CreateSyntaxNode(nameof(octal_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('7')))))))))))).Named("octal_digit"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> hex_digit =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("hex_digit#0", (args) => CreateSyntaxNode(nameof(hex_digit), args), new Lazy<IParser<VerilogToken>>(() => x_digit.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("hex_digit#1", (args) => CreateSyntaxNode(nameof(hex_digit), args), new Lazy<IParser<VerilogToken>>(() => z_digit.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("hex_digit#2", (args) => CreateSyntaxNode(nameof(hex_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('0')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("hex_digit#3", (args) => CreateSyntaxNode(nameof(hex_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('1')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("hex_digit#4", (args) => CreateSyntaxNode(nameof(hex_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('2')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("hex_digit#5", (args) => CreateSyntaxNode(nameof(hex_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('3')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("hex_digit#6", (args) => CreateSyntaxNode(nameof(hex_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('4')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("hex_digit#7", (args) => CreateSyntaxNode(nameof(hex_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('5')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("hex_digit#8", (args) => CreateSyntaxNode(nameof(hex_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('6')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("hex_digit#9", (args) => CreateSyntaxNode(nameof(hex_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('7')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("hex_digit#10", (args) => CreateSyntaxNode(nameof(hex_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('8')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("hex_digit#11", (args) => CreateSyntaxNode(nameof(hex_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('9')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("hex_digit#12", (args) => CreateSyntaxNode(nameof(hex_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('a')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("hex_digit#13", (args) => CreateSyntaxNode(nameof(hex_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('b')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("hex_digit#14", (args) => CreateSyntaxNode(nameof(hex_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('c')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("hex_digit#15", (args) => CreateSyntaxNode(nameof(hex_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('d')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("hex_digit#16", (args) => CreateSyntaxNode(nameof(hex_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('e')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("hex_digit#17", (args) => CreateSyntaxNode(nameof(hex_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('f')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("hex_digit#18", (args) => CreateSyntaxNode(nameof(hex_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('A')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("hex_digit#19", (args) => CreateSyntaxNode(nameof(hex_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('B')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("hex_digit#20", (args) => CreateSyntaxNode(nameof(hex_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('C')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("hex_digit#21", (args) => CreateSyntaxNode(nameof(hex_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('D')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("hex_digit#22", (args) => CreateSyntaxNode(nameof(hex_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('E')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("hex_digit#23", (args) => CreateSyntaxNode(nameof(hex_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('F')))))))))))))))))))))))))).Named("hex_digit"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> x_digit =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("x_digit#0", (args) => CreateSyntaxNode(nameof(x_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('x')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("x_digit#1", (args) => CreateSyntaxNode(nameof(x_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('X')))).Named("x_digit"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> z_digit =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("z_digit#0", (args) => CreateSyntaxNode(nameof(z_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('z')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("z_digit#1", (args) => CreateSyntaxNode(nameof(z_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('Z')))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("z_digit#2", (args) => CreateSyntaxNode(nameof(z_digit), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.QUESTION))))).Named("z_digit"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> @string =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("@string#0", (args) => CreateSyntaxNode(nameof(@string), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.STRING))).Named("string"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> nature_attribute_reference =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("nature_attribute_reference#0", (args) => CreateSyntaxNode(nameof(nature_attribute_reference), args), new Lazy<IParser<VerilogToken>>(() => net_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.DOT)), new Lazy<IParser<VerilogToken>>(() => potential_or_flow.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.DOT)), new Lazy<IParser<VerilogToken>>(() => nature_attribute_identifier.Value)).Named("nature_attribute_reference"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_port_reference =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_port_reference#0", (args) => CreateSyntaxNode(nameof(analog_port_reference), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_port_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_port_reference#1", (args) => CreateSyntaxNode(nameof(analog_port_reference), args), new Lazy<IParser<VerilogToken>>(() => port_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_port_reference#2", (args) => CreateSyntaxNode(nameof(analog_port_reference), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_port_identifier.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_port_reference#3", (args) => CreateSyntaxNode(nameof(analog_port_reference), args), new Lazy<IParser<VerilogToken>>(() => port_identifier.Value))))).Named("analog_port_reference"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_net_reference =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_net_reference#0", (args) => CreateSyntaxNode(nameof(analog_net_reference), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_port_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_net_reference#1", (args) => CreateSyntaxNode(nameof(analog_net_reference), args), new Lazy<IParser<VerilogToken>>(() => port_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_net_reference#2", (args) => CreateSyntaxNode(nameof(analog_net_reference), args), new Lazy<IParser<VerilogToken>>(() => net_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_net_reference#3", (args) => CreateSyntaxNode(nameof(analog_net_reference), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_port_identifier.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_net_reference#4", (args) => CreateSyntaxNode(nameof(analog_net_reference), args), new Lazy<IParser<VerilogToken>>(() => port_identifier.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_net_reference#5", (args) => CreateSyntaxNode(nameof(analog_net_reference), args), new Lazy<IParser<VerilogToken>>(() => net_identifier.Value))))))).Named("analog_net_reference"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> branch_reference =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("branch_reference#0", (args) => CreateSyntaxNode(nameof(branch_reference), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_branch_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("branch_reference#1", (args) => CreateSyntaxNode(nameof(branch_reference), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_branch_identifier.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("branch_reference#2", (args) => CreateSyntaxNode(nameof(branch_reference), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_unnamed_branch_reference.Value)))).Named("branch_reference"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> hierarchical_unnamed_branch_reference =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("hierarchical_unnamed_branch_reference#0", (args) => CreateSyntaxNode(nameof(hierarchical_unnamed_branch_reference), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_inst_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, ".branch")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => branch_terminal.Value), new Lazy<IParser<VerilogToken>>(() => hierarchical_unnamed_branch_reference_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("hierarchical_unnamed_branch_reference#1", (args) => CreateSyntaxNode(nameof(hierarchical_unnamed_branch_reference), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_inst_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, ".branch")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('<')), new Lazy<IParser<VerilogToken>>(() => port_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('>')), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("hierarchical_unnamed_branch_reference#2", (args) => CreateSyntaxNode(nameof(hierarchical_unnamed_branch_reference), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_inst_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, ".branch")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('<')), new Lazy<IParser<VerilogToken>>(() => hierarchical_port_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser('>')), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET))))).Named("hierarchical_unnamed_branch_reference"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> hierarchical_unnamed_branch_reference_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("hierarchical_unnamed_branch_reference_optional#0", (args) => CreateSyntaxNode(nameof(hierarchical_unnamed_branch_reference_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => branch_terminal.Value)).Named("hierarchical_unnamed_branch_reference_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> parameter_reference =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("parameter_reference#0", (args) => CreateSyntaxNode(nameof(parameter_reference), args), new Lazy<IParser<VerilogToken>>(() => parameter_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("parameter_reference#1", (args) => CreateSyntaxNode(nameof(parameter_reference), args), new Lazy<IParser<VerilogToken>>(() => parameter_identifier.Value))).Named("parameter_reference"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> variable_reference =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("variable_reference#0", (args) => CreateSyntaxNode(nameof(variable_reference), args), new Lazy<IParser<VerilogToken>>(() => variable_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => variable_reference_many.Value.Many(greedy: true)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("variable_reference#1", (args) => CreateSyntaxNode(nameof(variable_reference), args), new Lazy<IParser<VerilogToken>>(() => real_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => variable_reference_many_2.Value.Many(greedy: true)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("variable_reference#2", (args) => CreateSyntaxNode(nameof(variable_reference), args), new Lazy<IParser<VerilogToken>>(() => variable_identifier.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("variable_reference#3", (args) => CreateSyntaxNode(nameof(variable_reference), args), new Lazy<IParser<VerilogToken>>(() => real_identifier.Value))))).Named("variable_reference"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> variable_reference_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("variable_reference_many#0", (args) => CreateSyntaxNode(nameof(variable_reference_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE))).Named("variable_reference_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> variable_reference_many_2 =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("variable_reference_many_2#0", (args) => CreateSyntaxNode(nameof(variable_reference_many_2), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE))).Named("variable_reference_many_2"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> net_reference =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("net_reference#0", (args) => CreateSyntaxNode(nameof(net_reference), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_net_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => analog_range_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("net_reference#1", (args) => CreateSyntaxNode(nameof(net_reference), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_port_identifier.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => analog_range_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("net_reference#2", (args) => CreateSyntaxNode(nameof(net_reference), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_net_identifier.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("net_reference#3", (args) => CreateSyntaxNode(nameof(net_reference), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_port_identifier.Value))))).Named("net_reference"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> attribute_instance =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("attribute_instance#0", (args) => CreateSyntaxNode(nameof(attribute_instance), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.ATTRIBUTE_START)), new Lazy<IParser<VerilogToken>>(() => attr_spec.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance_many.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.ATTRIBUTE_END))).Named("attribute_instance"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> attribute_instance_many =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("attribute_instance_many#0", (args) => CreateSyntaxNode(nameof(attribute_instance_many), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => attr_spec.Value)).Named("attribute_instance_many"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> attr_spec =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("attr_spec#0", (args) => CreateSyntaxNode(nameof(attr_spec), args), new Lazy<IParser<VerilogToken>>(() => attr_name.Value), new Lazy<IParser<VerilogToken>>(() => attr_spec_optional.Value.Optional(greedy: false))).Named("attr_spec"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> attr_spec_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("attr_spec_optional#0", (args) => CreateSyntaxNode(nameof(attr_spec_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.EQUAL)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value)).Named("attr_spec_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> attr_name =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("attr_name#0", (args) => CreateSyntaxNode(nameof(attr_name), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("attr_name"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> ams_net_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("ams_net_identifier#0", (args) => CreateSyntaxNode(nameof(ams_net_identifier), args), new Lazy<IParser<VerilogToken>>(() => net_identifier.Value), new Lazy<IParser<VerilogToken>>(() => dimension.Value.Many(greedy: true)))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("ams_net_identifier#1", (args) => CreateSyntaxNode(nameof(ams_net_identifier), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_net_identifier.Value))).Named("ams_net_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_block_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_block_identifier#0", (args) => CreateSyntaxNode(nameof(analog_block_identifier), args), new Lazy<IParser<VerilogToken>>(() => block_identifier.Value)).Named("analog_block_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_function_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_function_identifier#0", (args) => CreateSyntaxNode(nameof(analog_function_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("analog_function_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_system_task_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_system_task_identifier#0", (args) => CreateSyntaxNode(nameof(analog_system_task_identifier), args), new Lazy<IParser<VerilogToken>>(() => system_task_identifier.Value)).Named("analog_system_task_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_system_function_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_system_function_identifier#0", (args) => CreateSyntaxNode(nameof(analog_system_function_identifier), args), new Lazy<IParser<VerilogToken>>(() => system_function_identifier.Value)).Named("analog_system_function_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analysis_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analysis_identifier#0", (args) => CreateSyntaxNode(nameof(analysis_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("analysis_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> block_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("block_identifier#0", (args) => CreateSyntaxNode(nameof(block_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("block_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> branch_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("branch_identifier#0", (args) => CreateSyntaxNode(nameof(branch_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("branch_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> cell_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("cell_identifier#0", (args) => CreateSyntaxNode(nameof(cell_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("cell_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> config_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("config_identifier#0", (args) => CreateSyntaxNode(nameof(config_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("config_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> connectmodule_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("connectmodule_identifier#0", (args) => CreateSyntaxNode(nameof(connectmodule_identifier), args), new Lazy<IParser<VerilogToken>>(() => module_identifier.Value)).Named("connectmodule_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> connectrules_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("connectrules_identifier#0", (args) => CreateSyntaxNode(nameof(connectrules_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("connectrules_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> discipline_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("discipline_identifier#0", (args) => CreateSyntaxNode(nameof(discipline_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("discipline_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> escaped_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("escaped_identifier#0", (args) => CreateSyntaxNode(nameof(escaped_identifier), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.ESCAPED_IDENTIFIER))).Named("escaped_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> event_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("event_identifier#0", (args) => CreateSyntaxNode(nameof(event_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("event_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> function_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("function_identifier#0", (args) => CreateSyntaxNode(nameof(function_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("function_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> gate_instance_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("gate_instance_identifier#0", (args) => CreateSyntaxNode(nameof(gate_instance_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("gate_instance_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> generate_block_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("generate_block_identifier#0", (args) => CreateSyntaxNode(nameof(generate_block_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("generate_block_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> genvar_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("genvar_identifier#0", (args) => CreateSyntaxNode(nameof(genvar_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("genvar_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> hierarchical_block_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("hierarchical_block_identifier#0", (args) => CreateSyntaxNode(nameof(hierarchical_block_identifier), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_identifier.Value)).Named("hierarchical_block_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> hierarchical_branch_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("hierarchical_branch_identifier#0", (args) => CreateSyntaxNode(nameof(hierarchical_branch_identifier), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_identifier.Value)).Named("hierarchical_branch_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> hierarchical_event_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("hierarchical_event_identifier#0", (args) => CreateSyntaxNode(nameof(hierarchical_event_identifier), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_identifier.Value)).Named("hierarchical_event_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> hierarchical_function_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("hierarchical_function_identifier#0", (args) => CreateSyntaxNode(nameof(hierarchical_function_identifier), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_identifier.Value)).Named("hierarchical_function_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> hierarchical_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("hierarchical_identifier#0", (args) => CreateSyntaxNode(nameof(hierarchical_identifier), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_identifier_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => hierarchical_identifier_lazy.Value.Many(greedy: false)), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("hierarchical_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> hierarchical_identifier_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("hierarchical_identifier_optional#0", (args) => CreateSyntaxNode(nameof(hierarchical_identifier_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "$root")), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.DOT))).Named("hierarchical_identifier_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> hierarchical_identifier_lazy =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("hierarchical_identifier_lazy#0", (args) => CreateSyntaxNode(nameof(hierarchical_identifier_lazy), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value), new Lazy<IParser<VerilogToken>>(() => hierarchical_identifier_lazy_optional.Value.Optional(greedy: false)), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.DOT))).Named("hierarchical_identifier_lazy"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> hierarchical_identifier_lazy_optional =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("hierarchical_identifier_lazy_optional#0", (args) => CreateSyntaxNode(nameof(hierarchical_identifier_lazy_optional), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.LEFT_BRACKET_SQUARE)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.RIGHT_BRACKET_SQUARE))).Named("hierarchical_identifier_lazy_optional"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> hierarchical_inst_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("hierarchical_inst_identifier#0", (args) => CreateSyntaxNode(nameof(hierarchical_inst_identifier), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_identifier.Value)).Named("hierarchical_inst_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> hierarchical_net_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("hierarchical_net_identifier#0", (args) => CreateSyntaxNode(nameof(hierarchical_net_identifier), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_identifier.Value)).Named("hierarchical_net_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> hierarchical_parameter_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("hierarchical_parameter_identifier#0", (args) => CreateSyntaxNode(nameof(hierarchical_parameter_identifier), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_identifier.Value)).Named("hierarchical_parameter_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> hierarchical_port_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("hierarchical_port_identifier#0", (args) => CreateSyntaxNode(nameof(hierarchical_port_identifier), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_identifier.Value)).Named("hierarchical_port_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> hierarchical_variable_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("hierarchical_variable_identifier#0", (args) => CreateSyntaxNode(nameof(hierarchical_variable_identifier), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_identifier.Value)).Named("hierarchical_variable_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> hierarchical_task_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("hierarchical_task_identifier#0", (args) => CreateSyntaxNode(nameof(hierarchical_task_identifier), args), new Lazy<IParser<VerilogToken>>(() => hierarchical_identifier.Value)).Named("hierarchical_task_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("identifier#0", (args) => CreateSyntaxNode(nameof(identifier), args), new Lazy<IParser<VerilogToken>>(() => simple_identifier.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("identifier#1", (args) => CreateSyntaxNode(nameof(identifier), args), new Lazy<IParser<VerilogToken>>(() => escaped_identifier.Value))).Named("identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> inout_port_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("inout_port_identifier#0", (args) => CreateSyntaxNode(nameof(inout_port_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("inout_port_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> input_port_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("input_port_identifier#0", (args) => CreateSyntaxNode(nameof(input_port_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("input_port_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> instance_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("instance_identifier#0", (args) => CreateSyntaxNode(nameof(instance_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("instance_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> library_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("library_identifier#0", (args) => CreateSyntaxNode(nameof(library_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("library_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> module_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("module_identifier#0", (args) => CreateSyntaxNode(nameof(module_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("module_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> module_instance_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("module_instance_identifier#0", (args) => CreateSyntaxNode(nameof(module_instance_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("module_instance_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> module_or_paramset_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("module_or_paramset_identifier#0", (args) => CreateSyntaxNode(nameof(module_or_paramset_identifier), args), new Lazy<IParser<VerilogToken>>(() => module_identifier.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("module_or_paramset_identifier#1", (args) => CreateSyntaxNode(nameof(module_or_paramset_identifier), args), new Lazy<IParser<VerilogToken>>(() => paramset_identifier.Value))).Named("module_or_paramset_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> module_output_variable_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("module_output_variable_identifier#0", (args) => CreateSyntaxNode(nameof(module_output_variable_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("module_output_variable_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> module_parameter_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("module_parameter_identifier#0", (args) => CreateSyntaxNode(nameof(module_parameter_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("module_parameter_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> nature_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("nature_identifier#0", (args) => CreateSyntaxNode(nameof(nature_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("nature_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> nature_access_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("nature_access_identifier#0", (args) => CreateSyntaxNode(nameof(nature_access_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("nature_access_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> nature_attribute_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("nature_attribute_identifier#0", (args) => CreateSyntaxNode(nameof(nature_attribute_identifier), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "abstol")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("nature_attribute_identifier#1", (args) => CreateSyntaxNode(nameof(nature_attribute_identifier), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "access")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("nature_attribute_identifier#2", (args) => CreateSyntaxNode(nameof(nature_attribute_identifier), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "ddt_nature")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("nature_attribute_identifier#3", (args) => CreateSyntaxNode(nameof(nature_attribute_identifier), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "idt_nature")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("nature_attribute_identifier#4", (args) => CreateSyntaxNode(nameof(nature_attribute_identifier), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "units")))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("nature_attribute_identifier#5", (args) => CreateSyntaxNode(nameof(nature_attribute_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value))))))).Named("nature_attribute_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> net_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("net_identifier#0", (args) => CreateSyntaxNode(nameof(net_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("net_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> output_port_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("output_port_identifier#0", (args) => CreateSyntaxNode(nameof(output_port_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("output_port_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> parameter_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("parameter_identifier#0", (args) => CreateSyntaxNode(nameof(parameter_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("parameter_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> paramset_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("paramset_identifier#0", (args) => CreateSyntaxNode(nameof(paramset_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("paramset_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> port_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("port_identifier#0", (args) => CreateSyntaxNode(nameof(port_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("port_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> real_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("real_identifier#0", (args) => CreateSyntaxNode(nameof(real_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("real_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> simple_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("simple_identifier#0", (args) => CreateSyntaxNode(nameof(simple_identifier), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SIMPLE_IDENTIFIER))).Named("simple_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> specparam_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("specparam_identifier#0", (args) => CreateSyntaxNode(nameof(specparam_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("specparam_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> system_function_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("system_function_identifier#0", (args) => CreateSyntaxNode(nameof(system_function_identifier), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SYSTEM_IDENTIFIER))).Named("system_function_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> system_parameter_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("system_parameter_identifier#0", (args) => CreateSyntaxNode(nameof(system_parameter_identifier), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SYSTEM_IDENTIFIER))).Named("system_parameter_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> system_task_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("system_task_identifier#0", (args) => CreateSyntaxNode(nameof(system_task_identifier), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.SYSTEM_IDENTIFIER))).Named("system_task_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> task_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("task_identifier#0", (args) => CreateSyntaxNode(nameof(task_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("task_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> terminal_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("terminal_identifier#0", (args) => CreateSyntaxNode(nameof(terminal_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("terminal_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> text_macro_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("text_macro_identifier#0", (args) => CreateSyntaxNode(nameof(text_macro_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("text_macro_identifier#1", (args) => CreateSyntaxNode(nameof(text_macro_identifier), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "__VAMS_ENABLE__")))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("text_macro_identifier#2", (args) => CreateSyntaxNode(nameof(text_macro_identifier), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "__VAMS_COMPACT_MODELING__"))))).Named("text_macro_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> topmodule_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("topmodule_identifier#0", (args) => CreateSyntaxNode(nameof(topmodule_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("topmodule_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> udp_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("udp_identifier#0", (args) => CreateSyntaxNode(nameof(udp_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("udp_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> udp_instance_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("udp_instance_identifier#0", (args) => CreateSyntaxNode(nameof(udp_instance_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("udp_instance_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> variable_identifier =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("variable_identifier#0", (args) => CreateSyntaxNode(nameof(variable_identifier), args), new Lazy<IParser<VerilogToken>>(() => identifier.Value)).Named("variable_identifier"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_event_expression_prim =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_expression_prim#0", (args) => CreateSyntaxNode(nameof(analog_event_expression_prim), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "or")), new Lazy<IParser<VerilogToken>>(() => analog_event_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_event_expression_prim.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_expression_prim#1", (args) => CreateSyntaxNode(nameof(analog_event_expression_prim), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => analog_event_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_event_expression_prim.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("analog_event_expression_prim#2", (args) => CreateSyntaxNode(nameof(analog_event_expression_prim), args), new Lazy<IParser<VerilogToken>>(() => Parser.Return<VerilogToken, VerilogToken>(null))))).Named("analog_event_expression_prim"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analog_expression_prim =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analog_expression_prim#0", (args) => CreateSyntaxNode(nameof(analog_expression_prim), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.QUESTION)), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => analog_expression.Value), new Lazy<IParser<VerilogToken>>(() => analog_expression_prim.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("analog_expression_prim#1", (args) => CreateSyntaxNode(nameof(analog_expression_prim), args), new Lazy<IParser<VerilogToken>>(() => Parser.Return<VerilogToken, VerilogToken>(null)))).Named("analog_expression_prim"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> analysis_or_constant_expression_prim =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("analysis_or_constant_expression_prim#0", (args) => CreateSyntaxNode(nameof(analysis_or_constant_expression_prim), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.QUESTION)), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => analysis_or_constant_expression_prim.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("analysis_or_constant_expression_prim#1", (args) => CreateSyntaxNode(nameof(analysis_or_constant_expression_prim), args), new Lazy<IParser<VerilogToken>>(() => Parser.Return<VerilogToken, VerilogToken>(null)))).Named("analysis_or_constant_expression_prim"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> constant_expression_prim =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("constant_expression_prim#0", (args) => CreateSyntaxNode(nameof(constant_expression_prim), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.QUESTION)), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => constant_expression_prim.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("constant_expression_prim#1", (args) => CreateSyntaxNode(nameof(constant_expression_prim), args), new Lazy<IParser<VerilogToken>>(() => Parser.Return<VerilogToken, VerilogToken>(null)))).Named("constant_expression_prim"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> event_expression_prim =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("event_expression_prim#0", (args) => CreateSyntaxNode(nameof(event_expression_prim), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.KEYWORD, "or")), new Lazy<IParser<VerilogToken>>(() => event_expression.Value), new Lazy<IParser<VerilogToken>>(() => event_expression_prim.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("event_expression_prim#1", (args) => CreateSyntaxNode(nameof(event_expression_prim), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COMMA)), new Lazy<IParser<VerilogToken>>(() => event_expression.Value), new Lazy<IParser<VerilogToken>>(() => event_expression_prim.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("event_expression_prim#2", (args) => CreateSyntaxNode(nameof(event_expression_prim), args), new Lazy<IParser<VerilogToken>>(() => Parser.Return<VerilogToken, VerilogToken>(null))))).Named("event_expression_prim"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> expression1_prim =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("expression1_prim#0", (args) => CreateSyntaxNode(nameof(expression1_prim), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.QUESTION)), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => expression2.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => expression3.Value), new Lazy<IParser<VerilogToken>>(() => expression1_prim.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("expression1_prim#1", (args) => CreateSyntaxNode(nameof(expression1_prim), args), new Lazy<IParser<VerilogToken>>(() => Parser.Return<VerilogToken, VerilogToken>(null)))).Named("expression1_prim"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> genvar_expression_prim =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("genvar_expression_prim#0", (args) => CreateSyntaxNode(nameof(genvar_expression_prim), args), new Lazy<IParser<VerilogToken>>(() => binary_operator.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => genvar_expression.Value), new Lazy<IParser<VerilogToken>>(() => genvar_expression_prim.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("genvar_expression_prim#1", (args) => CreateSyntaxNode(nameof(genvar_expression_prim), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.QUESTION)), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => genvar_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => genvar_expression.Value), new Lazy<IParser<VerilogToken>>(() => genvar_expression_prim.Value))
           .Or(Parser.Sequence<VerilogToken, SyntaxNode>("genvar_expression_prim#2", (args) => CreateSyntaxNode(nameof(genvar_expression_prim), args), new Lazy<IParser<VerilogToken>>(() => Parser.Return<VerilogToken, VerilogToken>(null))))).Named("genvar_expression_prim"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> module_path_expression_prim =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("module_path_expression_prim#0", (args) => CreateSyntaxNode(nameof(module_path_expression_prim), args), new Lazy<IParser<VerilogToken>>(() => binary_module_path_operator.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => module_path_expression.Value), new Lazy<IParser<VerilogToken>>(() => module_path_expression_prim.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("module_path_expression_prim#1", (args) => CreateSyntaxNode(nameof(module_path_expression_prim), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.QUESTION)), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => module_path_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => module_path_expression.Value), new Lazy<IParser<VerilogToken>>(() => module_path_expression_prim.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("module_path_expression_prim#2", (args) => CreateSyntaxNode(nameof(module_path_expression_prim), args), new Lazy<IParser<VerilogToken>>(() => Parser.Return<VerilogToken, VerilogToken>(null))))).Named("module_path_expression_prim"));

        public static Lazy<IParser<VerilogToken, SyntaxNode>> paramset_constant_expression_prim =
          new Lazy<IParser<VerilogToken, SyntaxNode>>(() => Parser.Sequence<VerilogToken, SyntaxNode>("paramset_constant_expression_prim#0", (args) => CreateSyntaxNode(nameof(paramset_constant_expression_prim), args), new Lazy<IParser<VerilogToken>>(() => binary_operator.Value), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => paramset_constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => paramset_constant_expression_prim.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("paramset_constant_expression_prim#1", (args) => CreateSyntaxNode(nameof(paramset_constant_expression_prim), args), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.QUESTION)), new Lazy<IParser<VerilogToken>>(() => attribute_instance.Value.Many(greedy: true)), new Lazy<IParser<VerilogToken>>(() => paramset_constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => CreateTokenParser(VerilogTokenType.COLON)), new Lazy<IParser<VerilogToken>>(() => paramset_constant_expression.Value), new Lazy<IParser<VerilogToken>>(() => paramset_constant_expression_prim.Value))
           .XOr(Parser.Sequence<VerilogToken, SyntaxNode>("paramset_constant_expression_prim#2", (args) => CreateSyntaxNode(nameof(paramset_constant_expression_prim), args), new Lazy<IParser<VerilogToken>>(() => Parser.Return<VerilogToken, VerilogToken>(null))))).Named("paramset_constant_expression_prim"));


        public static Func<string, (string valueParserName, object value)[], SyntaxNode> CreateSyntaxNode = (name, args) => {
            var result = new (string valueParserName, object value)[args.Length];
            for (var i = 0; i < args.Length; i++)
            {
                var res = args[i].value;

                if (res is IOption<object> c)
                {
                    result[i].value = CreateOption(c.GetOrDefault());
                }
                else
                {
                    result[i].value = res;
                }

                result[i].valueParserName = args[i].valueParserName;
            }
            return CreateNode(name, result);
        };

        public static SyntaxNode CreateNode(string name, (string valueParserName, object value)[] args)
        {
            var node = new SyntaxNode(name);
            foreach (var item in args)
            {
                var child = item.value;

                if (child is string s && !string.IsNullOrEmpty(s))
                {
                    node.Children.Add(new SyntaxToken { Value = child.ToString(), Name = item.valueParserName, Parent = node });
                }
                else if (child is char c)
                {
                    node.Children.Add(new SyntaxToken { Value = c.ToString(), Name = item.valueParserName, Parent = node });
                }
                else if (child is SyntaxNode a)
                {
                    a.Parent = node;
                    node.Children.Add(a);
                }
                else if (child is IEnumerable<ISyntaxElement> e)
                {
                    node.Children.Add(new SyntaxNodeMany(item.valueParserName, e) { Parent = node });
                }
                else if (child is VerilogToken token)
                {
                    node.Children.Add(new SyntaxToken { Value = token.Lexem.ToString(), Name = item.valueParserName, Parent = node });
                }
                else if (child is SyntaxNodeOption opt)
                {
                    opt.Name = item.valueParserName;
                    opt.Parent = node;
                    node.Children.Add(opt);
                }
            }
            return node;
        }

        public static IParser<VerilogToken, VerilogToken> CreateTokenParser(VerilogTokenType type, string value = null)
        {
            return Parser.Token<VerilogToken, VerilogToken>(type.ToString(), (token) => token.Type == (int)type && (value == null || token.Lexem.ToLower() == value.ToLower()), (token) => token);
        }

        public static IParser<VerilogToken, VerilogToken> CreateTokenParser(char value)
        {
            if (char.IsDigit(value))
            {
                return Parser.Token<VerilogToken, VerilogToken>(VerilogTokenType.DIGIT.ToString(), (token) => token.Type == (int)VerilogTokenType.DIGIT, (token) => token);
            }
            else
            {
                return Parser.Token<VerilogToken, VerilogToken>(VerilogTokenType.LETTER.ToString(), (token) => token.Lexem == value.ToString(), (token) => token);
            }
        }

        public static object CreateOption(object inside)
        {
            if (inside is ISyntaxElement element)
            {
                return new SyntaxNodeOption { Inside = element };
            }

            if (inside is string text)
            {
                return new SyntaxNodeOption { Inside = new SyntaxToken() { Value = text } };
            }

            if (inside is char c)
            {
                return new SyntaxNodeOption { Inside = new SyntaxToken() { Value = c.ToString() } };
            }

            return null;
        }
    }
}